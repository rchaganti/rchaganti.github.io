<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/blog/</link>
    <description>Recent content in Blogs on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to Azure Bicep</title>
      <link>https://ravichaganti.com/blog/introduction-to-azure-bicep/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/introduction-to-azure-bicep/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As I started preparing slides and demos for &lt;a href=&#34;https://ravichaganti.com/speaking-at-global-azure-bootcamp-india-2021&#34;&gt;my session on Azure Bicep at the Global Azure Bootcamp 2021&lt;/a&gt;, I made a bunch of notes. As a part of this &lt;a href=&#34;https://ravichaganti.com/series/azure-bicep&#34;&gt;new series of articles on Azure Bicep&lt;/a&gt;, I will start sharing those notes here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/azure/bicep&#34;&gt;Azure Bicep&lt;/a&gt; is a new Domain-Specific Language (DSL) for declaratively deploying Azure resources. Bicep is not a general purpose programming language but a transparent abstraction for Azure Resource Manager (ARM) Templates. This ensures that the properties that are valid in ARM templates are valid in Bicep as well. Azure Bicep acts as a transpiler for generating ARM templates from Bicep files. But, what is wrong with ARM templates?&lt;/p&gt;
&lt;h3 id=&#34;why-bicep&#34;&gt;Why Bicep?&lt;/h3&gt;
&lt;p&gt;ARM templates are JSON documents that offer a declarative way of defining your Azure infrastructure and configuration. These templates specify your intent to provision a service without the need to express how that can be done. &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/templates/&#34;&gt;ARM template language&lt;/a&gt; offers built-in functions and other language constructs such as loops and that help you create more dynamic infrastructure definitions. However, the JSON syntax for ARM templates makes these documents quite verbose and restricts the extensibility since you have to play within what is supported within JSON data representation. As the complexity of the infrastructure grows, your ARM template becomes almost unreadable and maintain. You can, of course, decompose the template into multiple linked templates and but linked templates too have their own limitations. You can use linked templates only from a HTTP location or a Azure blob store. There are alternatives to ARM template deployment. Especially, &lt;a href=&#34;https://www.terraform.io/&#34;&gt;HashiCorp Terraform&lt;/a&gt; or &lt;a href=&#34;https://www.pulumi.com/product/#sdk&#34;&gt;Pulumi SDK&lt;/a&gt;. These tools do not use ARM templates but provide alternate ways to define your infrastructure as code.&lt;/p&gt;
&lt;p&gt;Terraform provides a declarative way to define Azure infrastructure using the HashiCorp Configuration Language (HCL). Being a &lt;a href=&#34;https://www.terraform.io/docs/language/index.html&#34;&gt;language on its own&lt;/a&gt;, HCL supports variables, data types, arithmetic and logical operations, functions, and expressions. With the help of HCL, terraform delivers syntax that is concise and simple to write. The only downside of Terraform is the day zero support for new resources and resource providers.&lt;/p&gt;
&lt;p&gt;Pulumi, on the other hand, provides an SDK that you can use in your favorite language and define your infrastructure as imperative scripts or programs. I have not spent much time on Pulumi because of my non-developer background but Pulumi claims that they can provide day zero support for any new resource or resource provider.&lt;/p&gt;
&lt;p&gt;Both Terraform and Pulumi support multiple cloud deployments. These are not tools that are specifically written for Microsoft Azure. Microsoft could have chosen to adapt one of these but they instead chose to write their own language that makes authoring ARM templates easier. This is an important step since there are many customers who have heavily invested in ARM templates. If Microsoft moves away from ARM templates, this section of customers won&amp;rsquo;t be happy. Creating a transpiler that provides simple and concise declarative way of generating ARM templates will help maintain the backward compatibility while ensuring that those who are just starting with Microsoft Azure do not get freaked out looking at ARM templates.&lt;/p&gt;
&lt;p&gt;With Bicep, you don&amp;rsquo;t have to worry about learning ARM template language and author thousands of lines of JSON documents. You simply write a Bicep file that declaratively defines the Azure infrastructure, transpile it into an ARM template, and finally use the methods that are already known to you to provision the generated ARM template. Simple. But, how simple is Bicep language? Let us look at an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param storageAccountName string

@allowed([
  &amp;#39;Hot&amp;#39;
  &amp;#39;Cool&amp;#39;
  &amp;#39;Archive&amp;#39;
])
param accessTier string = &amp;#39;Hot&amp;#39;

@allowed([
  &amp;#39;WestUS2&amp;#39;
  &amp;#39;CentralUS&amp;#39;
])
param location string = &amp;#39;WestUS2&amp;#39;

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-06-01&amp;#39; = {
  name: storageAccountName
  location: location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: &amp;#39;Hot&amp;#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 26 lines in the above example is what you need to create a reusable Bicep file that can generate ARM template to provision an Azure storage account. This, when compiled, produces the following ARM template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Cool&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Archive&amp;#34;&lt;/span&gt;
      ]
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WestUS2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WestUS2&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;CentralUS&amp;#34;&lt;/span&gt;
      ]
    }
  },
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;: [],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2019-06-01&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;location&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
      }
    }
  ],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;_generator&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;bicep&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;0.3.126.58533&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;templateHash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;6796585337478950038&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated template is almost twice the size of the Bicep file. This ARM template can be deployed by supplying the necessary parameter values as another JSON or at the command line when using Azure CLI or Azure PowerShell.&lt;/p&gt;
&lt;p&gt;This is a trivial example but consider the flexibility you will have with a language of its own to generate the ARM templates. You don&amp;rsquo;t have to worry about the JSON syntax gotchas or worry about how you can effectively decompose larger ARM templates into smaller linked templates. Bicep provides not just the constructs of a typical programming language but also a way to compose your Azure infrastructure definitions as smaller reusable modules.&lt;/p&gt;
&lt;p&gt;With Bicep being a transpiler for ARM templates, your existing CI and CD pipelines don&amp;rsquo;t have to change. All you may have to do is add an additional &lt;code&gt;bicep build&lt;/code&gt; step that brings the ARM template into the pipeline.&lt;/p&gt;
&lt;p&gt;Alright. This is a quick overview of what is Bicep and why you may want to look at it. In the next part of this series, you will see how you can get started with Bicep. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve and save Project Bicep examples from GitHub</title>
      <link>https://ravichaganti.com/blog/retrieve-and-save-project-bicep-examples-from-github/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/retrieve-and-save-project-bicep-examples-from-github/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://github.com/azure/bicep&#34;&gt;Project Bicep&lt;/a&gt; aims to simplify how you author Azure Resource Manager (ARM) templates. Bicep is a new declarative language and a transpiler. This transparent abstraction takes a bicep file and transpiles it into an ARM template JSON. The Bicep CLI provides the necessary capablities to compile bicep files to ARM templates and decompile ARM templates into bicep files.&lt;/p&gt;
&lt;p&gt;Bicep language itself is very easy to understand and start using. However, as you start learning it may be helpful to see a few examples and draw some inspiration as you build your won bicep files. Project Bicep respository on GitHub has a good number of examples for varied level of complexity. While looking at these, I thought it may be a good idea to create scripts that can retrieve and save selected example locally.&lt;/p&gt;
&lt;p&gt;These scripts are a part of larger &lt;a href=&#34;https://github.com/rchaganti/bicephelpers&#34;&gt;Bicep helper scripts and tools project&lt;/a&gt; I just published on GitHub. Within this repository I have two PowerShell scripts &amp;ndash; &lt;code&gt;getBicepExample.ps1&lt;/code&gt; and &lt;code&gt;saveBicepExample.ps1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;retrieve-bicep-examples&#34;&gt;Retrieve Bicep Examples&lt;/h3&gt;
&lt;p&gt;To retieve a list of all examples available in the Bicep repository, you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;.\getBicepExample.ps1 -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To retrieve a specific level (complexity) of examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;.\getBicepExample.ps1 -TemplateLevel 101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To retrieve examples that contains a specific keyword in the description:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;.\getBicepExample.ps1 -TemplateLevel 101 -Keyword ad -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;save-bicep-examples&#34;&gt;Save Bicep Examples&lt;/h3&gt;
&lt;p&gt;Once you retrieve and identify the necessary bicep example decripton, you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;.\saveBicepExample.ps1 -TemplateDescription &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;101/aad-domainservices&amp;#39;&lt;/span&gt; -Path C:\sandbox -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will save the 101/aad-domainservices/main.bicep to the local folder C:\sandbox.&lt;/p&gt;
&lt;p&gt;This is just a quick 10 minutes of work this morning while playing with bicep. I will update these scripts and add more helper scripts and tools soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speaking at Global Azure Bootcamp India 2021</title>
      <link>https://ravichaganti.com/blog/speaking-at-global-azure-bootcamp-india-2021/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/speaking-at-global-azure-bootcamp-india-2021/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://globalazure.net/&#34;&gt;Global Azure Bootcamp&lt;/a&gt; is happening this year from April 15th to 17th as an online event. And, I will be speaking this year. I submitted a couple of sessions and the &lt;a href=&#34;https://github.com/Azure/bicep&#34;&gt;Azure Bicep&lt;/a&gt; session got accepted.&lt;/p&gt;
&lt;h3 id=&#34;so-what-is-azure-bicep&#34;&gt;So, what is Azure Bicep?&lt;/h3&gt;
&lt;p&gt;Azure Bicep is the Domain-Specific Language (DSL) and a transparent abstraction built on top of Azure Resource Manager (ARM). The intention behind this project is to simplify authoring ARM templates. Bicep language transpiles into an ARM template JSON which you can deploy using already well-known methods and your existing CI/CD pipelines.&lt;/p&gt;
&lt;h3 id=&#34;what-is-this-session-about&#34;&gt;What is this session about?&lt;/h3&gt;
&lt;p&gt;My session at the Global Azure Bootcamp will be about understanding Bicep language and getting started with writing some basic to advanced Bicep files.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t wait to demonstrate what I have been building with Bicep! See you there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell script to download and install Azure CLI</title>
      <link>https://ravichaganti.com/blog/powershell-script-to-download-and-install-azure-cli/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-script-to-download-and-install-azure-cli/</guid>
      <description>&lt;p&gt;Whenever I have to build a new development machine or VM, I usually go about installing a few development tools and command line tools that I use quite often. One such tool is the &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/&#34;&gt;Azure CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are many alternatives for installing Azure CLI as a part of build process but what I use is this PowerShell script.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;CmdletBinding&lt;/span&gt;()]
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;param&lt;/span&gt;
(

)
$InformationPreference = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Continue&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#007f7f&#34;&gt;# Verify that the script is running as administrator&lt;/span&gt;
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; ([bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;S-1-5-32-544&amp;#39;&lt;/span&gt;))
{
    &lt;span style=&#34;color:#007f7f&#34;&gt;# Download Azure CLI MSI package&lt;/span&gt;
    $uri = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;https://aka.ms/installazurecliwindows&amp;#39;&lt;/span&gt;
    $request = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Invoke-WebRequest&lt;/span&gt; -UseBasicParsing -Uri $uri -MaximumRedirection 0 -ErrorAction Ignore

    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt;(($request.StatusCode -ge 300) -and ($request.StatusCode -lt 400))
    {
       $location = $request.Headers.Location
       $fileName = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Split-Path&lt;/span&gt; -Path $location -Leaf
       $cliVersion = $fileName.Split(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)[2].trim(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;.msi&amp;#39;&lt;/span&gt;)
       $downloadPath = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;${env:Temp}\$fileName&amp;#34;&lt;/span&gt;

       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Write-Information&lt;/span&gt; -Message (&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Downloading Azure CLI version {0} to {1}&amp;#34;&lt;/span&gt; -f $cliVersion, $downloadPath)
       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Invoke-WebRequest&lt;/span&gt; -UseBasicParsing -Uri $location -OutFile $downloadPath -ErrorAction SilentlyContinue -Verbose&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt;$false
       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Test-Path&lt;/span&gt; -Path $downloadPath)
       {
            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Write-Information&lt;/span&gt; -Message (&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Installing Azure CLI version {0} from {1}&amp;#34;&lt;/span&gt; -f $cliVersion, $downloadPath)
            &lt;span style=&#34;color:#007f7f&#34;&gt;#Start-Process -FilePath msiexec.exe -ArgumentList &amp;#34;/i $downloadPath /qb /passive&amp;#34; -Wait -ErrorAction Stop -Verbose:$false&lt;/span&gt;

            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Write-Information&lt;/span&gt; -Message (&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Remove Azure CLI installer file from {0}&amp;#34;&lt;/span&gt; -f $downloadPath)
            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Remove-Item&lt;/span&gt; -Path $downloadPath -Force
       }
    }
    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt;
    {
        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Cloud not retrieve the redirected URL&amp;#39;&lt;/span&gt;
    }
}
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt;
{
    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;This must run as administrator at an elevated PowerShell prompt.&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This script downloads the most recent public build and installs it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell and Secret Management - Updates</title>
      <link>https://ravichaganti.com/blog/powershell-and-secrets-management-updates/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-and-secrets-management-updates/</guid>
      <description>&lt;p&gt;At the recent Ignite event, Microsoft announced the release candidate 2 update of PowerShell &lt;code&gt;SecretManagement&lt;/code&gt; module and the &lt;code&gt;SecretStore&lt;/code&gt; extension vault modules. Both modules have been bumped up to version 0.9.1.&lt;/p&gt;
&lt;p&gt;In the updated release, the secret management module has added support for secret metadata. The extension vault module must implement support for the metadata for this to work. To this extent, the SecretStore module has been updated to support metadata as well.&lt;/p&gt;
&lt;p&gt;This metadata can be useful in tagging additional non-sensitive details that describe the secret. For example, you can use secret metadata if you want to store the tenant or subscription associated with the secret.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-Secret&lt;/span&gt; -Name GITHUB_TOKEN -Secret &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;ThIsIsANAPIKeyFoRGitHUBAuthentICation&amp;#39;&lt;/span&gt; -Metadata @{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;github_handle&amp;#39;&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;rchaganti&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The additional metadata can be retrieved using the &lt;code&gt;Get-SecretInfo&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-SecretInfo&lt;/span&gt; -Name GITHUB_TOKEN | &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;fl &lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can update existing metadata or add new metadata by using the &lt;code&gt;Set-SecretInfo&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-SecretInfo&lt;/span&gt; -Name GITHUB_TOKEN -Metadata @{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;TestKey&amp;#39;&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;TestValue&amp;#39;&lt;/span&gt;;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;github_handle&amp;#39;&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;rchaganti&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another good update that I have seen is about more meaningful error messages. For example, when you run &lt;code&gt;Get-Secret&lt;/code&gt; command when no vaults are registered, you will see a more friendly error message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;PS &lt;/span&gt;C:\&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Secret&lt;/span&gt; -Name GITHUB_TOKEN
WARNING&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; 
        There are currently no extension vaults registered.
        At least one vault must be registered before SecretManagement can add or retrieve secrets.
        You can download SecretManagement extension vault modules from PowerShellGallery.
        https&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt;//aka.ms/SecretManagementVaults
        
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Secret&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; The secret GITHUB_TOKEN was not found.
At line&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt;1 char&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt;1
+ &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Secret&lt;/span&gt; -Name GITHUB_TOKEN
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          &lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; ObjectNotFound&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; (Microsoft.Power...etSecretCommand&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt;GetSecretCommand) [&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Secret&lt;/span&gt;], ItemNotFound 
   Exception
    + FullyQualifiedErrorId &lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; GetSecretNotFound,Microsoft.PowerShell.SecretManagement.GetSecretCommand
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Microsoft announced that the RC2 release of the SecretManagement and SecretStore modules are go live versions and will most probably be promoted to GA release if there are no high-risk bugs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell and Secret Management - Using Secret Store Extension Vault</title>
      <link>https://ravichaganti.com/blog/powershell-and-secret-management-using-secret-store-extension-vault/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-and-secret-management-using-secret-store-extension-vault/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: This article has been updated to show the latest version of the secret store module.&lt;/p&gt;
&lt;p&gt;In the last part, you have seen an introduction to secret management in PowerShell and towards the end you learned that they are vault extensions that provide the real functionality for storing and managing secrets. In this part of the series, you will learn more about the &lt;a href=&#34;https://www.powershellgallery.com/packages/Microsoft.PowerShell.SecretStore&#34;&gt;SecretStore&lt;/a&gt; vault extension for the &lt;a href=&#34;https://www.powershellgallery.com/packages/Microsoft.PowerShell.SecretManagement&#34;&gt;SecretManagement&lt;/a&gt; PowerShell module.&lt;/p&gt;
&lt;p&gt;The SecretStore extension vault is a wrapper around the .NET Crypto API. This vault stores the secrets to the local machine based on the current user account context. You can install this from the PowerShell gallery.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Install-Module&lt;/span&gt; -Name Microsoft.PowerShell.SecretStore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This extension vault comes with a few commands that are used to configure the vault behavior.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;PS &lt;/span&gt;C:\&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Command&lt;/span&gt; -Module Microsoft.PowerShell.SecretStore

CommandType     Name                                               Version    Source                                          
-----------     ----                                               -------    ------                                          
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-SecretStoreConfiguration&lt;/span&gt;                       0.9.1      Microsoft.PowerShell.SecretStore                
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Reset-SecretStore&lt;/span&gt;                                  0.9.1      Microsoft.PowerShell.SecretStore                
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-SecretStoreConfiguration&lt;/span&gt;                       0.9.1      Microsoft.PowerShell.SecretStore                
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-SecretStorePassword&lt;/span&gt;                            0.9.1      Microsoft.PowerShell.SecretStore                
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Unlock-SecretStore&lt;/span&gt;                                 0.9.1      Microsoft.PowerShell.SecretStore  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before you can start using this extension vault, by default, you must first set a secret store password.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-SecretStorePassword&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command prompts for entering old and new passwords. Simply enter a desired password and hit enter. Once the password is set, you can run the &lt;code&gt;Get-SecretStoreConfiguration&lt;/code&gt; command to see the default vault extension configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;PS &lt;/span&gt;C:\&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-SecretStoreConfiguration&lt;/span&gt;

      Scope Authentication PasswordTimeout Interaction
      ----- -------------- --------------- -----------
CurrentUser       Password             900      Prompt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, the default scope of the secret store is set &lt;code&gt;CurrentUser&lt;/code&gt; and it can be otherwise set to &lt;code&gt;AllUsers&lt;/code&gt;. The &lt;code&gt;Authentication&lt;/code&gt; property by default requires to supply a password to manage the secrets. This can be disabled by setting the &lt;code&gt;Authentication&lt;/code&gt; property to &lt;code&gt;None&lt;/code&gt;. Within a session, the supplied password is valid for 900 seconds, by default. This can be changed by setting the &lt;code&gt;PasswordTimeout&lt;/code&gt; property. The &lt;code&gt;Interaction&lt;/code&gt; property, by default, is set to &lt;code&gt;Prompt&lt;/code&gt; and can be set to &lt;code&gt;None&lt;/code&gt; to ensure you are not prompted to enter password for any configuration retrieval or changes. When disabling password prompt, &lt;a href=&#34;https://github.com/PowerShell/SecretStore/issues/49&#34;&gt;you must ensure that you also set &lt;code&gt;Authentication&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;&lt;/a&gt; to avoid lockdown of secret store. In case you want to set the &lt;code&gt;Interaction&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt; but still leave the &lt;code&gt;Authentication&lt;/code&gt; to &lt;code&gt;Password&lt;/code&gt;, you can use the &lt;code&gt;Unlock-SecretStore&lt;/code&gt; command to unlock the vault.&lt;/p&gt;
&lt;p&gt;Once this initial configuration is complete as per your needs, you can register this extension vault with the secret management module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Register-SecretVault&lt;/span&gt; -ModuleName Microsoft.PowerShell.SecretStore -Name SecretStore -DefaultVault -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command registers Microsoft.PowerShell.SecretStore module as the extension vault and sets as the default vault. The &lt;code&gt;Get-SecretVault&lt;/code&gt; command retrieves all registered extension vaults.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;PS &lt;/span&gt;C:\&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-SecretVault&lt;/span&gt; 

Name        ModuleName                       IsDefaultVault
----        ----------                       --------------
SecretStore Microsoft.PowerShell.SecretStore True 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can start storing secrets using the SecretManagement module commands now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-Secret&lt;/span&gt; -Name GITHUB_TOKEN -Secret &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;ThIsIsANAPIKeyFoRGitHUBAuthentICation&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can get a secret value by using the &lt;code&gt;Get-Secret&lt;/code&gt; command. You must use &lt;code&gt;-AsPlainText&lt;/code&gt; switch to return the stored secret as readable string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Secret&lt;/span&gt; -Name GITHUB_TOKEN -AsPlainText
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Get-SecretInfo&lt;/code&gt; returns the metadata information related to the secret.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;PS &lt;/span&gt;C:\&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-SecretInfo&lt;/span&gt; -Name GITHUB_TOKEN

Name         &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Type &lt;/span&gt;  VaultName  
----         ----   ---------  
GITHUB_TOKEN String SecretStore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can remove a stored secret using the &lt;code&gt;Remove-Secret&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Remove-Secret&lt;/span&gt; -Name GITHUB_TOKEN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a quick overview of using the SecretStore extension vault with SecretManagement module. You will learn more about other extension vaults and secret management module itself in later parts of this series. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell and Secret Management - Introduction</title>
      <link>https://ravichaganti.com/blog/powershell-and-secret-management-introduction/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-and-secret-management-introduction/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: This article has been updated to show the latest version of the secret management module.&lt;/p&gt;
&lt;p&gt;Within the infrastructure automation, you always stumble upon a need to store and retrieve credentials. For example, imagine deploying a database instance and you want the database administrator username and password to be same across based on some IT standard. For this, you either have to hardcode the values in a script or prompt the user running the automation for these values. Storing secrets such as passwords, API keys, etc is a big NO. You should never do that. And, prompting a user will hamper the automation flow and will require manual intervention. This is where secret vaults play a role. You can store all secrets in a vault (local or remote) and then on-demand you can retrieve these values from the vault and consume in your automation. This method is most preferred when delegating automation tasks, running scripts in CI / CD pipelines, and in general anything that requires unattended automation.&lt;/p&gt;
&lt;p&gt;Within many of my PowerShell scripts, I have used Windows Credential Manager to store and retrieve secrets. PowerShell gallery has a bunch of modules that enable secret management in PowerShell. There are other 3rd party vaults such as &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;Hashicorp Vault&lt;/a&gt;. At Ignite 2019, PowerShell team &lt;a href=&#34;https://myignite.techcommunity.microsoft.com/sessions/83981?source=sessions&#34;&gt;introduced secrets management in PowerShell&lt;/a&gt;. This is available on &lt;a href=&#34;https://github.com/powershell/secretmanagement&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.powershellgallery.com/packages/Microsoft.PowerShell.SecretManagement&#34;&gt;PowerShell Gallery&lt;/a&gt; as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Install-Module&lt;/span&gt; -Name Microsoft.PowerShell.SecretManagement
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This module provides the plumbing needed to register secret vaults and then store/retrieve secrets from the registered vaults.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;PS &lt;/span&gt;C:\&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Command&lt;/span&gt; -Module Microsoft.PowerShell.SecretManagement

CommandType     Name                                               Version    Source                                          
-----------     ----                                               -------    ------                                          
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Secret&lt;/span&gt;                                         0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-SecretInfo&lt;/span&gt;                                     0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-SecretVault&lt;/span&gt;                                    0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Register-SecretVault&lt;/span&gt;                               0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Remove-Secret&lt;/span&gt;                                      0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-Secret&lt;/span&gt;                                         0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-SecretInfo&lt;/span&gt;                                     0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set-SecretVaultDefault&lt;/span&gt;                             0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Test-SecretVault&lt;/span&gt;                                   0.9.1      Microsoft.PowerShell.SecretManagement           
Cmdlet          &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Unregister-SecretVault&lt;/span&gt;                             0.9.1      Microsoft.PowerShell.SecretManagement  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before you can start managing secrets, you need to register a secret vault. By default, there is no registered vault.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The earlier alpha version of this module had a built-in vault  that was a wrapper around the Windows Credential Manager. It has now been &lt;a href=&#34;https://www.powershellgallery.com/packages/Microsoft.PowerShell.SecretStore&#34;&gt;moved out as a vault extension&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can verify that using the &lt;code&gt;Get-SecretVault&lt;/code&gt; command. The secret management module vault extensions can be developed to add support for many secret vaults that already exist out there. There are bunch of them already on the &lt;a href=&#34;https://devblogs.microsoft.com/powershell/secrets-management-module-vault-extensions/#:~:text=The%20purpose%20of%20the%20Secrets%20Management%20module%20is,that%20allows%20registration%20of%20other%20secrets%20storage/retrieval%20solutions.&#34;&gt;PowerShell gallery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can download the vault extension from PowerShell gallery the same way you download any module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Install-Module&lt;/span&gt; -Name Microsoft.PowerShell.SecretStore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each secret store or the vault extension may have it&amp;rsquo;s own configuration. In the next part of this series of articles on secret management in PowerShell, you will learn how to use the &lt;a href=&#34;https://www.powershellgallery.com/packages/Microsoft.PowerShell.SecretStore&#34;&gt;SecretStore&lt;/a&gt; vault extension.&lt;/p&gt;
&lt;p&gt;Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Policy Guest Configuration - Introduction</title>
      <link>https://ravichaganti.com/blog/azure-policy-guest-configuration-introduction/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-policy-guest-configuration-introduction/</guid>
      <description>&lt;p&gt;As your Azure adoption increases and as you on-board various departments and groups within your organization to start using Azure services, it is important that you put in place some level of governance. As cloud architect, you would want control over who can create what type resources, where can they create those resources and how many. You would also want to standardize on the deployments so that the configuration of resources is in compliance with your organization standards. Among many other aspects like this you would want the ability to track your cloud cost more granularly for every service deployed in the cloud and for every business unit or group within your organization. To address this and to implement efficient governance Azure offers features and services such as &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/policy/overview&#34;&gt;Policies&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/management-groups/&#34;&gt;Management Groups&lt;/a&gt;, &lt;a href=&#34;https://azure.microsoft.com/en-us/features/resource-graph/&#34;&gt;Resource Graph&lt;/a&gt;, and &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/blueprints/overview&#34;&gt;Blueprints&lt;/a&gt;. Here is an excellent depiction of Azure governance architecture from the &lt;a href=&#34;https://www.microsoft.com/en-us/us-partner-blog/2019/07/24/azure-governance/&#34;&gt;partner blog&lt;/a&gt;.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d1-azuregovernance.png&#34; width=&#34;800&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;One of the components within Azure governance framework is &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/policy/overview&#34;&gt;Azure Policy.&lt;/a&gt; Azure Policy helps enforce your organizational IT and business standards for resource consistency, compliance to regulatory requirements, management, security, and cost. Azure offers a set of built-in policy definitions that are readily available for some of the common use cases in your Azure environment. You can, of course, create your own custom policy definitions as well. These policy definitions can be assigned to different scopes within your subscription.&lt;/p&gt;
&lt;p&gt;An assigned policy is evaluated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a resource goes through it&amp;rsquo;s life cycle events such as creation, modification, or deletion&lt;/li&gt;
&lt;li&gt;When the standard compliance evaluation cycle gets triggered&lt;/li&gt;
&lt;li&gt;When a assigned policy gets newly assigned or gets updated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the, trivial but easy to understand, examples of using Azure Policy is to control the size of virtual machines that a user can create. To achieve this, you define a policy and assign it at any applicable scope from a management group to even an individual resource. When it comes to Infrastructure as a Service (IaaS) virtual machines, using Azure policy you can define constraints on what type of VMs, location of VMs, enforcing tags, and so on. You can consider this as the outside configuration of a virtual machine. If you have to audit configuration settings within the OS and / or applications running inside the VM, you can use the Azure Policy Guest Configuration.&lt;/p&gt;
&lt;h3 id=&#34;azure-policy-guest-configuration&#34;&gt;Azure Policy Guest Configuration&lt;/h3&gt;
&lt;p&gt;Azure Policy, through the use of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/policy/concepts/guest-configuration&#34;&gt;Guest Configuration&lt;/a&gt;, can audit settings inside a VM. This is done using the Guest Configuration Extension. The Azure Policy Guest Configuration can be used with both Azure VMs as well as Azure Arc Connected machines. For Azure VMs, you must enable the virtual machine extension and have a system managed identity assigned to the VM. The extension inside the VM uses the system managed identity to read and write to the Guest Configuration service.&lt;/p&gt;
&lt;p&gt;For Azure Arc connected machines, you must have the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-arc/servers/agent-overview&#34;&gt;Azure Connected Machine agent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Inside the Azure VM or Azure Arc Connected machine, guest configuration uses the tools specific to the operating system to audit configuration settings. For Windows OS, PowerShell Desired State Configuration (DSC) v2 gets used and for Linux systems, Chef Inspec is used. Guest configuration policies get evaluated every 15 minutes.&lt;/p&gt;
&lt;p&gt;Here is a nice overview session by Michael Greene who is the Program Manager for the Azure Policy Guest Configuration feature.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/pySg_YuxnR0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Similar to Azure Policy, Guest Configuration service also has a bunch of built-in definitions and initiatives. If you filter the category to Guest Configuration, you will see a list of policies that can be assigned to Azure VMs and/or Azure Arc Connected machines.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/gcpol.png&#34; width=&#34;800&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Policy definitions when grouped together are called initiatives and Guest Configuration has a few initiatives as well.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/gcpolinit.png&#34; width=&#34;800&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You will see many of them marked as deprecated. You can either assign to individual policies or initiatives to your machines (Azure or Arc Connected).&lt;/p&gt;
&lt;p&gt;With Guest Configuration, you can author your own policy definitions and initiatives. At present, these are written as DSC resource modules. You will learn more about this in a later part of this series.&lt;/p&gt;
&lt;p&gt;Stay tuned for the next part where you will learn how to assign policies and initiatives to Azure virtual machines.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Methods in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-methods-in-go-language/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-methods-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the last two parts of this series, you looked at functions and anonymous functions. Both provide a way to create reusable blocks of code and each having its own purpose and use within Go programming. As learned earlier, Go is not a pure object oriented programming language. But, it does support some aspects of OOP. Methods in Go are one way to implement that &amp;ldquo;object-orientedness&amp;rdquo;. This is based on the concept that a type in Go language can have methods associated with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Anonymous Functions in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-anonymous-functions-in-go-language/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-anonymous-functions-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the last part of the series, you learned about functions in Go language. Functions are first-class citizens in Golang. What this means is that you can not only use function declarations as just reusable code blocks but you can also assign functions to variables, use functions as parameters on other functions, and even return functions from other functions. This is achieved using function literals which are also known as anonymous functions.&lt;/p&gt;
&lt;h2 id=&#34;function-literals&#34;&gt;Function literals&lt;/h2&gt;
&lt;p&gt;Go language specification defines a function literal syntax as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;FunctionLit = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;func&amp;#34;&lt;/span&gt; Signature FunctionBody .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compare this to the function declaration syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;FunctionDecl = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;func&amp;#34;&lt;/span&gt; FunctionName Signature [ FunctionBody ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference is in the name of the function. The function literals or anonymous functions do not have a name or an identifier. The function declaration binds an identifier to a function whereas function literals do not have a name or an identifier (and, therefore called anonymous functions) and can be assigned to a variable, passed to another function, and returned from a function.&lt;/p&gt;
&lt;h3 id=&#34;inline-execution&#34;&gt;Inline execution&lt;/h3&gt;
&lt;p&gt;Here is an example of inline execution of a function literal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello from main!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello from an anonymous function!&amp;#34;&lt;/span&gt;)
	}()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the function literal inside &lt;code&gt;main&lt;/code&gt; is the function literal. It has no name or an identifier. And, the parenthesis at the end of the function literal make it execute inline. So, when you run this, the first &lt;code&gt;Println&lt;/code&gt; gets called and then the &lt;code&gt;Println&lt;/code&gt; inside the anonymous function gets called.&lt;/p&gt;
&lt;h2 id=&#34;passing-arguments&#34;&gt;Passing arguments&lt;/h2&gt;
&lt;p&gt;You can pass arguments to these anonymous functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello from main!&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(version &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;float64&lt;/span&gt;) {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello from an anonymous function in Go language %.2f!&amp;#34;&lt;/span&gt;, version)
	}(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.15&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example declares one parameter to the function called &lt;code&gt;version&lt;/code&gt; which is of &lt;code&gt;float64&lt;/code&gt; data type. And, at the end of function literal definition, you can pass the value associated with the version parameter within the parenthesis.&lt;/p&gt;
&lt;h2 id=&#34;assigning-functions-to-variables&#34;&gt;Assigning functions to variables&lt;/h2&gt;
&lt;p&gt;Function literals, as mentioned earlier, can be assigned to variables. It is like any other value that you assign to a variable. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello from main!&amp;#34;&lt;/span&gt;)
	f := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(version &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;float64&lt;/span&gt;) {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello from an anonymous function in Go language %.2f!&amp;#34;&lt;/span&gt;, version)
	}

	f(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.15&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example is similar the previous one. The only difference is the missing the parenthesis at the end of function literal. Instead, the function gets assigned to a variable and we use the variable &amp;ndash; &lt;code&gt;f(1.15)&lt;/code&gt; &amp;ndash; to invoke the function. The value 1.15 gets passed to the anonymous function. So, what do you think the type of variable &lt;code&gt;f&lt;/code&gt; will be? You can check that by adding &lt;code&gt;fmt.Printf(&amp;quot;\n%T&amp;quot;, f)&lt;/code&gt; to the above example. This will be the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;function.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
Hello from main!
Hello from an anonymous function in Go language &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.15&lt;/span&gt;!
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;float64&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the variable &lt;code&gt;f&lt;/code&gt; is of &lt;code&gt;func()&lt;/code&gt; type. This leads us into the custom and user-defined function types.&lt;/p&gt;
&lt;h2 id=&#34;custom-function-types&#34;&gt;Custom function types&lt;/h2&gt;
&lt;p&gt;Similar to defining a struct, you can define a custom function type. The general syntax for defining a custom function type is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;-name&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(&amp;lt;parameter1 parameter-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;, parameter2 parameter2-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;&amp;gt;) &amp;lt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, &lt;code&gt;type concat func(fName, lName string)&lt;/code&gt; string defines a new custom function type named &lt;code&gt;concat&lt;/code&gt;. This defines the signature of the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; concat &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(fName, lName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s concat = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(fName, lName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; {
		msg := fmt.Sprintf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%s %s rocks!&amp;#34;&lt;/span&gt;, fName, lName)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; msg
	}

	fmt.Println(s(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Language&amp;#34;&lt;/span&gt;))
	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%T&amp;#34;&lt;/span&gt;, s)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the &lt;code&gt;main&lt;/code&gt; function, you can use the new function type to create a variable and assign the function to it. The above example declares and initializes variable &lt;code&gt;s&lt;/code&gt; for this purpose. You can then use variable &lt;code&gt;s&lt;/code&gt; as you have already seen earlier. When you run this example, you will see that the type of the variable &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;main.concat&lt;/code&gt; which is the custom function type.&lt;/p&gt;
&lt;h2 id=&#34;passing-functions-as-arguments&#34;&gt;Passing functions as arguments&lt;/h2&gt;
&lt;p&gt;Function literals can be passed as arguments to other functions. You have learned how to create a custom function type in the previous section. The following example demonstrates how to pass that custom function type as an argument to another function. Take a look.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; concat &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(fName, lName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; wrapper(s concat) {
	fmt.Println(s(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Language&amp;#34;&lt;/span&gt;))
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(f, l &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; {
		msg := fmt.Sprintf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%s %s rocks!&amp;#34;&lt;/span&gt;, f, l)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; msg
	}

	wrapper(a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function that is getting passed to the &lt;code&gt;wrapper&lt;/code&gt; function need not be of a custom function type. The custom type in this example takes &lt;code&gt;string&lt;/code&gt; arguments and returns &lt;code&gt;string&lt;/code&gt; type. You can define any function signature as an argument and match that signature in the function literal body that you define.&lt;/p&gt;
&lt;h2 id=&#34;functions-as-return-values&#34;&gt;Functions as return values&lt;/h2&gt;
&lt;p&gt;In Go language, you can not only pass functions as arguments but you can also return functions from other functions. Here is a variation of the above example to demonstrate this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; wrapper() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(fName, lName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; {
	a := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(f, l &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; {
		msg := fmt.Sprintf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%s %s rocks!&amp;#34;&lt;/span&gt;, f, l)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; msg
	}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	concat := wrapper()
	fmt.Println(concat(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Language&amp;#34;&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The wrapper function in this update example takes no arguments but returns a function. Within the &lt;code&gt;wrapper&lt;/code&gt; function body, you simply declare and initialize a function literal and return that. In the &lt;code&gt;main&lt;/code&gt; function, a variable called &lt;code&gt;concat&lt;/code&gt; gets initialized to the return value of the &lt;code&gt;wrapper&lt;/code&gt; function which is a function. Finally, the &lt;code&gt;concat&lt;/code&gt; function literal gets invoked with the string arguments.&lt;/p&gt;
&lt;p&gt;So, what happened to the custom type that you saw an earlier example? Can you still use that custom type as a return value? Yes, of course. Here is the updated example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; concat &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(fName, lName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; wrapper() concat {
	a := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;(f, l &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; {
		msg := fmt.Sprintf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%s %s rocks!&amp;#34;&lt;/span&gt;, f, l)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; msg
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; a
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	concat := wrapper()
	fmt.Println(concat(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Language&amp;#34;&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This brings this part to the final concept around function literals called closures.&lt;/p&gt;
&lt;h2 id=&#34;closures&#34;&gt;Closures&lt;/h2&gt;
&lt;p&gt;Wikipedia describes closures as below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In programming languages, a closure, also lexical closure or function closure, is a technique for implementing lexically scoped name binding in a language with first-class functions. Operationally, a closure is a record storing a function together with an environment. The environment is a mapping associating each free variable of the function (variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created. Unlike a plain function, a closure allows the function to access those captured variables through the closure&amp;rsquo;s copies of their values or references, even when the function is invoked outside their scope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is a lot to digest but pay attention to the last sentence. If we have to put that in simple words, a closure can access the variables defined outside its scope. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	lang := &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
		fmt.Println(lang, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;rocks!&amp;#34;&lt;/span&gt;)
	}()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the function literal inside the &lt;code&gt;main&lt;/code&gt; function can access the variable &lt;code&gt;lang&lt;/code&gt; defined outside its scope. A closure in Go has access to its surrounding state and it gets bound to that. The state of the closure becomes unique when it is created.&lt;/p&gt;
&lt;p&gt;Take a look at this example to understand this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; sub() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
		a = a - &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; a
	}
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {

	a1 := sub()
	a2 := sub()

	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nValue from a1 %d&amp;#34;&lt;/span&gt;, a1())
	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nValue from a2 %d&amp;#34;&lt;/span&gt;, a2())

	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nValue from a1 again %d&amp;#34;&lt;/span&gt;, a1())
	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nValue from a2 again %d&amp;#34;&lt;/span&gt;, a2())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the &lt;code&gt;sub()&lt;/code&gt; function, variable a gets initialized to 100. Also, &lt;code&gt;sub()&lt;/code&gt; function returns a function in which variable &lt;code&gt;a&lt;/code&gt; gets decremented by 10 and the resulting value gets returned. In this main function, variables &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; get initialized to the closure returned from &lt;code&gt;sub()&lt;/code&gt; function. Now, the interesting part comes when you invoke these closures. Here is the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;function.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

Value from a1 &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;90&lt;/span&gt;
Value from a2 &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;90&lt;/span&gt;
Value from a1 again &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;80&lt;/span&gt;
Value from a2 again &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;80&lt;/span&gt;
PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first calls to &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; return the same value. And, then when you call these closures again, they return the same value. What does this mean? This demonstrates that the closures do have a unique and isolated state when they get created. So, when you created a1 and a2, each of them have variable &lt;code&gt;a&lt;/code&gt; at 100 and when these closures get invoked, value of &lt;code&gt;a&lt;/code&gt; gets decremented by 10. Therefore, each set of invocation of these closures return the same value.&lt;/p&gt;
&lt;p&gt;As you proceed learning more advanced concepts in Go language, you will start seeing real use cases of closures. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Functions in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-functions-in-go-language/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-functions-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Alright. In this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt; so far, you learned about some basics of programming in Go language, about data types, conditions, and loops. In all the examples in the earlier parts of the series, there was just the &lt;code&gt;main&lt;/code&gt; function which is the entry point into a Go program. All execution of a Go program starts at the &lt;code&gt;main&lt;/code&gt; function. The idea of a function in any language is to basically group together a set of instructions and these instructions can now be used repeatedly as needed. As you learned, the &lt;code&gt;main&lt;/code&gt; function is a bit special though. Functions promote reusability and readability of your code. In this part of the series, you shall learn about functions in Go language.&lt;/p&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;A function in go, like any other language, is a block of code that takes input, performs a specific task, and generates some output. The general syntax for declaring functions in Go language is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;-name(param1-name param1-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;, param2-name param2-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; {  
 	&lt;span style=&#34;color:#007f7f&#34;&gt;//statements that perform a specific task
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;func&lt;/code&gt; keyword, you have already seen this with the main function, is used to declare the function type in Go followed by a name given to the function. Within the parenthesis, you specify any parameters that are needed for the function to perform its task followed by function return type(s). Both parameters and return type are optional. Like the main function, the function body needs to be enclosed in a pair of curly brackets with the open bracket on the same line as the &lt;code&gt;func&lt;/code&gt; declaration. The parameters in the function declaration are always in the format of parameter name followed by its type. You can have any number of parameters. Similarly, you can specify a comma separated list of return types as well. However, if you have more than one return type, you must enclose them in ().&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c := add(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
    sum := x + y
    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, this is a super trivial elementary type example but you get the point. In the &lt;code&gt;main&lt;/code&gt; function, there are two variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. These variables are declared and initialized with some integer values. Now, another variable named &lt;code&gt;c&lt;/code&gt; is declared and initialized to the return value from the function &lt;code&gt;add&lt;/code&gt;. This is yet another way to initialize variables in Go language. Observe how the function is called. We just use the name of the function with all parameter values enclosed in () &amp;ndash; like &lt;code&gt;add(a, b)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; function is declared with two input parameters &amp;ndash; &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; &amp;ndash; of integer type. Since the variable &lt;code&gt;c&lt;/code&gt; in function &lt;code&gt;main&lt;/code&gt; gets its value from the &lt;code&gt;add&lt;/code&gt; function, this function has an integer return type. Within the function body, the &lt;code&gt;sum&lt;/code&gt; variable is declared and initialized to store the value of &lt;code&gt;x+y&lt;/code&gt;. And, finally, the &lt;code&gt;return sum&lt;/code&gt; statement&lt;/p&gt;
&lt;p&gt;Since both parameters of this function are of integer types, we can simplify the function declaration as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;named-return-values&#34;&gt;Named return values&lt;/h2&gt;
&lt;p&gt;Go functions support named return values. First, see the below example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c := add(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) (sum &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) {
	sum = x + y
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example which is more or less same as the first one, all that is modified is the &lt;code&gt;add&lt;/code&gt; function. For the function return value, there is both name and type enclosed in parenthesis. And, within the function body, you don&amp;rsquo;t have to declare the variable &lt;code&gt;sum&lt;/code&gt; anymore since it is already declared as a part of the return value declaration. And, finally, observe the &lt;code&gt;return&lt;/code&gt; statement. You don&amp;rsquo;t have specify the name of the variable that you want to return. Instead, simply use the return statement. This tells Go to return values of variables declared as a part of the function declaration. So, what happens if you don&amp;rsquo;t have a variable named sum in the function body? Does Go through an error? Not really. It simply returns a zero value for the type mentioned in the function return value declaration.&lt;/p&gt;
&lt;p&gt;See this example and the program output to understand this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c := add(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) (sum &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) {
	sum1 := x + y
	fmt.Println(sum1)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this modified example, &lt;code&gt;sum&lt;/code&gt; is declared as the return value from function &lt;code&gt;add&lt;/code&gt;. However, there is no value assigned to sum within the function body. So, the &lt;code&gt;return&lt;/code&gt; statement returns the zero value of integer variable &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And, here is the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;function.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;   
&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;
Sum of a and b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;        
PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the program output, there is no error and the return value from the &lt;code&gt;add&lt;/code&gt; function is 0 which gets assigned to variable &lt;code&gt;c&lt;/code&gt; in the main function.&lt;/p&gt;
&lt;h2 id=&#34;multiple-return-values&#34;&gt;Multiple return values&lt;/h2&gt;
&lt;p&gt;In Go, a function can return multiple values. The way you can declare such as function is shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c, d := math(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Difference if a and b is&amp;#34;&lt;/span&gt;, d)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; math(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) (sum, diff &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) {
	sum = x + y
	diff = x - y
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the &lt;code&gt;add&lt;/code&gt; function is renamed to &lt;code&gt;math&lt;/code&gt; and one more return value called &lt;code&gt;diff&lt;/code&gt; has been added. With this, you have two integer return values on the function. Similar the function parameters, you can specify the type of return values just once if you have more than one value of the same type. Once again, this example uses named return values to so there is no need to specify the variable names along with the return statement.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;main&lt;/code&gt; function, variables &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; get their values from the &lt;code&gt;math&lt;/code&gt; function. Since sum is declared first in the return values of the function, variable &lt;code&gt;c&lt;/code&gt; gets the value of &lt;code&gt;sum&lt;/code&gt; and variable &lt;code&gt;d&lt;/code&gt; gets the value of &lt;code&gt;diff&lt;/code&gt; assigned respectively. If you are interested only in one value returning from the function, you can use the blank identifier (&lt;code&gt;_&lt;/code&gt;) you learned in an earlier part of this series.&lt;/p&gt;
&lt;h2 id=&#34;variadic-functions&#34;&gt;Variadic functions&lt;/h2&gt;
&lt;p&gt;In the example above, function &lt;code&gt;add&lt;/code&gt; takes exactly two values and adds them up and returns the result to &lt;code&gt;main&lt;/code&gt; function. Is there a way you can pass it an arbitrary number of values to get the sum of those values? This is where variadic functions play a role.&lt;/p&gt;
&lt;p&gt;First, take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	c := add(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(values ...&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	sum := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, i := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; values {
		sum = sum + i
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the add function&amp;rsquo;s parameter definition is different from what you have seen so far. In the parameter definition &amp;ndash; &lt;code&gt;values ...int&lt;/code&gt; &amp;ndash; &lt;code&gt;values&lt;/code&gt; is the name of the parameter and &lt;code&gt;int&lt;/code&gt; is the data type of that parameter. The three dots &lt;code&gt;...&lt;/code&gt; (Ellipsis) indicate that the parameter &lt;code&gt;values&lt;/code&gt; must be rolled into a slice type. Observe that there is no space between the Ellipsis and the data type of the parameter. Essentially, you prefix Ellipsis to the data type of the parameter.&lt;/p&gt;
&lt;p&gt;Within the add function, once the parameters values are received and rolled into a slice, the rest of the logic using the &lt;code&gt;for&lt;/code&gt; loop is similar to what you have learned in an earlier part of the series. When you use Ellipsis in a function parameter definition, the function becomes a variadic function. With this change, it does not matter how many values of the same data type you specify.&lt;/p&gt;
&lt;p&gt;Now, what if you have to pass some more values (as parameters) to this variadic function? This can be done but the Ellipsis can be used only with the final parameter of the function.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;}
	c := add(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, num...)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, values ...&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	sum := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, i := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; values {
		sum = sum + i + x
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example,the add function is updated to add one more integer parameter called &lt;code&gt;x&lt;/code&gt;. As you can see in the function parameter definition, the add function has two parameters &amp;ndash; &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt;. Within &lt;code&gt;main&lt;/code&gt; function, you now have a slice called &lt;code&gt;num&lt;/code&gt;. And, the way &lt;code&gt;add&lt;/code&gt; function invoked is also a bit different. Instead of passing the slice directly, Ellipsis is postfixed to the variable name &amp;ndash; &lt;code&gt;num...&lt;/code&gt; &amp;ndash; to unroll the slice values into a bunch of integers. These values get rolled into a slice again within the add function.&lt;/p&gt;
&lt;p&gt;There are several use cases for variadic function. First and foremost, when you do not know in advance how many values you may have to pass to a function. Secondly, using variadic functions, you can avoid creating a temporary slice to just pass a bunch of values to a function.&lt;/p&gt;
&lt;h2 id=&#34;passing-by-value-vs-passing-by-reference&#34;&gt;Passing by value vs passing by reference&lt;/h2&gt;
&lt;p&gt;Like many other programming languages, Go language too supports pointers which form the basis of passing values to a function by reference. First, take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; person &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	firstName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	lastName  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	age       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	p1 := person{
		firstName: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Ravikanth&amp;#34;&lt;/span&gt;,
		lastName:  &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Chaganti&amp;#34;&lt;/span&gt;,
		age:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#007f7f&#34;&gt;//print p1
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(p1)
	&lt;span style=&#34;color:#007f7f&#34;&gt;//increment age
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	incrementAge(p1)
	&lt;span style=&#34;color:#007f7f&#34;&gt;//print p1 again
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(p1)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; incrementAge(p1 person) {
	p1.age++
	fmt.Println(p1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the struct &lt;code&gt;person&lt;/code&gt; is a custom type which has three elements &amp;ndash; &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt;, and &lt;code&gt;age&lt;/code&gt;. Age is an integer can be incremented using the &lt;code&gt;increment()&lt;/code&gt; function. In the main function, &lt;code&gt;p1&lt;/code&gt; is declared and initialized.&lt;/p&gt;
&lt;p&gt;Here is how the output will be when you run this program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;function.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
{Ravikanth Chaganti &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;}
{Ravikanth Chaganti &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;}
{Ravikanth Chaganti &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;}
PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, the changes done to the age element within &lt;code&gt;p1&lt;/code&gt; are not visible within the &lt;code&gt;main&lt;/code&gt; function. The reason is, by default, when you pass a value to a function in Go, a copy of that variable gets created within the function scope. So, essentially, the &lt;code&gt;increment()&lt;/code&gt; function gets copy of the &lt;code&gt;p1&lt;/code&gt; struct and then it modifies the age element within that copy which is certainly not visible to the &lt;code&gt;main&lt;/code&gt; function. So, how do we pass values by reference so that the calling function sees the changes in values? We need to use pointers. Here is an updated example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; person &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	firstName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	lastName  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	age       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	p1 := &amp;amp;person{
		firstName: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Ravikanth&amp;#34;&lt;/span&gt;,
		lastName:  &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Chaganti&amp;#34;&lt;/span&gt;,
		age:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;,
	}

	fmt.Println(*p1)

	incrementAge(p1)

	fmt.Println(*p1)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; incrementAge(p1 *person) {
	p1.age++
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this updated example, &lt;code&gt;p1&lt;/code&gt; is a reference to the &lt;code&gt;person&lt;/code&gt; struct and by passing this pointer to the &lt;code&gt;incrementAge()&lt;/code&gt; function, the value of &lt;code&gt;age&lt;/code&gt; element gets incremented and becomes available to the main function. Observe how the &lt;code&gt;incrementAge()&lt;/code&gt; function parameter definition is updated to receive the pointer to &lt;code&gt;person&lt;/code&gt; struct. And, within the function, you simply reference the &lt;code&gt;age&lt;/code&gt; element and increment it.&lt;/p&gt;
&lt;p&gt;Wow! This has been a long post. This is a good overview of function basics in Go. In the next part, you will learn about anonymous functions in Go language. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Labels in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-labels-in-go-language/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-labels-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the two previous parts of the series, you learned how to use if, switch, and for loop in Go language. You also learned about using break and continue statements in Go language to alter the control flow. What you have seen in the examples with these statements was an unlabeled way to break or continue the iteration. Go language supports labels that let you transfer control to the place in the (same function) code where the label is defined. There are different ways to use labeled statements.&lt;/p&gt;
&lt;h2 id=&#34;goto&#34;&gt;Goto&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;, the &lt;code&gt;[goto](https://golang.org/ref/spec#Goto_statements)&lt;/code&gt; statement in Go language transfers the control to the place in the code where a specific label is defined within the same function. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

jumpTo:
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			num++
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;goto&lt;/span&gt; jumpTo
		}
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n num has value set to %d&amp;#34;&lt;/span&gt;, num)
		num++
	}

	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nFinal value of num is %d&amp;#34;&lt;/span&gt;, num)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example&amp;rsquo;s purpose is to print all odd numbers between 1 and 10. In this, the &lt;code&gt;goto&lt;/code&gt; statement is used to jump to the start of the loop again. Note the way the label &amp;ndash; &lt;code&gt;jumpTo&lt;/code&gt; &amp;ndash; is defined. The general syntax for defining a label in a Go program is &lt;code&gt;identifier:&lt;/code&gt; and then with the &lt;code&gt;goto&lt;/code&gt; statement, you just use the identifier &amp;ndash; &lt;code&gt;goto jumpTo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the output from this program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt; 
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; 
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt; 
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt; 
Final value of num is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The scope of a label is the function where it is defined. With the &lt;code&gt;goto&lt;/code&gt; statement, it does not matter where the label is defined within the function. For example, the following program works as well. Of course, without printing all the odd number values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			num++
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;goto&lt;/span&gt; jumpTo
		}
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n num has value set to %d&amp;#34;&lt;/span&gt;, num)
		num++
	}

jumpTo:
	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nFinal value of num is %d&amp;#34;&lt;/span&gt;, num)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This produces output as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
Final value of num is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function scope of a label also means that you cannot have the same label identifier declared multiple times even within different code blocks within the same function. Also, using &lt;code&gt;goto&lt;/code&gt; has a couple of caveats.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since &lt;code&gt;goto&lt;/code&gt; can be used to jump forward in the program flow, you cannot jump over a variable declaration.&lt;/li&gt;
&lt;li&gt;You cannot jump into a new code block.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;continue-and-break-with-labels&#34;&gt;Continue and Break with labels&lt;/h2&gt;
&lt;p&gt;If you look at the &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; statement syntax from the &lt;a href=&#34;https://golang.org/ref/spec#Continue_statements&#34;&gt;Go language specification&lt;/a&gt;, you will notice that these statements have an optional label.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;BreakStmt = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;break&amp;#34;&lt;/span&gt; [ Label ] .
ContinueStmt = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;continue&amp;#34;&lt;/span&gt; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Break&lt;/code&gt; statement works only within a &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;select&lt;/code&gt; statement while &lt;code&gt;continue&lt;/code&gt; works only in a loop. You have already seen examples of &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; within a &lt;code&gt;for&lt;/code&gt; loop. Similar to the &lt;code&gt;goto&lt;/code&gt; statement, you just need to suffix the label identifier to &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;Continue statement without a label, it skips the current iteration of the innermost loop. First, take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	s1 := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; i++ {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n\ni is %d&amp;#34;&lt;/span&gt;, i)

		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, j := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; s1 {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; j%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;continue&lt;/span&gt;
			}
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nj is %d&amp;#34;&lt;/span&gt;, j)

		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is straightforward. Within the inner loop, if you encounter an even number, you simply go to the next iteration using &lt;code&gt;continue&lt;/code&gt;. Here is the output from this program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, imagine based on the condition being checked in the inner loop, you may want to simply start again from the outer loop. You can achieve this with a simple change of adding the label to the continue statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	s1 := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}

jumpTo:
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; i++ {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n\ni is %d&amp;#34;&lt;/span&gt;, i)

		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, j := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; s1 {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; j%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;continue&lt;/span&gt; jumpTo
			}
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nj is %d&amp;#34;&lt;/span&gt;, j)

		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only change here is that a label &amp;ndash; called &lt;code&gt;jumpTo&lt;/code&gt; &amp;ndash; is added right before the outer &lt;code&gt;for&lt;/code&gt; loop. And, the same identifier is added to &lt;code&gt;continue&lt;/code&gt; statement inside the innermost loop. You can clearly see the difference in the control flow when you run this program. Here is what you will see.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;


i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
      
i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
      
i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the innermost loop reinitializes every time it is reached during execution, you will never go beyond the second element in the slice. The labeled &lt;code&gt;continue&lt;/code&gt; becomes very useful in case of nested loops where exiting the current scope based on a condition is needed.&lt;/p&gt;
&lt;p&gt;Similarly, labels can be used with &lt;code&gt;break&lt;/code&gt; statement as well. For this, just replace &lt;code&gt;continue&lt;/code&gt; with &lt;code&gt;break&lt;/code&gt; in the above example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	s1 := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}

jumpTo:
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; i++ {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n\ni is %d&amp;#34;&lt;/span&gt;, i)

		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, j := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; s1 {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; j%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;break&lt;/span&gt; jumpTo
			}
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nj is %d&amp;#34;&lt;/span&gt;, j)

		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following snippet shows the output both with and without the label to illustrate the difference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

&lt;span style=&#34;color:#007f7f&#34;&gt;//without break label
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

&lt;span style=&#34;color:#007f7f&#34;&gt;//with break label
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is it about using labeled statements in Go. When you write some &amp;ldquo;real&amp;rdquo; Go code other than these trivial examples, you will understand the advantages of these labeled statements in control flow. In this next part, you will learn about functions in Go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Loops in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-loops-in-go-language/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-loops-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With what you learned about basic data types and structs in this series so far, you are now ready to look at the looping construct in Go language. Go language is simple and to that extent Go has just one looping construct &amp;ndash; &lt;code&gt;For&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id=&#34;for-loop&#34;&gt;For loop&lt;/h2&gt;
&lt;p&gt;A few programming languages that you may have used in the past may have more than one looping construct &amp;ndash; &lt;code&gt;do - while&lt;/code&gt;, &lt;code&gt;do - until&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, and &lt;code&gt;foreach&lt;/code&gt; and so on. You use a specific construct based on what you need to achieve and type of conditions that need to be tested. However, Go language has just one looping construct &amp;ndash; the &lt;code&gt;for&lt;/code&gt; loop. Although there is just one looping construct, go supports multiple variations of this construct for different use cases.&lt;/p&gt;
&lt;p&gt;The general syntax of writing a for loop is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; &amp;lt;initialization&amp;gt;; &amp;lt;condition&amp;gt;; &amp;lt;post&amp;gt; {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this general syntax, the three different components are given a specific purpose. Initialization is used initialize any variables needed. This runs only once. The condition in the middle gets checked in every iteration and the loop runs until this condition evaluates to false. The post statement gets executed after the iteration executes successfully. After every successful iteration, the condition gets evaluated again and the loop body will continue to execute. All these components are totally optional. This leads into the different for loop variations.&lt;/p&gt;
&lt;h2 id=&#34;infinite-loop&#34;&gt;Infinite loop&lt;/h2&gt;
&lt;p&gt;As you learned earlier, all components within the for loop syntax are optional. So, if you remove all the components mentioned earlier, it results in an infinite loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;This is an infinite loop. You need to break the execution.&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above will continue to run until you interrupt it (CTRL+C on Windows). Infinite loops always need a way to break out of the loop. Here is a better example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		num := rand.Intn(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100000&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num % &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}

		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nGenerated random number &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, num)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, within the loop body, the &lt;code&gt;rand.Intn&lt;/code&gt; function is used to generate a non-negative random integer between 0 and n and n here is set to 100000. In the next statement, the &lt;code&gt;if&lt;/code&gt; condition is used to evaluate if the generated random number is an even number and if so, the loop breaks and exits. if the generate number is an odd number, the number gets printed and the loop continues execution.&lt;/p&gt;
&lt;h3 id=&#34;break&#34;&gt;Break&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;break&lt;/code&gt; statement in a loop is used to break out of the based on a condition like what you have seen in the previous example. Once the loop exits, the program control goes to the next line in the program, if any.&lt;/p&gt;
&lt;p&gt;The next variant of &lt;code&gt;for&lt;/code&gt; loop is the that uses a &lt;code&gt;boolean&lt;/code&gt; expression.&lt;/p&gt;
&lt;h2 id=&#34;for-loop-with-boolean-expression&#34;&gt;For loop with Boolean expression&lt;/h2&gt;
&lt;p&gt;In the general syntax of a for loop that you learned in the beginning of this part, there were three components &amp;ndash; initializer, condition, and post statement. In the absence of these three components, you get to define an infinite loop. You can add only the condition component and still create a for loop. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, num)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, num)
		}
		num++
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, for loop is using a &lt;code&gt;boolean&lt;/code&gt; expression to determine the number of iterations. In this case, the loop iterates until the variable &lt;code&gt;num&lt;/code&gt; is less than or equal to 10. Within the loop body, the post increment of variable &lt;code&gt;num&lt;/code&gt; ensures that its value gets incremented. Without this, you will end up with an infinite loop again.&lt;/p&gt;
&lt;p&gt;While what you have seen so far &amp;ndash; infinite loop and the loop with &lt;code&gt;boolean&lt;/code&gt; expression &amp;ndash; indirectly used all three components you saw in the general for loop syntax. So, why not put all of them together and see another example.&lt;/p&gt;
&lt;h2 id=&#34;for-loop-with-an-initializer-condition-and-post-statement&#34;&gt;For loop with an initializer, condition, and post statement&lt;/h2&gt;
&lt;p&gt;Here is an example of what you have seen in the general syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;; num++ {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, num)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, num)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the above example, using all components essentially eliminates the need for a separate initialization and post increment. But, the result is same as the earlier example with just &lt;code&gt;boolean&lt;/code&gt; expression as a part of &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id=&#34;for-loop-over-a-range&#34;&gt;For loop over a range&lt;/h2&gt;
&lt;p&gt;The final variant of for loop is iterate over a range of values. You may have an array or slice of integers or even a map of key value pairs. If you need to iterate over those values, you can use this variant of the &lt;code&gt;for&lt;/code&gt; loop in Go language.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; v%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; at index &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, v, i)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; at index &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, v, i)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the for loop used shorthand declaration to initialize two values &amp;ndash; &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;. But, you may ask. Isn&amp;rsquo;t that a simple array? Yes, it is. But, when you iterate over an array using range, it returns two values &amp;ndash; index of the element and the value at that index. Therefore, the above example uses two variables &amp;ndash; &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;. Since Go does not allow you to declare a variable and not use it, the print statements in the subsequent code refer to both these variables. But, what if you want to ignore the index value? Simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; v%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, v)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, v)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, instead using two variables, the for loop used an underscore character (_) to ignore the value of index coming from &lt;code&gt;range&lt;/code&gt;. This is called a blank identifier in Go.&lt;/p&gt;
&lt;p&gt;You can use the above method to iterate over a slice or even string as well.&lt;/p&gt;
&lt;p&gt;Here is an example that shows how to iterate over a map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; k, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n%d ==&amp;gt; %s&amp;#34;&lt;/span&gt;, k, v)
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case of a map value, instead of index, you get the key and value. In the above example, the variables &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; represent key and value coming from the map.&lt;/p&gt;
&lt;h2 id=&#34;continue&#34;&gt;Continue&lt;/h2&gt;
&lt;p&gt;In one of the previous examples, you looked at how to break out of a loop based on a condition. But, what if you just want to skip to the next iteration instead? This is where the &lt;code&gt;continue&lt;/code&gt; keyword is helpful. In the following example, the loop simply continues to the next element in the array on encountering an even number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; v%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;continue&lt;/span&gt;
		}

		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n%d is an odd number.&amp;#34;&lt;/span&gt;, v)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this code, whenever &lt;code&gt;v&lt;/code&gt; is an even number, you will see that the print statement gets skipped and the execution goes to the next element in the iteration and therefore printing only odd numbers between 1 and 10. So, whenever execution reaches to the &lt;code&gt;continue&lt;/code&gt; statement, the rest of the statements in the loop body get skipped and loop continues to the next iteration.&lt;/p&gt;
&lt;h2 id=&#34;nested-loops&#34;&gt;Nested loops&lt;/h2&gt;
&lt;p&gt;Similar to nested &lt;code&gt;if&lt;/code&gt; statements, you can nest &lt;code&gt;for&lt;/code&gt; loops too in Go language. Here is a very example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;//OuterLoop:
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; x := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; x++ {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; y := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; y &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; y++ {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;x=%v, y=%v\n&amp;#34;&lt;/span&gt;, x, y)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can nest any variants of &lt;code&gt;for&lt;/code&gt; loop seen in the above examples.&lt;/p&gt;
&lt;p&gt;This is it for this part of the series. In the next part, you will learn about labels in Go language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Condition statements in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-condition-statements-in-go-language/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-condition-statements-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With what you learned about basic data types and structs in this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series so far&lt;/a&gt;, you are now ready to look at the branching constructs in Go language. You may have used branching constructs such as &lt;code&gt;if..else if..else&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt; statements in other languages. Go language too offers these constructs.&lt;/p&gt;
&lt;h2 id=&#34;if--else-if--else&#34;&gt;If .. else if .. else&lt;/h2&gt;
&lt;p&gt;If construct in any programming language is a branching construct and moves the execution from one place in the code to another based on a condition. Go language is no exception.&lt;/p&gt;
&lt;p&gt;The general syntax of if statement in Go language is as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; condition {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// code	
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; condition {
    &lt;span style=&#34;color:#007f7f&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#007f7f&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the code in the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt; blocks to execute, the condition must evaluate to &lt;code&gt;true&lt;/code&gt;. If none of the conditions in the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt; do not evaluate to true, the code in &lt;code&gt;else&lt;/code&gt; gets executed. The &lt;code&gt;else if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks are optional. As with other types of command blocks in Go, all opening brackets must be on the same line as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a is greater than 10&amp;#34;&lt;/span&gt;)
	} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a is less than 10&amp;#34;&lt;/span&gt;)
	} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a is equal to 10&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, the &lt;code&gt;Println&lt;/code&gt; statement in the &lt;code&gt;else&lt;/code&gt; block will execute since the variable &lt;code&gt;a&lt;/code&gt; is initialized to a value 10. The first and second conditions will evaluate to &lt;code&gt;false&lt;/code&gt; and therefore the control goes into the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;
&lt;h2 id=&#34;assignment-in-a-comparison&#34;&gt;Assignment in a comparison&lt;/h2&gt;
&lt;p&gt;As a part of the if construct you can perform variable declaration and initialization as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;; a%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10 is an even number&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What you have seen in the above example, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;, are just two of the available comparison operators in Go language.&lt;/p&gt;
&lt;h2 id=&#34;comparison-operators&#34;&gt;Comparison Operators&lt;/h2&gt;
&lt;p&gt;There are different comparison operators you can in use in Go language. These operators compare two operands and return a boolean value &amp;ndash; &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. While using any comparison operator, both operands must be of the same type. For example, you can compare an integer to a float without explicitly casting one of the operand.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;td&gt;Equality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;td&gt;Equality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;Less than or equal to&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;Greater than or equal to&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The equality operators from the above table apply to types that are comparable. Booleans, integers, strings, arrays, structs, complex numbers, and floating point values are all comparable in addition to a few more types such as channels and interfaces that you will learn in the future. Slices and maps are not comparable types.&lt;/p&gt;
&lt;p&gt;The second type of operators, ordering operators, can be used only with types that can be ordered. Ordering operators cannot be used with structs, pointers, arrays, complex numbers, booleans, interfaces, and channels. So, that essentially leaves you with integers, strings, and floating point values.&lt;/p&gt;
&lt;p&gt;Go language allows chaining different comparisons using logical operators.&lt;/p&gt;
&lt;h2 id=&#34;logical-operators&#34;&gt;Logical Operators&lt;/h2&gt;
&lt;p&gt;With the logical operators the operands are always boolean values and return a boolean result.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp; (AND)&lt;/td&gt;
&lt;td&gt;if a &amp;amp;&amp;amp; b {}&lt;/td&gt;
&lt;td&gt;Evaluates to true only if both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|| (OR)&lt;/td&gt;
&lt;td&gt;if a || b {}&lt;/td&gt;
&lt;td&gt;Evaluates to true if any of operands &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;! (NOT)&lt;/td&gt;
&lt;td&gt;if !a&lt;/td&gt;
&lt;td&gt;Evaluates to true if a is false.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Take a look at this example that uses the logical operators along with &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value between 2 and 9&amp;#34;&lt;/span&gt;)
	} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value greater than or equal to 10 and less than or equal to 20&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you have multiple conditions to evaluate and take an action, the typical if construct may become too long. This is where many programming languages, including Go, provide the &lt;code&gt;switch&lt;/code&gt; construct.&lt;/p&gt;
&lt;h2 id=&#34;switch&#34;&gt;Switch&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; statement evaluates an expression and compares the result against a few possible matches defined within the &lt;code&gt;switch&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;The general syntax for writing a switch construct is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; &amp;lt;expression&amp;gt; {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;expr1&amp;gt;: 
        &lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;expr2&amp;gt;:
        &lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
        &lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the above syntax, the &lt;code&gt;switch&lt;/code&gt; statement is followed by an expression. This can be a simple variable or an expression that evaluates to a value that can be looked up in the possible matches in a &lt;code&gt;switch&lt;/code&gt; block. You can have any number of cases to match. These cases must all be unique. The &lt;code&gt;default&lt;/code&gt; block gets executed when no other cases match. Default is optional.&lt;/p&gt;
&lt;p&gt;Here is a full example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a is 20&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a is 30&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a is 10&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a did not match any cases above&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, the third case gets evaluated and &amp;ldquo;Value of a is 10&amp;rdquo; gets printed. The case statement can have multiple expressions as well. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	string1 := &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; string1 {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;u&amp;#34;&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Supplied string is an vowel&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Supplied string is not an vowel&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike other languages, Go does not allow an automatic fall through. If you need a fall through execution of all subsequent case blocks, you need to explicitly specify that using the &lt;code&gt;fallthrough&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;56&lt;/span&gt;; {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 50&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;fallthrough&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 100&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;fallthrough&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;150&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 150&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;fallthrough&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;200&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 200&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this program, variable &lt;code&gt;a&lt;/code&gt; is getting declared and initialized as a part of the &lt;code&gt;switch&lt;/code&gt; statement expression. In the &lt;code&gt;case&lt;/code&gt; statements, there are checks to see if the value if less than 50, 100, 150, and 200. If the value of variable &lt;code&gt;a&lt;/code&gt; is less than 50, all other cases will evaluate to &lt;code&gt;true&lt;/code&gt;. In such a scenario, all other case statements will have to be executed as well. This is where &lt;code&gt;fallthrough&lt;/code&gt; keyword plays a role.&lt;/p&gt;
&lt;p&gt;When you execute the above program, you will see the following output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
a is less than &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;
a is less than &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;150&lt;/span&gt;
a is less than &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you may ask about how the one of the examples that demonstrated the &lt;code&gt;if&lt;/code&gt; statement can be translated to use &lt;code&gt;switch&lt;/code&gt; construct. One way is what you already seen in the above example. An alternate way is to use expressionless &lt;code&gt;switch&lt;/code&gt; construct. Here is how it is done.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;21&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value between 2 and 9&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;gt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value greater than or equal to 10 and less than or equal to 20&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Variable a is greater than 20&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, there is no expression associated with the &lt;code&gt;switch&lt;/code&gt; statement. Instead, we have expressions matching at the &lt;code&gt;case&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;This brings this part to an end. In the next part of this series, you will learn about loops in Go language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Structs in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-structs-in-go-language/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-structs-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;So far in this series, you learned about different built-in data types such as integers, strings, floats, arrays, slices, maps, and pointers. All of these allow only one type of data. All elements in the array have to of the same time. All keys and values have to be of the same type. What if you have need to combine multiple types and create a custom type for your programs? This is where structs play a role in Go language.&lt;/p&gt;
&lt;h2 id=&#34;structs&#34;&gt;Structs&lt;/h2&gt;
&lt;p&gt;A struct in Go language is a user-defined data type which is essentially a collection of different types. For example, when describing information about a computer in a data structure, you will describes the properties of a computer such as Model, serial number, amount of physical memory, number of processor cores, size of the hard drive and so on. When you have to create a such a data structure, other programming languages that implement true object oriented programming (OOP) concepts have classes. However, Go is not a true OOP language. Instead, Go offers something closer with the help structs. What an OOP language supports &amp;ndash; such as inheritance and polymorphism &amp;ndash; out of the box can be done in Go by working around a few things but it still won&amp;rsquo;t be true object oriented.&lt;/p&gt;
&lt;p&gt;The syntax to declare struct user-defined data type is as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; &amp;lt;name-of-custom-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		field1-Name field1-Type
		field2-Name field2-Type
		...
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take a look at this example to understand how you can implement a custom data type using the above syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	cmp1 := computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example, declared a struct named &lt;code&gt;computer&lt;/code&gt; and added five fields to it. Then, we created a struct &lt;code&gt;cmp1&lt;/code&gt; of the type &lt;code&gt;computer&lt;/code&gt; by specifying each field name and an associated value separated by a colon (:). If you prefer, you can totally eliminate specifying the field names. For example, &lt;code&gt;cmp1 := {&amp;quot;SuperComputer10&amp;quot;, &amp;quot;SCOMP123&amp;quot;, 96, 8, 5}&lt;/code&gt; is totally valid as well but does not have convey how the values are associated to field names except the order in which they are specified.&lt;/p&gt;
&lt;p&gt;Finally, when you print a struct, it just prints the values you specified while creating the struct. You can retrieve a specific field value buy using the reference (.) operator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	cmp1 := computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(cmp1.model)
    fmt.Println(cmp1.memoryInGB)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While it is always possible to assign values to all fields while creating the struct, it is not mandatory. You can always create zero valued struct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; cmp1 computer
	fmt.Println(cmp1)

	cmp1.model = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;
	cmp1.serialNumber = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;
	cmp1.memoryInGB = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;
	cmp1.numProcCores = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;
	cmp1.diskCapacityInTB = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run the above program, the first &lt;code&gt;Println&lt;/code&gt; will print the zero values of fields in the struct based on their data types. The second &lt;code&gt;Println&lt;/code&gt; will print the assigned values.&lt;/p&gt;
&lt;h3 id=&#34;anonymous-structs&#34;&gt;Anonymous structs&lt;/h3&gt;
&lt;p&gt;In the examples so far, we declared a user-defined data type and have given it a name. We then used it to create a struct and initialized it with field values. However, it is possible to create structs without a name defined. Here is how you do that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	cmp1 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What you defined above as a struct, &lt;code&gt;cmp1&lt;/code&gt;, is called an anonymous struct variable. And, similar to this, you can defined anonymous struct fields also.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	cmp1 := computer{
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;:    &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the user-defined type &lt;code&gt;computer&lt;/code&gt; has only two fields &amp;ndash; &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt;. Unlike our earlier example that has named fields, you have multiple fields of the same data type when using anonymous fields in a struct.&lt;/p&gt;
&lt;h2 id=&#34;nested-structs&#34;&gt;Nested Structs&lt;/h2&gt;
&lt;p&gt;Go allows adding user-defined struct data types as a field within another struct. Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; os &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		version &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		build   &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		operatingSystem os
	}

	cmp1 := computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;,
		opeatingSystem: os{
			version: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Windows 10&amp;#34;&lt;/span&gt;,
			build:   &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2009&lt;/span&gt;,
		},
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the struct named &lt;code&gt;os&lt;/code&gt; declares a user-defined data type containing version and build as the fields. In the computer type declaration, you can simply added a new field called &lt;code&gt;operatingSystem&lt;/code&gt; and assigned it the type &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The nested fields from the struct can be accessed by following the complete field path. For example, &lt;code&gt;cmp1.operatingSystem.version&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;struct-pointers&#34;&gt;Struct Pointers&lt;/h2&gt;
&lt;p&gt;In a previous part of this series, you learned about pointers where you have only seen integer and string pointers. You can create struct pointers as well. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; os &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		version &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		build   &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		operatingSystem  os
	}

	cmp1 := &amp;amp;computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;,
		operatingSystem: os{
			version: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Windows 10&amp;#34;&lt;/span&gt;,
			build:   &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2009&lt;/span&gt;,
		},
	}

	fmt.Println(*cmp1)
	fmt.Println((*cmp1).operatingSystem.version)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The process of creating a pointer to a struct is similar to the other data types. The only difference is in how you dereference the value of a struct. You can see that in the &lt;code&gt;Println&lt;/code&gt; statements towards the end of the program.&lt;/p&gt;
&lt;p&gt;This is it for today. You will learn more about adding methods to structs and using structs in a more meaningful way than these trivial examples. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Maps in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-maps-in-go-language/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-maps-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you learned about pointers in Go language. In this part, you will learn about maps in Go language. Maps are another built-in data type in Go and maps store key-value pairs. This is like dictionaries in other programming languages.&lt;/p&gt;
&lt;h2 id=&#34;maps&#34;&gt;Maps&lt;/h2&gt;
&lt;p&gt;First, look at the below example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; m1 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	fmt.Println(m1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, variable m1 is of map data type and declares an empty map. When you run this, all you will see is &lt;code&gt;map[]&lt;/code&gt;. The zero value of map keys will be &lt;code&gt;nil&lt;/code&gt; and therefore this will be called a nil map. Maps store key-value pairs. So, if we generalize the syntax from the above example, it will be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var &amp;lt;variable-name&amp;gt; map[&amp;lt;key-data-type&amp;gt;]&amp;lt;value-data-type&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Keys in a map can be of any comparable type &amp;ndash; Boolean, integer, float, string, complex, and so on.&lt;/p&gt;
&lt;p&gt;In the key-value pairs that you want to store, all keys have to be of the same data type and all values should also be. In the example above, all keys will have to of &lt;code&gt;string&lt;/code&gt; type and all values should be of &lt;code&gt;int&lt;/code&gt; type. Also, keys should be unique within a map.&lt;/p&gt;
&lt;p&gt;Now, since you have just created a nil map, how do you add key-value pairs or elements to this map?&lt;/p&gt;
&lt;h3 id=&#34;adding-key-values&#34;&gt;Adding Key Values&lt;/h3&gt;
&lt;p&gt;When you create a map using the example above, it creates a nil map which is equivalent to empty map but no elements can be added to it. If you indeed attempt something like &lt;code&gt;m1[&amp;quot;Go&amp;quot;] = 1&lt;/code&gt; you will see a panic. The following example shows how to initialize an empty map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;)

	m2[&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the example here, you need to use the built-in &lt;code&gt;make&lt;/code&gt; function to declare and initialize the map. Once this is done, you can use the simple assignment syntax to add elements to the map.&lt;/p&gt;
&lt;p&gt;Updating elements in a map is again same as how you added the element using assignment. So, by using &lt;code&gt;m2[&amp;quot;Go Language&amp;quot;] = 10&lt;/code&gt;, you will update the value associated with that key.&lt;/p&gt;
&lt;p&gt;What if you have lot of items to add to a map? Do you need to perform assignment for each item? No, there is a better way to initialize the map like arrays and slices.&lt;/p&gt;
&lt;h3 id=&#34;initialize-during-declaration&#34;&gt;Initialize during declaration&lt;/h3&gt;
&lt;p&gt;You can add values to a map while declaring the map. Here is the generic syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;variable-name&amp;gt; := map[&amp;lt;key-type&amp;gt;]&amp;lt;value-type&amp;gt;{ &amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;, &amp;quot;key&amp;quot; : &amp;quot;value&amp;quot;}&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;length of map&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(m2))
	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple. Observe the trailing comma after the last item. This is needed since Go treats newline as end of statement. As shown in the example, you can use the built-in &lt;code&gt;len()&lt;/code&gt; function to retrieve the length or number of elements in a map.&lt;/p&gt;
&lt;p&gt;If you want to retrieve a single element value from the map, you can do that simply by referencing the correct key name.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;m2[&amp;quot;PowerShell&amp;quot;]&lt;/code&gt; will return it&amp;rsquo;s value 2. When you reference a non-existing key, you will simply get the zero value based on the type of the value specified during declaration. So, in this example, if you try &lt;code&gt;m2[&amp;quot;Rust&amp;quot;]&lt;/code&gt;, you will get 0 as the value. This is not always desired as the subsequent statements in the program might assume that 0 is a real value.&lt;/p&gt;
&lt;p&gt;So, how do you check if a key exists in the map or not?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}

	value, exists := m2[&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;]
	fmt.Println(value, exists)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;when you query for a non-existing key within a map, it will return both associated value and a Boolean value representing whether the key exists or not. Therefore, when you want to check if a key exists in a map or not, you should always use the method shown above. If you are only interested in verifying the key existence, you can ignore the value returned by using syntax as shown below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_, exists := m2[&amp;quot;Rust&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;delete-items&#34;&gt;Delete items&lt;/h3&gt;
&lt;p&gt;You can use the built-in &lt;code&gt;delete()&lt;/code&gt; function to delete items from a map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}

	fmt.Println(m2)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;delete&lt;/span&gt;(m2, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;)
	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;item-ordering&#34;&gt;Item ordering&lt;/h3&gt;
&lt;p&gt;You need to understand that maps in Go language are unordered. So, the order in which you add or initialize elements may not be the same when you retrieve or iterate over items in the map. Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;:        &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;:         &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, the order of items printed towards the end may not be same as the order in which they were initialized or added to the map.&lt;/p&gt;
&lt;p&gt;Similar to slices, maps are also reference types. Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}

	m3 := m2

	m3[&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Map m2&amp;#34;&lt;/span&gt;, m2)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Map m3&amp;#34;&lt;/span&gt;, m3)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, you will see the same number of items printed for both maps. This is because maps are reference types. When you assign one map to another, all changes done to one map will be made in the other map as well.&lt;/p&gt;
&lt;p&gt;Alright. This is all about basics of maps in Go language. You will learn more about using maps later in this series. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Pointers in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-pointers-in-go-language/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-pointers-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you learned about slices in Go language. Slices, unlike arrays, allow flexibility and certainly are the most used compared to arrays in Go language. Towards the end of the article on slices, you learned that slices are essentially references to an underlying array and any changes made to the slice will reflect in the underlying array as well. In this article, you shall learn about another reference type called pointers in Go language.&lt;/p&gt;
&lt;h2 id=&#34;pointers&#34;&gt;Pointers&lt;/h2&gt;
&lt;p&gt;Pointers in Go, like other languages, hold the memory address of a value. First, an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	b := &amp;amp;a

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of a is&amp;#34;&lt;/span&gt;, a)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of b is&amp;#34;&lt;/span&gt;, b)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at b is&amp;#34;&lt;/span&gt;, *b)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first variable declaration and initialization in the above example is already known. It is a simple integer. The line where variable b is declared is special. On the right-hand side, using &amp;amp; prefix tells Go that you want to store the memory location of the value represented by variable a. &amp;amp; is called the addressOf operator. So, variable b gets the memory address of variable a. In the last line, the asterisk (*) dereferences the value at variable b and therefore it is called the dereferencing operator.&lt;/p&gt;
&lt;p&gt;This should be clear if you run this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;pointers.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
value of a is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
value of b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0xc000012090&lt;/span&gt;
value at b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second output shows the value stored in variable b which is the memory address of variable a. And, the last line in the output shows the value at the memory address represented by variable b which is the value of variable a &amp;ndash; 10.&lt;/p&gt;
&lt;p&gt;Since variable b is the address of value represented variable a, you cannot assign another integer value to b directly. Instead, you dereference and then assign a value which changes the value of variable a.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	b := &amp;amp;a

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of a is&amp;#34;&lt;/span&gt;, a)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of b is&amp;#34;&lt;/span&gt;, b)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at b is&amp;#34;&lt;/span&gt;, *b)

	*b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of b is&amp;#34;&lt;/span&gt;, b)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of a is&amp;#34;&lt;/span&gt;, a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this above example, you will see output similar to what is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;pointers.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
value of a is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
value of b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0xc000012090&lt;/span&gt;
value at b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
value of b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0xc000012090&lt;/span&gt;
value of a is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you observe the output, the memory address stored in variable b itself does not change but the value assigned to variable gets updated to 20. This is good but are there other methods we can declare pointers in Go language?&lt;/p&gt;
&lt;p&gt;The regular variable declaration syntax works for variables as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var b *int = &amp;amp;a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above method is just an expanded form of what you learned in the first example. In this expanded form, there is explicit declaration of pointer type which is &lt;code&gt;*int&lt;/code&gt; in this case or you can call it an integer pointer. You can skip the initialization part and just declare an integer pointer. In such as case the zero value of a pointer will be set to &lt;code&gt;nil&lt;/code&gt; and you cannot dereference until you assign a value.&lt;/p&gt;
&lt;h3 id=&#34;using-new-function&#34;&gt;Using new function&lt;/h3&gt;
&lt;p&gt;When you use the built-in &lt;code&gt;new&lt;/code&gt; function to declare and initialize a variable, you get a pointer to its memory address. Take a look at the below example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;println&lt;/span&gt;(a)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;println&lt;/span&gt;(*a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this, the first &lt;code&gt;println&lt;/code&gt; will print the memory address and when you dereference it&amp;rsquo;s value, you will see a zero value.&lt;/p&gt;
&lt;p&gt;This is just an introduction to pointers in Go language and you will learn more about the use cases of pointers when we discuss functions and other advanced concepts. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Slices in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-slices-in-go-language/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-slices-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you learned about arrays in Go language. As you have learned, arrays have a fixed size and therefore you cannot resize (grow or shrink) arrays. This limitation can be overcome using &lt;a href=&#34;https://golang.org/ref/spec#Slice_types&#34;&gt;slices&lt;/a&gt; in Go language. In this part, you will learn about slices and how to use this data type in your Go programs.&lt;/p&gt;
&lt;h2 id=&#34;slices&#34;&gt;Slices&lt;/h2&gt;
&lt;p&gt;A slice in Go language is a slice of an underlying array! Yes, no pun intended. 😊&lt;/p&gt;
&lt;p&gt;Here is how the Go language specification describes slices. &lt;em&gt;A slice is a descriptor for a contiguous segment of an underlying array and provides access to a numbered sequence of elements from that array.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are different ways to declaring and initializing slices in Go language.&lt;/p&gt;
&lt;h3 id=&#34;slice-literal&#34;&gt;Slice literal&lt;/h3&gt;
&lt;p&gt;The syntax for declaring a variable as a slice is &lt;code&gt;var s1 = []int{1,2}&lt;/code&gt;. This declare a slice of integers and initializes with two elements. This is similar to how you declared array variables. The only difference is that there is no size specification. You can avoid any values in the declaration to create an empty slice of integers. For example,  &lt;code&gt;var s2 = []int{}&lt;/code&gt;. However, you cannot add elements (to an empty slice or at an index that is out of bound) using the indexer syntax. For example, specifying &lt;code&gt;s2[0]= 100&lt;/code&gt; will result in an error. The indexer method works only when updating an existing element at a specific index in the slice. To add elements to an empty slice, you need use the built-in &lt;code&gt;append()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Here is a quick example that shows both these methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s1 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;}
	s1[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	fmt.Println(s1)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s2 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{}
	s2 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;)
	s2 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;200&lt;/span&gt;)
	fmt.Println(s2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With slices, unlike arrays, you can append elements. This essentially changes the size of the slice. You can use the &lt;code&gt;len()&lt;/code&gt; built-in function to find the current number of elements and the &lt;code&gt;cap()&lt;/code&gt; function to find the maximum capacity of the slice. Review the below example to understand the difference between length and capacity in-depth.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s1 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Initial len and cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 3rd element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 4th element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 5th element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this, you will see the following output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;PS C:&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\G&lt;/span&gt;itHub&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\G&lt;/span&gt;etSetGo&amp;gt; go run .&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\s&lt;/span&gt;lices.go
Initial len and cap &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
len and cap after adding 3rd element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;
len and cap after adding 4th element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;
len and cap after adding 5th element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you observe the above output, the initial length and capacity of the slice is what you initialized it to &amp;ndash; with two elements. After adding a third element, the capacity changed to 4 and stayed as 4 even after the adding the 4th element. However, the moment the 5th element gets added, the capacity of the slice jumps to 8. So, what is happening here?&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;append&lt;/code&gt; function, whenever you add an element, if the length exceeds the current capacity of the slice, Go simply doubles the capacity. So, when we added the 3rd element, the capacity doubled to 4 and then we added the 5th element, it doubled to 8.&lt;/p&gt;
&lt;h3 id=&#34;using-make&#34;&gt;Using Make&lt;/h3&gt;
&lt;p&gt;Slices can also be declared and initialized using the &lt;code&gt;make&lt;/code&gt; built-in function. The syntax for using make to create a slice is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; name = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;(slice-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;, slice-length, slice-capacity)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is an example that uses &lt;code&gt;make&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s3 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;)
	s3[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	s3[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	s3 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s3, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;)

	fmt.Println(s3, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s3), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s3))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the last integer value that is used to specify the capacity of the slice is optional. By default, the capacity will be same as length. The code in the above example creates a slice with length of 2 and capacity of 4. And, observe how the 3rd element is added. You have to use the append function since adding the 3rd element exceeds the length specified when using &lt;code&gt;make&lt;/code&gt; function. This behavior is different from what you seen above with append method on a slice created using slice literal syntax.&lt;/p&gt;
&lt;h3 id=&#34;slicing-arrays&#34;&gt;Slicing arrays&lt;/h3&gt;
&lt;p&gt;Yet another method of creating a slice is to slice an existing array! Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; languages = [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Elements in the string array are&amp;#34;&lt;/span&gt;, languages)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; langSlice = languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the derived slice are&amp;#34;&lt;/span&gt;, langSlice)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nSlicing without a start index is similar to using start index 0&amp;#34;&lt;/span&gt;, languages[:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;])
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nSlicing without an end index gets all elements from start_index till end of the array&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;:])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the &lt;code&gt;languages&lt;/code&gt; array has six elements. A slice of these elements &amp;ndash; from index 0 to 2 &amp;ndash; is assigned to the variable &lt;code&gt;langSlice&lt;/code&gt;. This variable is of slice data type. In the variable assignment, you have specified the the slice as start_index:end_index in square brackets. In this specification,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The end_index in excluded. So, when the indexes specified are 0 and 2, the resulting slice will have elements from index 0 and 1 but not 2.&lt;/li&gt;
&lt;li&gt;Both start_index and end_index are optional. So, for example, if you specify [:3], the first three elements from the array. If you specify [4:], elements from index 4 till the end of the array get assigned to the slice. Finally, skipping both &amp;ndash; [:] &amp;ndash; will simply return all elements from the array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You learned in an earlier part of this series that slices are reference types. This means that when you update an element in the slice the element in the underlying array gets updated as well.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; languages = [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Elements in the string array are&amp;#34;&lt;/span&gt;, languages)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; langSlice = languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the derived slice are&amp;#34;&lt;/span&gt;, langSlice)

	langSlice[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the updated slice are&amp;#34;&lt;/span&gt;, langSlice)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the underlying array are&amp;#34;&lt;/span&gt;, languages)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this above example, you will see output similar to what is shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;slices.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
Elements in the &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; array are [Go Python Rust Java C&lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; PowerShell]

Elements in the derived slice are [Go Python]

Elements in the updated slice are [Go C++]

Elements in the underlying array are [Go C++ Rust Java C&lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; PowerShell]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, once you update an element in the derived slice, the underlying array also gets updated. This brings us to the discussion around pointers in Go language which is the subject of next part in this series.&lt;/p&gt;
&lt;p&gt;Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Community Conference - 2020</title>
      <link>https://ravichaganti.com/blog/azure-community-conference-2020/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-community-conference-2020/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/azconf.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://www.azconf.dev/&#34;&gt;Azure Community Conference&lt;/a&gt; is a 3 day multi-track virtual event scheduled to go live on November 24th 2020. This event is being organized by the &lt;a href=&#34;https://www.meetup.com/Microsoft-Azure-Bangalore/&#34;&gt;Bangalore Azure User Group&lt;/a&gt;. The target audience of this virtual event are cloud and web developers working with open source and cloud native technologies on the Microsoft stack. This event will be a free two conference days that includes a free workshop as well. &lt;a href=&#34;https://www.azconf.dev/#tickets&#34;&gt;Registration for this event&lt;/a&gt; is open.&lt;/p&gt;
&lt;p&gt;This event already has got a super-star line up of speakers including Janakiram MSV, James Montemagno, Dhananjay Kumar, Lars Klint, and Neependra Khare to name just a few. I will be speaking as well on one of my most favorite topics in the Infrastructure as Code (IaC) space. If you want to speak, the &lt;a href=&#34;https://www.azconf.dev/#cfp&#34;&gt;call of papers&lt;/a&gt; is still open.&lt;/p&gt;
&lt;p&gt;Whether you are an expert or still a learner (a life long learner like me), go ahead and register for this event. I am sure there is loads of learning coming our way!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Arrays in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-arrays-in-go-language/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-arrays-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the earlier part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you looked at types in Go language and learned about the basic data types &amp;ndash; int, float, and strings. You also learned about other categories of data types such as aggregate types, reference types, and interface types. In the next subsequent parts, you will dive into each of these different types.&lt;/p&gt;
&lt;h2 id=&#34;aggregate-types&#34;&gt;Aggregate Types&lt;/h2&gt;
&lt;p&gt;Aggregate types in Go language include &lt;a href=&#34;https://golang.org/ref/spec#Array_types&#34;&gt;arrays&lt;/a&gt; and &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34;&gt;structs&lt;/a&gt;. These data types are formed by combining basic data types. Learning structs will require knowledge of a few more things about Go language and Go types. You will learn about that soon. In today&amp;rsquo;s part, you will learn about arrays.&lt;/p&gt;
&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;
&lt;p&gt;An array in Go language is a &lt;strong&gt;fixed-length&lt;/strong&gt; sequence of &lt;strong&gt;homogeneous&lt;/strong&gt; elements in the memory. There is emphasis on two words in the previous sentence &amp;ndash; fixed-length and homogeneous. The length of the array is decided at the time of declaration. You cannot change it runtime and therefore fixed-length. And, an array can only be used store elements of the same data type and that is the homogeneous part in the definition. The number of elements in the array is called the length of the array and it will be an integer that is either zero or more than zero.&lt;/p&gt;
&lt;p&gt;The method to define/declare an array in Go is similar to that of a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt;variable_name&amp;gt; [SIZE] &amp;lt;variable_type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the above syntax, size is a part of the array declaration. So, for example, &lt;code&gt;var names [4] string&lt;/code&gt; will declare an array of fixed-length 4 to store values of string data type. The size must be an integer greater than zero. You can access the array elements using the index operator and the index always starts at zero and goes up to index of last element - 1. The built-in &lt;code&gt;len&lt;/code&gt; function can be used to find the length of the array. Therefore, the index of the last element can be derived using &lt;code&gt;len(arrayName) - 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; names [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// elements get initialized to a zero value based on type
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// set a value at an index
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(names)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of names array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, names[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As shown in the above example, using the index operator gives you the value at that index and you can assign / update a value at a given array index. Using this method of assigning values can be tedious and error-prone if you have a larger array. You can initialize arrays in a way similar to how variables of basic types are initialized during declaration or using shorthand form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; variable_name = [SIZE]&amp;lt;variable_type&amp;gt;{item1, item2, item3, ...itemN}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;var names = [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt; will declare and initialize the names array. The number of values you specify within the curly brackets should be equal to the size of the array specified within square brackets. You can avoid specifying the size of the array too &amp;ndash; &lt;code&gt;var languages = [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt;. The number of values specified in the initialization will be used to set the size of the array.&lt;/p&gt;
&lt;p&gt;And, finally, within a function, you can always use the shorthand declaration. For example, &lt;code&gt;languages := [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	languages := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;}
    fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;All elements in the array are&amp;#34;&lt;/span&gt;, languages)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(languages)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of languages array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, languages[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whatever you have seen so far are single-dimension arrays. You can create multi-dimension arrays too in Go language. The syntax for that is not too different from what you have already tried. You just have to add multiple size values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt;variable-name&amp;gt; = [SIZE1][SIZE2][SIZEn]&amp;lt;variable-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;&amp;gt;{{values1},{values2},{valuesn}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for example, &lt;code&gt;var languages = [2][2]string{{&amp;quot;Go&amp;quot;,&amp;quot;PowerShell&amp;quot;},{&amp;quot;English&amp;quot;, &amp;quot;Spanish&amp;quot;}}&lt;/code&gt; will declare a two-dimensional array. Notice the curly brackets around the value specification in the array declaration. You can access the array elements in a multi-dimensional array by specifying multiple indices. For example, &lt;code&gt;languages[0][0]&lt;/code&gt; will result in the value Go retrieved from the array. If you specify only one index, Go will present the entire set of elements at the dimension that matches the index.&lt;/p&gt;
&lt;p&gt;Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	languages := [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;}, {&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(languages)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of languages array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, languages[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the length of the languages array is 2. It is the number of dimensions and not the total number of elements.&lt;/p&gt;
&lt;p&gt;So far, you have learned about arrays in Go language. To summarize,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrays in Go are fixed-length and can contain elements of the same data type&lt;/li&gt;
&lt;li&gt;Arrays in Go can either be single or multi dimensional.&lt;/li&gt;
&lt;li&gt;Arrays in Go can neither be resized nor a sub-array can be retrieved&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point can be addressed using slices in Go language. And, that is the next part of this series.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Types in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-types-in-go-language/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-types-in-go-language/</guid>
      <description>&lt;p&gt;After looking at variables in the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-variables-in-go-language/&#34;&gt;previous part&lt;/a&gt; of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you have a fair understanding of using different types of variable declarations and using the variable values in your program. Each of these variables you created and used have an associated type. The type of a variable dictates what that variable is allowed store. So, what are different data types in Go language? You will learn that today!&lt;/p&gt;
&lt;h2 id=&#34;data-types-in-golang&#34;&gt;Data types in Golang&lt;/h2&gt;
&lt;p&gt;Go language has several built-in data types and these types can be classified into three different categories &amp;ndash; basic data types, aggregate data types, reference types, and interface types.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Included types&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Basic data types&lt;/td&gt;
&lt;td&gt;Numerals, Strings, and Booleans&lt;/td&gt;
&lt;td&gt;Data types that form the basis or included in other data types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aggregate data types&lt;/td&gt;
&lt;td&gt;Arrays and Structs&lt;/td&gt;
&lt;td&gt;Formed by combining the basic and simple data types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reference types&lt;/td&gt;
&lt;td&gt;Slices, Functions, Pointers, and Channels&lt;/td&gt;
&lt;td&gt;Refer indirectly to state or program variables&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interface types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Abstractions around behavior of other types&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this part, you will learn about basic data types and you will learn about other types as you proceed in this series.&lt;/p&gt;
&lt;h2 id=&#34;basic-data-types&#34;&gt;Basic data types&lt;/h2&gt;
&lt;p&gt;In the last chapter, some of the examples used variables of &lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;boolean&lt;/code&gt; data types. To recap, &lt;code&gt;var &amp;lt;variable-name&amp;gt; &amp;lt;data-type&amp;gt; = &amp;lt;value | expression&amp;gt;&lt;/code&gt; is how you declare variables. You learned that the variable declaration can either use static type declaration or the type can be determined based on the value assigned to the variable. The three types mentioned here fall in the category of basic data types. The following sections dive into each of these basic data types.&lt;/p&gt;
&lt;h3 id=&#34;numerals&#34;&gt;Numerals&lt;/h3&gt;
&lt;p&gt;Go language supports &lt;a href=&#34;https://golang.org/ref/spec#Numeric_types&#34;&gt;different types to represent numbers&lt;/a&gt;. You can at a high-level categorize these into integers, floating point numbers, and complex numbers. Each of these types represent the size of the value that can be stored within a variable of that type. And, these types can be both signed and unsigned.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Possible values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;unsigned  8-bit integers&lt;/td&gt;
&lt;td&gt;0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint16&lt;/td&gt;
&lt;td&gt;unsigned 16-bit integers&lt;/td&gt;
&lt;td&gt;0 to 65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;td&gt;unsigned 32-bit integers&lt;/td&gt;
&lt;td&gt;0 to 4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint64&lt;/td&gt;
&lt;td&gt;unsigned 64-bit integers&lt;/td&gt;
&lt;td&gt;0 to 18446744073709551615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;signed 8-bit integers&lt;/td&gt;
&lt;td&gt;-128 to 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int16&lt;/td&gt;
&lt;td&gt;signed 16-bit integers&lt;/td&gt;
&lt;td&gt;-32768 to 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;td&gt;signed 32-bit integers&lt;/td&gt;
&lt;td&gt;-2147483648 to 2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;signed 64-bit integers&lt;/td&gt;
&lt;td&gt;-9223372036854775808 to 9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float32&lt;/td&gt;
&lt;td&gt;32-bit floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float64&lt;/td&gt;
&lt;td&gt;64-bit floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex64&lt;/td&gt;
&lt;td&gt;complex numbers with float32 real and imaginary parts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex128&lt;/td&gt;
&lt;td&gt;complex numbers with float64 real and imaginary parts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;alias for uint8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rune&lt;/td&gt;
&lt;td&gt;alias for int32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Well, this is a huge list and what you choose to use in your program really depends on your need. Within integers, unsigned integers (uint) contain only the positive numbers while signed (int) contains both positive and negative numbers. Integers come in different sizes &amp;ndash; 8, 16, 32, and 64 bits. &lt;code&gt;int&lt;/code&gt; is probably the most commonly used numeric type.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;byte&lt;/code&gt; type is same as &lt;code&gt;unit8&lt;/code&gt;. You will see a good number of examples using &lt;code&gt;byte&lt;/code&gt; type in this series of articles. The type &lt;code&gt;rune&lt;/code&gt; is same as &lt;code&gt;int32&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Floating point numbers contain a decimal component. For example 3.14 is a floating point number. Floating point numbers come in 32 and 64 bit sizes. The &lt;code&gt;complex64&lt;/code&gt; and &lt;code&gt;complex128&lt;/code&gt; are essentially floating point types with the imaginary part.&lt;/p&gt;
&lt;p&gt;Like every other programming language, Go too supports a wide array of arithmetic operators to work with different data types. For example, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt;. The first four operators apply to all types if numerals while the last one &amp;ndash; remainder operator (&lt;code&gt;%&lt;/code&gt;) &amp;ndash; applies only to integers.&lt;/p&gt;
&lt;p&gt;Here is an example that sh ows all these numeric data types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; + &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2.0&lt;/span&gt; * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3.3&lt;/span&gt; / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3.1&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; - &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; % &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using complex numbers in Go language is a bit different from how you initialize and use ints and floats.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// using constructor to create a comples number
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	c1 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;complex&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// gets real part
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	realPart := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;real&lt;/span&gt;(c1)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// gets imaginary part
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	imgPart := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;imag&lt;/span&gt;(c1)

	fmt.Println(c1)
	fmt.Println(realPart)
	fmt.Println(imgPart)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// second method to creating complex numbers
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	c2 := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; + &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6i&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;real&lt;/span&gt;(c2))
	fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;imag&lt;/span&gt;(c2))

	&lt;span style=&#34;color:#007f7f&#34;&gt;//complex number arithmetic
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(c1 + c2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the constructor function &lt;code&gt;complex()&lt;/code&gt; creates a complex number. The two arguments to this function are the real and imaginary parts of the number. The &lt;code&gt;real()&lt;/code&gt; function gets the real part of a complex number while the imaginary part can be retrieved using &lt;code&gt;imag()&lt;/code&gt; function. Finally, the last line shows the complex number arithmetic.&lt;/p&gt;
&lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;
&lt;p&gt;Strings are sequences of characters. Each character is represented by a byte value. Go language supports unicode characters as well as a part of the strings. So, one of the examples you saw earlier &amp;ndash; &amp;ldquo;I ❤ Golang!&amp;rdquo; &amp;ndash; is a totally valid string in Golang. String literals should always be enclosed either in double-quotes or back ticks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;I ❤ Golang!&amp;#34;&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`Go language is simple to learn!`&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other languages &amp;ndash; if you are familiar with PowerShell like I do &amp;ndash; you might have used single-quotes as well to represent strings. While single-quotes are not permitted, using back ticks is in a way similar to single-quotes. For example, in Go, the escape sequences such as &lt;code&gt;/n&lt;/code&gt; (newline) and &lt;code&gt;/t&lt;/code&gt; (tab) have no meaning when the string is enclosed in back ticks. Update the example above to add one of these escape sequences and try out the program again.   Do you see something similar where the escape sequence at the end of string enclosed in back ticks does not get replaced to its meaning?&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d4-strings-01.png&#34; width=&#34;500&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As mentioned earlier, strings are sequence of characters and get indexed from 0. So, for example, &lt;code&gt;&amp;quot;Golang&amp;quot;[3]&lt;/code&gt; refers to byte representation of character &amp;ldquo;a&amp;rdquo;. So, if you use &lt;code&gt;fmt.Println(&amp;quot;Golang&amp;quot;[3])&lt;/code&gt;, you will see 97 printed on the console.   So, how can you print the character &amp;ldquo;a&amp;rdquo; instead of its byte representation? For this, you use format verbs. You will learn more about string formatting in a later article but if you are keen on trying this, you can use the following statement to print the character instead of its byte value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%q&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang&amp;#34;&lt;/span&gt;[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that in the above example, &lt;code&gt;Printf&lt;/code&gt; function is used instead of the &lt;code&gt;Println&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The length of a string is equivalent to the number of bytes in the string. You can derive the length of a string in Go using the predeclared function called &lt;code&gt;len&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, you can concatenate strings using the &lt;code&gt;+&lt;/code&gt; operator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;I &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;❤ &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang!&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;booleans&#34;&gt;Booleans&lt;/h3&gt;
&lt;p&gt;Booleans represent a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value. true and false are predeclared constants in Go and represent the boolean truth values. The predeclared boolean type is &lt;code&gt;bool&lt;/code&gt;. Booleans are represented using special one bit integer values. With boolean values, you use logical operators such as &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and), &lt;code&gt;||&lt;/code&gt; (or), and &lt;code&gt;!&lt;/code&gt; (not).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// using constructor to create a comples number
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; isTypeNum &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;

	isTypeNum = (reflect.TypeOf(a).String() == &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Is variable a of type int?:&amp;#34;&lt;/span&gt;, isTypeNum)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The statement &lt;code&gt;var isTypeNum bool&lt;/code&gt; creates a variable named &lt;code&gt;isTypeNum&lt;/code&gt; of type boolean. The expression &lt;code&gt;(reflect.TypeOf(a).String() == &amp;quot;int&amp;quot;)&lt;/code&gt; uses the &lt;code&gt;TypeOf()&lt;/code&gt; function in the &lt;code&gt;reflect&lt;/code&gt; package to retrieve the type of variable a, convert it to string and then compare it to the string &amp;ldquo;int&amp;rdquo; using the &lt;code&gt;==&lt;/code&gt; operator. This comparison (you will learn about comparison operators when looking at control flow statements) results in a boolean value &amp;ndash; true or false and that gets assigned to the variable &lt;code&gt;isTypeNum&lt;/code&gt; as value.&lt;/p&gt;
&lt;p&gt;This is quick overview of basic data types in Go language. It is time to practice what you learned today.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a program that declares two variables &amp;ndash; an integer and a floating pointing type. Perform multiplication of these values and print the result using &lt;code&gt;Println&lt;/code&gt; function. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/687707e99bb63cb59bdc37bf9e8f7b79&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a program that uses shorthand declaration to declare variables of types &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;bool&lt;/code&gt; and assigns the values 10, &amp;lsquo;hello&amp;rsquo;, and true respectively. What happens when you use the statement &lt;code&gt;fmt.Println(i == s)&lt;/code&gt;. Publish your answer &lt;a href=&#34;https://gist.github.com/rchaganti/b15475bb628b88cd3e905564427cf531&#34;&gt;here&lt;/a&gt;. What did you learn from this exercise?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Variables in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-variables-in-go-language/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-variables-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-first-program/&#34;&gt;last part&lt;/a&gt; of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you looked at writing your first program and understood the program structure and understood the keywords such as &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;func&lt;/code&gt;. It was a good start. In this part, you will learn how to declare and use variables in Go programs.&lt;/p&gt;
&lt;h2 id=&#34;naming-convention-in-go&#34;&gt;Naming convention in Go&lt;/h2&gt;
&lt;p&gt;Before you start looking at variables in Golang, you must first understand some rules for naming different program entities &amp;ndash; variables, types, statements, packages, and constants &amp;ndash; in Go.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Names or identifiers for any of these entities must start either with a letter or an underscore. You can use Unicode letters as well.&lt;/li&gt;
&lt;li&gt;These names or identifiers can have any number of additional letters or underscores or digits.&lt;/li&gt;
&lt;li&gt;The case of a name matters in Go language. For example, firstName is different from Firstname or FirstName.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You learned in the last part that &lt;a href=&#34;https://golang.org/ref/spec#Keywords&#34;&gt;Go language has 25 keywords&lt;/a&gt;. These keyword names are reserved and may not be used as names or identifiers for any of the program entities. There are also a &lt;a href=&#34;https://golang.org/ref/spec#Predeclared_identifiers&#34;&gt;few predeclared identifiers&lt;/a&gt; in Go language. You may use the names of predeclared identifiers for your program entities but make sure you do not confuse yourself or create confusion for others reading your code.&lt;/p&gt;
&lt;p&gt;While there is no limit on the number of characters in a name or an identifier, &lt;a href=&#34;https://www.reddit.com/r/golang/comments/3aporh/why_so_many_gophers_use_single_letter_variables/&#34;&gt;Gophers tend to use shorter names&lt;/a&gt; for program entities. It may sound strange for people coming from other programming language background but many Go programmers use single letter names and it is &lt;a href=&#34;http://doc.cat-v.org/bell_labs/pikestyle&#34;&gt;highly recommended&lt;/a&gt;. The recommendation here is to use shorter names or identifiers for local scope and longer names for names or identifiers that have a larger visibility. You will learn more about scopes in a different part of this article.&lt;/p&gt;
&lt;p&gt;Finally, names or identifiers starting with an uppercase letter are used only when you want to make the program entity visible outside the current package. For example, if you revisit the code of your first program, the function that we used to print text on the console was &lt;code&gt;Println&lt;/code&gt; in the &lt;code&gt;fmt&lt;/code&gt; package. Otherwise, the general recommendation is to begin the name or identifier with a lowercase letter or underscore.&lt;/p&gt;
&lt;p&gt;Alright, with this background, you can now get started with variables.&lt;/p&gt;
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;A variable is essentially a storage location in memory to store a specific value of a given type. Variable declaration names the storage location for easier identification. The general syntax for declaring variables in Go language is as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; name_of_variable &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; = value_or_expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, &lt;code&gt;var s string&lt;/code&gt; declares an identifier &lt;code&gt;s&lt;/code&gt; to store a value of type string. This declaration also allocates the storage needed for storing the value. Assigning type or assigning a value at the time of variable declaration is optional. In Go language, there is no concept of uninitialized variables. When no value is assigned during declaration, the variable gets initialized to a default or zero value based on the type. For string type, it will be an empty string. The zero value assignment ensures that a variable always hold a valid value of the type specified.&lt;/p&gt;
&lt;p&gt;When you specify the type during declaration, it defines the static type of the variable. If a type name is not specified during the declaration, a dynamic type gets determined based on the value assigned.&lt;/p&gt;
&lt;p&gt;You cannot skip both type and value assignment during variable declaration.&lt;/p&gt;
&lt;p&gt;Let us see this in action.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// declare a string variable without assigning a value
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// print variable value
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of variable s is&amp;#34;&lt;/span&gt;, s)

	&lt;span style=&#34;color:#007f7f&#34;&gt;//declare a variable without type
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; fName = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;type of variable fName is&amp;#34;&lt;/span&gt;, reflect.TypeOf(fName))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this Go program, you will see the following output.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d3-variable-01.png&#34; width=&#34;300&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As seen in the output, the dynamic type of variable &lt;code&gt;fName&lt;/code&gt; is set to &lt;code&gt;string&lt;/code&gt;. After this, within this program, you cannot assign a value of another type to &lt;code&gt;fName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go language allows you to declare multiple variables at the same time and these variable can be of different types as well. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#007f7f&#34;&gt;// multiple variables initialized to zero values
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; n1, n2, n3, n4 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// muliple variables with no type declaration but initializer values
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; n, s, f, b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;golang&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;3.14&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above examples, the first one declares multiple integer type variables. In the second declaration, the values get on the right-hand side get assigned to the variables in the order specified. Also, you must match the number of values provided on the right to number of identifiers specified on the left. The variable initializers (on the right) can be literal values like what is specified above or can be expressions as well.&lt;/p&gt;
&lt;p&gt;You can, similar to the import statement, wrap variable declaration in (). For example, the above two declarations can be changed to use the following syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; (
		n1, n2, n3, n4 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		n, s, f, b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;golang&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;3.14&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;
	)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is yet another way and usage depends on the readability requirements and preferences in your code.&lt;/p&gt;
&lt;h3 id=&#34;short-variable-declaration&#34;&gt;Short variable declaration&lt;/h3&gt;
&lt;p&gt;Within Go functions, you can use a short variable declaration and syntax for that is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;variable-name := value-or-expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that this can be used only within functions as non-declaration statements are not allowed at the package level. Here is a quick example of using short variable declaration method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;//simple short variable declaration
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	s := &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of variable S is&amp;#34;&lt;/span&gt;, s)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Type of variable s is&amp;#34;&lt;/span&gt;, reflect.TypeOf(s))

	&lt;span style=&#34;color:#007f7f&#34;&gt;//short variable declaration for multiple variables
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	n, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Values of n and b are&amp;#34;&lt;/span&gt;, n, b)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike &lt;code&gt;=&lt;/code&gt; (assignment operator), &lt;code&gt;:=&lt;/code&gt; is a declaration. Even in this case too, the initializer can either be a literal value or an expression such as a function call. You will see several examples this method of variable declaration as you go forward in this series.&lt;/p&gt;
&lt;p&gt;Alright, that is a quick overview of declaring and using variables in Go language. It is time to practice what you learned.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In the first exercise, update the hello world program you create in the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-first-program/&#34;&gt;last part&lt;/a&gt; to add a variable &lt;code&gt;fName&lt;/code&gt; and initialize it with your name as the value. Finally, print the statement Hello, fName to the screen. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/daa5741378a401935ee08102652ad278&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a program that declares two integer variables i and j and assigns values 10 and 30. Print the values of these variables. Add an expression to swap the values of the variables using assignment operator. Finally, print the values of the variable values after swapping. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/33b2cbf4fc121999d38c6ead7911eecd&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Azure Resource Manager - Using secrets in ARM templates</title>
      <link>https://ravichaganti.com/blog/azure-resource-manager-using-secrets-in-arm-templates/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-resource-manager-using-secrets-in-arm-templates/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/templatearchitecture.png&#34; width=&#34;760&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In this series so far, you have seen how you can get started with ARM templates, parameterize the templates by adding parameters, and then optimize those templates using variables, expressions, and user-defined functions. It is now time to move forward into more advanced topics and start building the template for the remaining components in the architecture shown above. In the architecture shown above, you will be implementing an ARM template that will provision virtual machines for which the administrator and domain-join credentials will have to provided as input. Also, the configuration scripts used for guest OS configuration may have to access an internal storage account blob which will require the storage connection strings and access keys. Storing these secrets in plain-text is not recommended at all. Also, as an architect, you may want to standardize on the passwords used for local administrator accounts and do not want to share the domain-join credentials with any user while provisioning an ARM template. This needs a more centralized credential and secret store. Azure Vault provides this capability. Today, you will see how to handle secrets such as passwords, access keys, certificates, and so on in an ARM template.&lt;/p&gt;
&lt;h2 id=&#34;azure-key-vault&#34;&gt;Azure Key Vault&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/key-vault/&#34;&gt;Azure Key Vault&lt;/a&gt; is a service that provides a centralized secret store. You can use the Key Vault for cryptographic keys, API keys, passwords, connection strings, and certificates. For the cryptographic keys, you can use a Hardware Security Module (HSM) as well. Once a key vault is provisioned, you can add your secrets and retrieve them in an ARM template for use with other resource types such as virtual machines.&lt;/p&gt;
&lt;h3 id=&#34;creating-a-key-vault&#34;&gt;Creating a key vault&lt;/h3&gt;
&lt;p&gt;To create a key vault, you need few mandatory input parameters such as &lt;code&gt;tenantId&lt;/code&gt;, &lt;code&gt;objectId&lt;/code&gt; of the user or service principal or the security group in Azure Active Directory (AAD), key and secret permissions. The specified tenant will be used for authenticating requests to the key vault and the object Id of the AAD user will be used to provide the necessary permissions to interact with the Key Vault.&lt;/p&gt;
&lt;p&gt;Here is a simple starter template that you can use.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=azKVbeginner.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this starter template, you see that the value of &lt;code&gt;tenantId&lt;/code&gt; defaults to the value of the &lt;code&gt;tenantId&lt;/code&gt; property from the &lt;code&gt;subscription()&lt;/code&gt; standard template function. The value to the &lt;code&gt;objectId&lt;/code&gt; property is coming from a template parameter. You can retrieve the object ID of an AAD user using &lt;code&gt;az ad user show&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az ad user show --id Ravikanth@azure.com --query objectId
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can deploy the above template to create a Key Vault by clicking on the Deploy To Azure button below.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2fa5b15709b6803abaf3d4eca4308052eb37c31fbd%2fazKVbeginner.azrm.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;If you prefer Azure CLI, you can use the following commands to perform this template deployment.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=azKVbeginner.azcli&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the above template, as a part of the access policies [line 22], for &lt;code&gt;key&lt;/code&gt;,  &lt;code&gt;secrets&lt;/code&gt;, &lt;code&gt;certificates&lt;/code&gt; permissions, you have used &lt;code&gt;all&lt;/code&gt; as the value. As it literally means, this permission level provides full permission set to the service principal specified using &lt;code&gt;objectId&lt;/code&gt; property. This is not recommended in a production Key Vault. You must secure the key vault as well and restrict access to what is really needed. The allowed values for the key and secret permissions can be seen in the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/2015-06-01/vaults&#34;&gt;resource provider reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To this extent, the above template can be modified to add a few more parameters to enable permission value specification.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=azKVbeginnerParameterized.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this updated template, three additional parameters are added to gather key, secret, and certificate permissions. While there are default values for these parameters, you can provide updated set of permissions as an array during deployment time. If you notice, there are additional resource properties as well added to the Key Vault resource definition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;enabledForDeployment&lt;/strong&gt; spcifies whether Azure virtual machines can retrieve the certificates from the key vault or not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;enabledForTemplateDeployment&lt;/strong&gt; specifies whether Azure Resource Manager is allowed to retrieve secrets from the vault or not.&lt;/p&gt;
&lt;p&gt;For the architecture that you are building, both these properties need to be set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can try deploying this template by clicking on the Deploy to Azure button below.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2f4a5cb89ed7d2b3a5c08230450a38799e1f6d6f0e%2fazKVbeginnerParameterized.azrm.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;Now, with this updated template you have a functional key vault that can be used to store secrets needed for other resource configurations. So, how do you use ARM templates to store secrets in a key vault?&lt;/p&gt;
&lt;h3 id=&#34;adding-secrets-to-vault&#34;&gt;Adding secrets to vault&lt;/h3&gt;
&lt;p&gt;Once you have a key vault provisioned, you can add the &lt;code&gt;Microsoft.KeyVault/vaults/secrets&lt;/code&gt; resource to the template to add secrets to the vault. The following resource definition will do that job.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
	&amp;#34;type&amp;#34;: &amp;#34;Microsoft.KeyVault/vaults/secrets&amp;#34;,
	&amp;#34;name&amp;#34;: &amp;#34;[concat(variables(&amp;#39;keyVaultName&amp;#39;), &amp;#39;/&amp;#39;, parameters(&amp;#39;secretName&amp;#39;))]&amp;#34;,
	&amp;#34;apiVersion&amp;#34;: &amp;#34;2018-02-14&amp;#34;,
	&amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
	&amp;#34;properties&amp;#34;: {
		&amp;#34;value&amp;#34;: &amp;#34;[parameters(&amp;#39;secretValue&amp;#39;)]&amp;#34;,
		&amp;#34;contentType&amp;#34; : &amp;#34;string&amp;#34;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this resource definition, the type of the resource is &lt;code&gt;Microsoft.KeyVault/vaults/secrets&lt;/code&gt;. The &lt;code&gt;secretName&lt;/code&gt; that you want to use will be provided as the name of the resource and the value will be set in the resource properties.&lt;/p&gt;
&lt;p&gt;Here is the full template that can be used to provision a key vault and then add a secret to it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=azKVbeginnerStoreSecret.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;This updated template added two more parameters &amp;ndash; &lt;code&gt;secretName&lt;/code&gt; and &lt;code&gt;secretValue&lt;/code&gt;. &lt;code&gt;secretValue&lt;/code&gt; is a secure string. Try deploying the template using the deploy to Azure button below.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2fb605dc41251aea40dae877f352a0b35998944076%2fazKVbeginnerStoreSecret.azrm.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h3 id=&#34;retrieve-vault-secret&#34;&gt;Retrieve vault secret&lt;/h3&gt;
&lt;p&gt;Finally, when you have to use the secret as another resource property value, you can do that using a property definition as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;adminPassword&amp;#34;: {
    &amp;#34;reference&amp;#34;: {
        &amp;#34;keyVault&amp;#34;: {
        &amp;#34;id&amp;#34;: &amp;#34;/subscriptions/&amp;lt;SubscriptionID&amp;gt;/resourceGroups/mykeyvaultdeploymentrg/providers/Microsoft.KeyVault/vaults/&amp;lt;KeyVaultName&amp;gt;&amp;#34;
        },
        &amp;#34;secretName&amp;#34;: &amp;#34;vmAdminPassword&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will learn more about this pattern in the later articles of this series when you attempt creating virtual machines using ARM template.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this part, you learned how to create an Azure Key Vault, add secrets to the vault, and retrieve the secrets. This knowledge will come handy when you attempt creating virtual machines that require a predefined administrator password. In the next part, you will learn about resource dependencies in ARM templates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - First program</title>
      <link>https://ravichaganti.com/blog/get-set-go-first-program/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-first-program/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With the background provided in the introduction part of this series, you must now be equipped with the necessary tools for the job &amp;ndash; learning Go! So, in this part, you will write your first program in Go language. You will not only learn about the very minimal structure needed for a Go program but you will also learn about organizing your Go programs and why it matters. Get set Go!&lt;/p&gt;
&lt;h2 id=&#34;your-first-program&#34;&gt;Your first program&lt;/h2&gt;
&lt;p&gt;The most popular first program among many programmers or programming languages is the &lt;em&gt;hello world&lt;/em&gt; program. Here is how you can write a hello world program in Go language.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/023b2d3ad10b4c53e997d58387d1ee2d.js?file=d2-helloworld.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is it. The above code presents the basic structure of Go programs.&lt;/p&gt;
&lt;p&gt;All Go programs are packages and therefore every Go program starts with a package declaration. A Go package can be equated to a library or a module in other languages such as C or Python. In this example, [line1] the package name is &lt;code&gt;main&lt;/code&gt;. main package in Go is a special package since any Go program execution starts with &lt;code&gt;main&lt;/code&gt; function of the &lt;code&gt;main&lt;/code&gt; package. You will learn more about using and building packages in-depth in a later part of this series.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; keyword follows [line 7] the package declaration. This keyword is used to import other packages to use within the current package. In this example, you are importing the &lt;code&gt;fmt&lt;/code&gt; package. Note that the &lt;code&gt;fmt&lt;/code&gt; string is enclosed within double-quotes and it should be double-quotes only. If you are coming from other programming languages, you may start using single-quotes for representing strings but that is not valid in Go programming. The method of importing packages shown in the example works only for a single package. You can add multiple such import statements one after another or use a better method as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go does not let you import packages that you are not using within the current program. If you add an import statement for a package but do not use it in your code, you will receive an error during compile time that a package has been imported but not used. This is by design.&lt;/p&gt;
&lt;p&gt;Next thing that you see in the example is the &lt;code&gt;func&lt;/code&gt; keyword to declare the &lt;code&gt;main&lt;/code&gt; function. Like many other programming languages, functions in Go are the basic building blocks and the name of the function identifies a sequence of steps that you want to perform. In this example, you just have one step that is to print a message using &lt;code&gt;Println&lt;/code&gt; function within the &lt;code&gt;fmt&lt;/code&gt; package. You access functions from imported packages using the &lt;code&gt;&amp;lt;packageName&amp;gt;.&amp;lt;functionName&amp;gt;&lt;/code&gt; syntax and therefore the example above uses &lt;code&gt;fmt.Println()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go functions, similar to other languages, have input (arguments) and output (return values). However, &lt;code&gt;main&lt;/code&gt; function in Go uses neither &amp;ndash; it neither takes any arguments nor returns any values. The &lt;code&gt;Println&lt;/code&gt; function in the &lt;code&gt;fmt&lt;/code&gt; package takes a string argument and prints the same to the console when executed. You will learn more about the functions in-depth in a later part of this series.&lt;/p&gt;
&lt;p&gt;Also, notice that the opening and closing curly brackets in the function declaration. In Go programs, for any code block, the opening bracket has to be on the same line as the the keyword or code block identifier &amp;ndash; in this case the &lt;code&gt;func&lt;/code&gt; keyword and the name of the function. There is no choice in the function declaration since a new line character is treated as the end of a statement. On a lighter note, this totally eliminates any &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/2715/should-curly-braces-appear-on-their-own-line&#34;&gt;my-bracket-style-is-better-than-yours&lt;/a&gt; kind of discussion.&lt;/p&gt;
&lt;p&gt;Finally, to the other semantics I skipped. The &lt;code&gt;/* */&lt;/code&gt; [line 3-5] and &lt;code&gt;//&lt;/code&gt; [line 9 and end of line 10] indicate comments in Go language. No surprises there. The first method &amp;ndash; &lt;code&gt;/* */&lt;/code&gt; &amp;ndash; is a multi-line or block comment where as the second one using &lt;code&gt;//&lt;/code&gt; is a single line comment. Anything that you enclose within comments will be ignored at compile time.&lt;/p&gt;
&lt;h3 id=&#34;executing-go-programs&#34;&gt;Executing Go programs&lt;/h3&gt;
&lt;p&gt;You can execute your Go programs using the &lt;code&gt;go run&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go run helloworld.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d2-output.png&#34; width=&#34;260&#34; /&gt;
        
        &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;Figure 1 - Command Output&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;p&gt;When working with Go language, &lt;code&gt;go&lt;/code&gt; and it&amp;rsquo;s subcommands is all you need to compile your programs. In the above example, you are using the &lt;code&gt;run&lt;/code&gt; subcommand. When this command is executed, the Go program code gets compiled and translated to machine code which then runs and prints the message that we specified as an argument to the &lt;code&gt;Println&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;What if you want to just build the binary and not run it? You can use the &lt;code&gt;go build&lt;/code&gt; subcommand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; build hellworld.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command generates helloworld.exe in the current working directory. You can now execute the generated binary to see the output from the program.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;go build&lt;/code&gt; subcommand, it is optional to specify the .go filename. If you don&amp;rsquo;t specify a file name, go will try to find the Go source code package with main function and build it.&lt;/p&gt;
&lt;p&gt;If you look at the screen capture (Figure 1 - Command Output) of program output above, the &lt;code&gt;go run&lt;/code&gt; command did not use the full file name &amp;ndash; &lt;code&gt;helloworld.go&lt;/code&gt;. Instead, it was just &lt;code&gt;helloworld&lt;/code&gt;. It still worked! But, how? If you too thought about it, the answer follows. Read on.&lt;/p&gt;
&lt;h2 id=&#34;go-workspaces&#34;&gt;Go workspaces&lt;/h2&gt;
&lt;p&gt;The command shown in the above output worked because the helloworld source code exists in a known Go workspace. In the introduction, you have learned about the &lt;code&gt;go env&lt;/code&gt; command. In the output of this command, you see an environment variable called &lt;code&gt;GOPATH&lt;/code&gt;. This variable represents the path where your Go program source code is. By default, this will be set to &lt;code&gt;%USERPROFILE%\go&lt;/code&gt; on Windows and &lt;code&gt;$HOME/go&lt;/code&gt; on Linux. You can change this path using the &lt;code&gt;go env&lt;/code&gt; subcommand with &lt;code&gt;-w&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; env -w GOPATH=C:/GitHub/GetSetGo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go workspace is essentially a location on your disk. The workspace folder should contain a folder named &lt;code&gt;src&lt;/code&gt; for all your Go program source code. The other folder that gets created automatically is the &lt;code&gt;bin&lt;/code&gt; folder for storing all binary files generated using &lt;code&gt;go install&lt;/code&gt; subcommand. Here is how the folder structure looks like on my system.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d2-gopath.png&#34; width=&#34;260&#34; /&gt;
        
        &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;Figure 2 - Go workspace structure&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;p&gt;With this folder structure, when you run &lt;code&gt;go build helloworld&lt;/code&gt; or &lt;code&gt;go run helloworld&lt;/code&gt; or &lt;code&gt;go install helloworld&lt;/code&gt; command, go will try to find if there is a match that exists at a path specified by either &lt;code&gt;GOROOT&lt;/code&gt; or &lt;code&gt;GOPATH&lt;/code&gt; environment variables. A typical Go workspace contains many source control repositories &amp;ndash; one for each package you are working on. So, in the example above, you can consider the folder &lt;em&gt;helloworld&lt;/em&gt; under &lt;code&gt;src&lt;/code&gt; to be a source control repository. It is a best practice among Go programmers to use single workspace for all their Go source code.&lt;/p&gt;
&lt;p&gt;The Go workspace is the folder structure that gets used when you use the &lt;code&gt;go get&lt;/code&gt; subcommand to download Go packages. For example, if you are using VS Code with the Go extension to develop your Go programs, you might have seen VS Code prompting you to install necessary Go tools to enable the VS Code editor features such as Intellisense, linting, formatting, and so on. So, if you have used the Go: Install/Update Tools in VS Code, all tools get downloaded to &lt;code&gt;pkg&lt;/code&gt; folder within the Go workspace and then the packages get compiled to binaries which get installed to the &lt;code&gt;bin&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;For now, it is not mandatory (but good) to use a Go workspace to try out the examples in this or the next few upcoming parts. You will revisit this in a later part discussing Go packages. In the next part of this series, you will get introduced to variables and types in Go language.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Now that you have got introduced to basic Go program syntax, write a program that prints &amp;ldquo;I ❤ Golang!&amp;rdquo;. You don&amp;rsquo;t have to use anything more than what you learned today. Post your solution to this @ &lt;a href=&#34;https://gist.github.com/rchaganti/725cc041a30ee90e19d4713a1514b432&#34;&gt;https://gist.github.com/rchaganti/725cc041a30ee90e19d4713a1514b432&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Update the GOPATH environment variable to a different location than the default path and create folder structure similar to what is shown in Figure 2. Try &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, and &lt;code&gt;go install&lt;/code&gt; commands and understand the difference.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Introduction to Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-introduction-to-go-lang/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-introduction-to-go-lang/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go programming language&lt;/a&gt; isn&amp;rsquo;t new. It existed for more than 13 years now. The idea of Go language was first conceived in 2007 at Google by Ken Thompson, Robert Griesemer, and Rob Pike. Go was developed in response to some of the challenges the development teams at Google were facing internally. Some of these issues included ridiculously longer build times, baggage that legacy languages imposed on modern infrastructure / systems development, and uncontrolled dependencies among many other pain points. Go was designed to make it easy and efficient to program modern multicore systems, web service backends, and command line tools. The design considerations such as rigorous dependency management and efficiency at scale make Go one of the best modern programming languages.&lt;/p&gt;
&lt;p&gt;Go was publicly announced in 2009. Version 1.0 of Go language was released in &lt;a href=&#34;https://golang.org/doc/go1&#34;&gt;March 2012&lt;/a&gt; and the current version (at this time of writing) is &lt;a href=&#34;https://golang.org/doc/go1.14&#34;&gt;1.14&lt;/a&gt;. Today, Go is a part of many major online services and infrastructure tools that you use every day! Google, of course! &lt;a href=&#34;https://github.com/docker&#34;&gt;Docker&lt;/a&gt; &amp;ndash; the most popular container technology &amp;ndash; is written in Go. The most recent entrant in the CLI game, the &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt;, is written in Go. Every tool that &lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;Hashicorp&lt;/a&gt; developed so far was in Go. Blockchain platform like &lt;a href=&#34;https://ethereum.org/en/&#34;&gt;Ethereum&lt;/a&gt; uses Go. This static page that you are reading right now was generated using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; which is written in Go. I can &lt;em&gt;Go&lt;/em&gt; (pun intended) on with this list and &lt;a href=&#34;https://github.com/golang/go/wiki/GoUsers&#34;&gt;there are many more very well known names&lt;/a&gt; that use Go as their primary language for all their product development. So, what is Go?&lt;/p&gt;
&lt;h2 id=&#34;what-is-go&#34;&gt;What is Go?&lt;/h2&gt;
&lt;p&gt;Go is an &lt;a href=&#34;https://github.com/golang/go&#34;&gt;open source&lt;/a&gt;, general-purpose, and modern programming language with its roots in systems programming. If you are familiar with C programing language, you will find a few similarities between Go and C. Apart from C, Go language design was inspired from Pascal, Smalltalk, Modula, Oberon, and Algol. Go is a modern language and offers features such as garbage collection and better memory management.&lt;/p&gt;
&lt;p&gt;Go is a &lt;strong&gt;compiled&lt;/strong&gt; language. Unlike other compiled languages, Go programs can be compiled directly to machine code and compile very fast. Faster compiler times are a part of Go&amp;rsquo;s design. Go programs can be compiled for cross-platform execution which includes Windows, Linux, OS X, Solaris, Plan9 and many other operating systems. Go programs get compiled to a single executable which eliminates the dependency nightmares from other languages.&lt;/p&gt;
&lt;p&gt;Go is &lt;strong&gt;statically typed strong language&lt;/strong&gt;. Go does not allow type coercion unlike weakly typed languages such as JavaScript. Like other statically typed languages, Go types are checked before run-time. This allows any errors related  to types surface right during compile time itself.&lt;/p&gt;
&lt;p&gt;Go&amp;rsquo;s &lt;strong&gt;package system&lt;/strong&gt; combines the best of libraries, namespaces, and modules. Every Go file is a package. The package system is designed to identify the package import using the package path than the name. There is no need to make package names unique in the Go package system.&lt;/p&gt;
&lt;p&gt;Go has a &lt;strong&gt;simple and clean syntax&lt;/strong&gt;. Go&amp;rsquo;s grammar is modest in size compared to other languages such as C, C++, and Java. There are just 25 keywords in Go.&lt;/p&gt;
&lt;p&gt;Go offers &lt;strong&gt;concurrency&lt;/strong&gt; that is important and well suited for developing modern computing application that run on multicore systems. Go implements a variant of &lt;a href=&#34;https://en.wikipedia.org/wiki/Communicating_sequential_processes&#34;&gt;Communicating Sequential Processes&lt;/a&gt; (CSP) to enable support for concurrency that is simple and robust.&lt;/p&gt;
&lt;p&gt;Overall, Go is powerful, simple to learn and use and that is what makes you productive. Now, you may ask, this is all good but why learn go?&lt;/p&gt;
&lt;h2 id=&#34;why-learn-go&#34;&gt;Why Learn Go?&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/FTl0tl9BGdc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This interview is 8 years old and Go language has progressed quite a bit and that is evident not only from the investments that big companies are making in Go but also from the developer surveys such as the surveys done by &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020&#34;&gt;Stack Overflow&lt;/a&gt; and &lt;a href=&#34;https://research.hackerrank.com/developer-skills/2020&#34;&gt;HackerRank&lt;/a&gt;. In the Stack Overflow survey, Go stood as 5th &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved&#34;&gt;most loved language and 3rd most wanted language&lt;/a&gt; to develop new applications. Go featured as the &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-what-languages-are-associated-with-the-highest-salaries-worldwide&#34;&gt;3rd most highest paid programming skill&lt;/a&gt;. In the HackerRank survey, Go &amp;ndash; for 3 consecutive years &amp;ndash; was at the top of the list of new languages developers want to learn.&lt;/p&gt;
&lt;p&gt;Apart from all this, Go is fun. I started learning this really as yet another programming language in my skillset but got hooked to this as I progressed in my journey. I started looking at some of the most popular tools implemented in Go and it was amazing to see how clean the code is and how readable it is. When compared to languages like C, C++, and Java, navigating Go code is so simple. The learning curve to get started with Go and do anything productive is very small.&lt;/p&gt;
&lt;p&gt;Go language is the most popular choice for building web services and command line tools. This is where my interest as well and therefore learning Go is really paying off.&lt;/p&gt;
&lt;p&gt;So, what are YOU waiting for? Start here and start today.&lt;/p&gt;
&lt;h2 id=&#34;get-started-with-go&#34;&gt;Get started with Go&lt;/h2&gt;
&lt;p&gt;To get started with Go, you need not install anything on your system. Really. You can just use the &lt;a href=&#34;https://play.golang.org/&#34;&gt;Go Playground&lt;/a&gt; to start with the basics.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goPlayground.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With Go playground, you can write basic Go programs, execute, and see the output. You can also share the code that you write in the playground by clicking on the share button. This generates a unique link to access and share your code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by example&lt;/a&gt; &amp;ndash; an online Go language tutorial site &amp;ndash; has examples that you can open in Go playground and try out. As you get started, this is certainly one place that you don&amp;rsquo;t want to miss.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goByExample.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;For those of you who prefer having Go installed locally for all learning, you need to download and install the latest release of Go language from &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt; and follow the &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;install instructions&lt;/a&gt; to prepare the environment for getting started with Go.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I am writing these articles on my Windows 10 system and therefore you will see references to Windows paths and configuration. Otherwise, the content and examples can be used on any supported platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On Windows, you can either get the &lt;a href=&#34;https://golang.org/dl/go1.14.6.windows-amd64.zip&#34;&gt;zip archive&lt;/a&gt; of a Go language release, extract it to location of your choice on the local disk, and set up the required environment variables. At a minimum, you must configure the system PATH variable to include path to the bin folder. In the second but preferred method, you can download the &lt;a href=&#34;https://golang.org/dl/go1.14.6.windows-amd64.msi&#34;&gt;MSI file&lt;/a&gt; which installs, by default, at &lt;em&gt;C:\Go&lt;/em&gt; and configures needed environment variables for you.&lt;/p&gt;
&lt;p&gt;You can verify your Go binary installation and environment variable configuration by executing the &lt;code&gt;go env&lt;/code&gt; or &lt;code&gt;go version&lt;/code&gt; commands. You will have to re-open the command console before running this command.&lt;/p&gt;
&lt;p&gt;You should see output similar to what is shown below.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goenv.png&#34; width=&#34;460&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You can install and run multiple versions of Go language binaries side by side. The &lt;code&gt;go get&lt;/code&gt; command, which you learn later in this series, can help get different versions of Go binaries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go get golang.org/dl/go1.15rc1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command downloads unstable (under development) version of Go. Once this is installed, you can use &lt;code&gt;go1.15rc1&lt;/code&gt; instead of &lt;code&gt;go&lt;/code&gt; to explore the new features that are still in development or verify bug fixes.&lt;/p&gt;
&lt;p&gt;For writing Go programs, a simple notepad would be good enough but that won&amp;rsquo;t make you productive. A good Integrated Development Environment (IDE) is needed for developing Go code with ease. There are many editors such as Visual Studio &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Code&lt;/a&gt;, JetBrains &lt;a href=&#34;https://www.jetbrains.com/go/&#34;&gt;GoLand&lt;/a&gt;, Eclipse with &lt;a href=&#34;https://goclipse.github.io/&#34;&gt;GoClipse&lt;/a&gt; plugin, and many others. So far, I have used Visual Studio Code only and therefore it is my only preference. The &lt;a href=&#34;https://code.visualstudio.com/docs/languages/go&#34;&gt;Go language extension&lt;/a&gt; for VS code is a must. With this extension, VS Code gets support for IntelliSense, signature help, formatting, linting, build, and more importantly debugging features. As you proceed in this series, you will see mention different VS Code Go extension features and how those features can make you more productive when writing Go programs.&lt;/p&gt;
&lt;p&gt;Ok. Enough talk. What are some resources that you can use to get started with Go language?&lt;/p&gt;
&lt;h2 id=&#34;learning-resources&#34;&gt;Learning resources&lt;/h2&gt;
&lt;p&gt;There are many existing resources online for learning Go language. The following is a list of resources I used or often refer to. Depending what mode of learning you like, here are my recommendations. The Go language specification is not for an end-to-end reading but acts more like a reference. You will see references to the language specification throughout this series of articles.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Go language documentation&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://golang.org/doc/&#34;&gt;https://golang.org/doc/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go language specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;https://golang.org/ref/spec&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go by example&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;https://gobyexample.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Online tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exercism&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://exercism.io/tracks/go&#34;&gt;https://exercism.io/tracks/go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Code practice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Go Programming Language&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/Ydfkm9w&#34;&gt;https://cutt.ly/Ydfkm9w&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Introducing Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/VdfkoPp&#34;&gt;https://cutt.ly/VdfkoPp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go In Action&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/Mdfj8Bs&#34;&gt;https://cutt.ly/Mdfj8Bs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Learn How To Code: Google&amp;rsquo;s Go (golang) Programming Language (Udemy)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.udemy.com/course/learn-how-to-code/&#34;&gt;https://www.udemy.com/course/learn-how-to-code/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Core Language (Pluralsight path)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pluralsight.com/paths/go-core-language&#34;&gt;https://www.pluralsight.com/paths/go-core-language&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Fundamentals (Nigel Poulton)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/go-fundamentals&#34;&gt;https://www.pluralsight.com/courses/go-fundamentals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Programming Language (Reddit)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.reddit.com/r/golang/&#34;&gt;https://www.reddit.com/r/golang/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Community Forum / Discussions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are a lot of companies that use Go language and there are quite a few of them in &lt;a href=&#34;https://github.com/trending/go?spoken_language_code=en&#34;&gt;open source&lt;/a&gt;. Looking at the Go code in these open source repositories is another great exercise and gives you insights into how the language is used in the real-world. As a part of this series, you will see references to code from some of these open source projects while explaining a few concepts.&lt;/p&gt;
&lt;p&gt;Finally, I am no expert in Go language and therefore these are the notes from a novice. These notes are how I learned (or still learning) Go language. At this point in time, I don&amp;rsquo;t have a definite number of articles that I want to publish as a part of this series. I will go right from very basics to applied Go language. The applied Go language part of this series will deal with some sample utilities that I developed to strengthen my understanding of Go and walk-through how I went about developing those utilities and what I learned from that exercise. At the end of each part, starting next one, I will post a few exercises that you may want to try out and share your code with the others. Each of these exercises will be available as a &lt;a href=&#34;https://gist.github.com/&#34;&gt;Gist&lt;/a&gt; and you can comment there to share your solution to the exercise with other readers of this series.&lt;/p&gt;
&lt;p&gt;Join me in this journey. Let us learn together. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Resource Manager - Using functions in ARM templates</title>
      <link>https://ravichaganti.com/blog/azure-resource-manager-using-functions-in-arm-templates/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-resource-manager-using-functions-in-arm-templates/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/templatearchitecture.png&#34; width=&#34;760&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://ravichaganti.com/blog/azure-resource-manager-in-30-days-using-expressions-and-variables-in-arm-templates/&#34;&gt;Expressions in ARM template language&lt;/a&gt; are a way to reduce complexity in the templates. &lt;a href=&#34;https://ravichaganti.com/blog/azure-resource-manager-adding-parameters-to-arm-templates/&#34;&gt;Using parameters and variables in ARM templates&lt;/a&gt; always requires the use of expressions. Parameter and variable values are combined with standard (built-in) template functions (STF) to create complex expressions to implement the business requirements and implement known configurations. Updated ARM template syntax introduced the ability to implement user-defined functions for complicated expressions and use repeatedly in your templates. In this part, you will learn more about standard template functions and learn how to implement user-defined functions.&lt;/p&gt;
&lt;h2 id=&#34;standard-template-functions&#34;&gt;Standard template functions&lt;/h2&gt;
&lt;p&gt;There are different categories of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions&#34;&gt;standard template functions&lt;/a&gt;. To work with arrays, &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions-array&#34;&gt;array functions&lt;/a&gt; can be used. For example, &lt;code&gt;contains()&lt;/code&gt; function can be used to check whether an array / object / string contains a value / key / substring. This function returns true if the item is found an false otherwise. Here is an example.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=stfArrayContains.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this example, the parameter &lt;code&gt;locations&lt;/code&gt; has a default value so you do not have to pass any parameter values while evaluating this template &lt;a href=&#34;https://ravichaganti.com/blog/azure-resource-manager-in-30-days-using-expressions-and-variables-in-arm-templates/#evaluating-expressions&#34;&gt;using the method you used in the last part&lt;/a&gt;. Within the &lt;code&gt;outputs&lt;/code&gt; element, there are two output values defined within which the &lt;code&gt;contains()&lt;/code&gt; function is used. One function checks for a value that exists on the parameter value (therefore returns true) and the second one checks for a value that does not exist in the parameter value and therefore returns false.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/stfArrayContainsOutput.png&#34; width=&#34;670&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the last part, you tried a few examples of STF already. At a high level, you can classify the STF into two categories &amp;ndash; compile-time and run-time. The examples that we have seen so far are compile-time functions. The compile-time functions evaluate before the deployment begins. The run-time functions evaluate once the deployment begins. One example of a run-time function is the &lt;code&gt;listKeys()&lt;/code&gt; function. Using this template function, here is how you retrieve the storage account key for a given storage account.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    &lt;span style=&#34;color:#f00&#34;&gt;listKeys(&lt;/span&gt;
        &lt;span style=&#34;color:#f00&#34;&gt;resourceId(&lt;/span&gt;
            &lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;Microsoft.Storage/storageAccounts&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;concat(&lt;/span&gt;
                &lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;sacct&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;uniqueString(&lt;/span&gt;
                    &lt;span style=&#34;color:#f00&#34;&gt;resourceGroup().id&lt;/span&gt;
                &lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2019-06-01&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;).keys&lt;/span&gt;[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f00&#34;&gt;.value&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, two arguments are passed to the &lt;code&gt;listKeys()&lt;/code&gt; &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions-resource#list&#34;&gt;function&lt;/a&gt;. First one is the &lt;code&gt;resourceId()&lt;/code&gt; &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions-resource#resourceid&#34;&gt;function&lt;/a&gt; to retrieve the unique ID of the storage account that you provisioned. Second parameter is the API version used to deploy the resource. The final part of the expression &lt;code&gt;.keys[0].value&lt;/code&gt; is the array reference to retrieve the value of primary storage key.&lt;/p&gt;
&lt;p&gt;Here is another example of a run-time function. This is called &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions-resource#reference&#34;&gt;reference()&lt;/a&gt;. This function returns the runtime state of a resource.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    &lt;span style=&#34;color:#f00&#34;&gt;reference(&lt;/span&gt;
        &lt;span style=&#34;color:#f00&#34;&gt;concat(&amp;#39;Microsoft.Storage/storageAccounts/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;concat(&lt;/span&gt;
                &lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;sacct&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;uniqueString(resourceGroup().id)&lt;/span&gt;
            &lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2019-06-01&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;).primaryEndpoints.blob&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to the expression that used &lt;code&gt;listKeys()&lt;/code&gt; function, this one too uses a prefix string, a unique string generated using the resource group ID, and the API version string to retrieve the storage blob URI. This blob URI is retrieved using &lt;code&gt;.primaryEndpoints.blob&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the above example, &lt;code&gt;concat(&#39;sacct&#39;, &#39;-&#39;, uniqueString(resourceGroup().id))&lt;/code&gt; sub-expression is used to generate a unique name for the storage account. What if you want to use a similar expression for multiple resource names in the ARM template to ensure that your ARM template uses more known configuration? One way to do that is to repeat the expression multiple times with different prefixes as needed. The second and a better way is to create and use an user-defined functions (UDF) where you get the ability to parameterize expressions and reuse the same in your ARM templates like you use built-in functions.&lt;/p&gt;
&lt;h2 id=&#34;user-defined-functions&#34;&gt;User-defined functions&lt;/h2&gt;
&lt;p&gt;With user-defined functions (UDF), you can create your own functions by combining multiple standard template functions into a complicated expression. The following syntax describes how the user-defined functions can be added to ARM templates.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=userDefinedFunction.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;A UDF must be a part of a namespace to avoid name conflicts with STF. All your expressions get added to the members object. You need to give your custom function a unique name within the namespace and add parameters and output as needed. Here is a quick example that wraps the above expression into a custom function.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=userDefinedFunctionExample.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the above example, one parameters &amp;ndash; prefix &amp;ndash; allows you to use the expression with varying input. The output value within the UDF is set to the transformed expression that will use the parameter and return a unique resource name. How do you use this UDF in your template? Simple, like any other built-in function in an expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
	&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;virtualNetworkAddressPrefix&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/16&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;virtualNetworkName&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[armin30.uniqueResourceName(&amp;#39;vnet&amp;#39;)]&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;virtualNetworkSubnetName&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[armin30.uniqueResourceName(&amp;#39;subnet&amp;#39;)]&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[armin30.uniqueResourceName(&amp;#39;sacct&amp;#39;)]&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;virtualNetworkSubnetAddressPrefix&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.1.0/24&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A UDF is accessed using the &lt;em&gt;namespace.functionName&lt;/em&gt; notation with a list of comma-separated parameter values. This example assign output value from &lt;code&gt;armin30.uniqueResourceName()&lt;/code&gt; function to variables. You can use the UDF directly in resource properties as well.&lt;/p&gt;
&lt;h3 id=&#34;limitations-of-udf&#34;&gt;Limitations of UDF&lt;/h3&gt;
&lt;p&gt;There are few limitations when using user-defined functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You cannot access parameters and variables defined in the ARM template&amp;rsquo;s parameters and variables elements. You can only access parameters defined within the user-defined function and these UDF parameters cannot have any default values.&lt;/li&gt;
&lt;li&gt;There is no nested UDF support.&lt;/li&gt;
&lt;li&gt;The expressions that use reference and list* methods cannot be used within UDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, here is the updated template for the scenario you are working on.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=d6userDefinedFuncTemplate.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can deploy this template by clicking on the deploy to Azure button.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2f1b1f190cab195fb0f7562a7ecc7d3e02886953fd%2fd6userDefinedFuncTemplate.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;Once the deployment is complete, you can see the deployed resources in the portal or in the console if you used Azure CLI. Note the random strings with the prefixes that you specified as input to the &lt;code&gt;armin30.uniqueResourceName&lt;/code&gt; UDF.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d6templateDeploy.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;With the help of parameters, variables, expressions, and user-defined functions you get the ability to simplify the ARM template authoring process and make the templates more readable. There are many standard template functions that help you simplify the ARM template resource definitions. When you have to repeat and reuse some of the complicated expressions in an ARM template, you can wrap the expression as a user-defined function and use the UDF in the resource definition. In the next part of the series, you will learn how to use secrets in an ARM template.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Resource Manager - Using expressions and variables in ARM templates</title>
      <link>https://ravichaganti.com/blog/azure-resource-manager-in-30-days-using-expressions-and-variables-in-arm-templates/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-resource-manager-in-30-days-using-expressions-and-variables-in-arm-templates/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/templatearchitecture.png&#34; width=&#34;760&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;So far in &lt;a href=&#34;https://ravichaganti.com/series/azure-resource-manager-in-30-days/&#34;&gt;this series&lt;/a&gt;, you learned how to use VS Code and ARM Tools extension to get started with the ARM template development, how to perform a subscription scoped deployment to create a resource group and then looked at resource group scoped deployment to create a storage account and a virtual network resources. You learned about parameterizing the ARM template so that it becomes reusable. Equipped with that knowledge, you can now start digging into expressions and variables in the ARM templates.&lt;/p&gt;
&lt;h2 id=&#34;expressions&#34;&gt;Expressions&lt;/h2&gt;
&lt;p&gt;You have already used expressions in the template you built in the last part. For example, &lt;code&gt;[parameters(&#39;storageAccountSku&#39;)]&lt;/code&gt; is an expression that you used. Within an ARM template, expressions are a way to dynamically determine values of resource properties and other artifacts. Expressions are invoked within square brackets and are calculated at deployment time. When creating an expression, you can combine multiple &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions&#34;&gt;template functions&lt;/a&gt;. For example, in the previous template that provisioned a storage account and a virtual network, the storage account name has to be unique. Now, either you can let the end user figure out a unique string for this resource property by trial and error or you can use an expression such as &lt;code&gt;[concat(&#39;sacct&#39;, &#39;-&#39;, uniqueString(resourceGroup().id))]&lt;/code&gt; to generate a random string to use as a name for the storage account you want provision. Remember that, within the same resource group, the value generated by this expression will always be same since the seed to the &lt;code&gt;uniqueString()&lt;/code&gt; function will always be same. So, when you deploy a template that uses this expression multiple times, no action will be taken if the storage account already exists with the name.&lt;/p&gt;
&lt;p&gt;There are several categories of standard (built-in) template functions that you can use to simplify template authoring and deployment experience. These functions include comparison and logical functions, numeric and string functions, array, object, and date functions, and resource and deployment value functions. For example, the &lt;code&gt;concat()&lt;/code&gt; function that you saw in the earlier example is a part of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions-string&#34;&gt;string functions&lt;/a&gt; category. It takes multiple strings and returns a concatenated string. A &lt;code&gt;concat()&lt;/code&gt; function exists in the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions-array&#34;&gt;array functions&lt;/a&gt; category as well and works on arrays and returns a concatenated array. The &lt;code&gt;uniqueString()&lt;/code&gt; function is in the string functions category and generates a hash based on the value passed as its argument. The &lt;code&gt;resourceGroup()&lt;/code&gt; function is a part of the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions-resource&#34;&gt;resource functions&lt;/a&gt; category and returns the properties of the resource group within which the deployment is in progress.&lt;/p&gt;
&lt;p&gt;Let us see another example of using expressions in ARM templates. In the template that was develope d in the last part, the &lt;code&gt;storageAccountName&lt;/code&gt; parameter was used the capture the input for the name property of the storage account resource. In this parameter definition, &lt;code&gt;minLength&lt;/code&gt; and &lt;code&gt;maxLength&lt;/code&gt; elements were used to ensure the string length is between 3 and 24 characters. However, the name of the storage account name should always be in lower case. There is no element in parameter definition to describe this validation. This can be achieved by using the &lt;code&gt;toLower()&lt;/code&gt; function from the string functions category to transform the user provided input value into a lower case string. Here is how it can be done.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=storageResourceWithToLower.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;These are just a few examples of how you can use standard template functions in ARM templates as a part of different expressions. I recommend that you read through the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions&#34;&gt;documentation&lt;/a&gt; to understand how to use these functions in an expression and explore how you can simplify the template deployment experience. But, how do you evaluate an expression that you want to use in an ARM template?&lt;/p&gt;
&lt;h3 id=&#34;evaluating-expressions&#34;&gt;Evaluating Expressions&lt;/h3&gt;
&lt;p&gt;Waiting for a real resource template deployment may be not be a great idea and a way to evaluate expression output without initiating a real deployment would be beneficial. This is totally possible with the &lt;code&gt;outputs&lt;/code&gt; element in an ARM template.&lt;/p&gt;
&lt;p&gt;As you learned in the template basics, the &lt;code&gt;outputs&lt;/code&gt; element in a template is used to return values from after a deployment is complete. This is especially useful in automated deployment processes. Except for a few that are runtime functions such as &lt;code&gt;reference()&lt;/code&gt;, this method can be used with most of the standard template functions and expressions that you create. In general, the following snippet shows the syntax of &lt;code&gt;outputs&lt;/code&gt; element.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=outputSyntax.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is a simplified syntax of &lt;code&gt;outputs&lt;/code&gt; element. There are other properties you can use but for now, this is good enough.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Element Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Is Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;output-name&lt;/td&gt;
&lt;td&gt;Name of the output value&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;type of the output value&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;value&lt;/td&gt;
&lt;td&gt;Expression that should be evaluated and returned as output value&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To try this method of using &lt;code&gt;outputs&lt;/code&gt; element , you can create an ARM template with no resource definitions as shown below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=outputDemo.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the outputs element definition, the name of the output value has been set to &lt;code&gt;lowercaseStorageAccountName&lt;/code&gt; and the output value is set to &lt;code&gt;[toLower(parameters(&#39;StorageAccountName&#39;))]&lt;/code&gt;. Although there is just one output from this example template, there can be any number of outputs from a given ARM template. The above ARM template can be deployed using of the known deployment tools to see the value the expression evaluates to. Let us see an example using Azure CLI.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=deployForEvalOutput.azcli&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the command above, inline parameter specification has been used and the value for the &lt;code&gt;storageAccountName&lt;/code&gt; has been set to a string containing mixed case characters. The expression used in the output value element should return this string with all characters in lower case.&lt;/p&gt;
&lt;p&gt;When you deploy using Azure CLI or Azure PowerShell, the command output contains the deployment output as well when the template deployment completes successfully. The default output format in Azure CLI is JSON. So, when the command completes successfully, you will see the JSON string returned to the command console.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/outputEvalExprDemo.png&#34; width=&#34;670&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;This JSON output can be queried using &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/query-azure-cli?view=azure-cli-latest&#34;&gt;JMESPath&lt;/a&gt;. All you have to do is append &lt;code&gt;--query properties.outputs.&amp;lt;output_value_name&amp;gt;.value&lt;/code&gt; to the above Azure CLI deployment command.&lt;/p&gt;
&lt;p&gt;Output values from the template&amp;rsquo;s &lt;code&gt;outputs&lt;/code&gt; element can be seen in the Azure portal as well if you navigate to the resource group and check the deployment history.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/portalOutput.png&#34; width=&#34;670&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;Variables are a way to help reduce complexity in an ARM template. In the template that deployed a storage account and a virtual network, we used seven parameters to collect the input required for the template deployment. This provides flexibility in choosing desired values for the deployment. While this flexibility is good, you may want to use fixed address prefixes for virtual network and subnets that you deploy as a part of the template. One way to achieve this is to hard code these values in resource properties. Hard coding values results in repetition and any unintentional mistakes that lead to errors in deployment. Also, there may be certain resource property values that you want to auto-generate based on the value of a specific parameter. This is where variables in ARM template syntax play a role.&lt;/p&gt;
&lt;p&gt;Here is the simplified syntax for adding variables in an ARM template.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=variableSyntax.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;Simple variable declaration is straightforward. You just need to add a key-value pair for the variable name and it&amp;rsquo;s value. Here is how you may simplify the earlier template.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=variablesForStorageAndVNet.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;This variable definition eliminates the need for three parameters - &lt;code&gt;virtualNetworkAddressPrefix&lt;/code&gt;, &lt;code&gt;virtualNetworkSubnetName&lt;/code&gt;, and &lt;code&gt;virtualNetworkSubnetAddressPrefix&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;accessing-variable-values&#34;&gt;Accessing variable values&lt;/h3&gt;
&lt;p&gt;Within the resource definitions, you can access the values of variables using the &lt;code&gt;variables()&lt;/code&gt; function in an expression. Here is the updated template that uses variables for a few resource properties.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=d5RgScopedStorageVNetTemplateFinal.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can deploy this template by clicking on the deploy to Azure button.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2fd5RgScopedStorageVNetTemplateFinal.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;In the portal template deployment experience, you will see that the number of input parameters have reduced but the final result stays same. You can try deploying this template via the Azure CLI using the same set of commands you tried in the last part.&lt;/p&gt;
&lt;h3 id=&#34;free-form-vs-known-configuration&#34;&gt;Free-form vs known configuration&lt;/h3&gt;
&lt;p&gt;So far in this series, you have learned about are parameters, variables, and learn to use them in ARM templates. Parameters enable the flexibility to gather input from user deploying the template. You can parameterize a complete template and let the user provide every value needed for the deployment as an input parameter. This is called &lt;strong&gt;free-form configuration&lt;/strong&gt;. However, using free-form configuration is not always scalable. The number of parameters that a user need to input might be overwhelming. Also, you don’t want your end user deploying this template to mess-up with critical resource properties such as virtual network and subnet address prefixes. This can have negative effects on the overall infrastructure deployment. As you have seen in the updated template, you might always want to use fixed values for certain parameters where there is scope for errors. Some of this cannot be controlled unless you use &lt;strong&gt;known configurations&lt;/strong&gt;. Known configurations help standardize resource configurations. Use variables in the template for resource settings that require no user input or you need control over. By using variables, you can simply change the value of the variable if at all you need to modify the template instead of trying to find where all the value is used.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Expressions syntax in ARM templates enable combining multiple standard functions provided by the ARM template language. Variables when combined with expression syntax can simplify the overall template authoring experience. Choosing between free-form vs known configurations for the ARM template, you can create a template that is both flexible and implements known configurations to control how the deployed infrastructure gets configured. With this knowledge around parameters, variables, and expressions, in the next part of this series, you will learn more about some of the standard functions and learn how to implement user-defined functions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Resource Manager - Adding parameters to ARM templates</title>
      <link>https://ravichaganti.com/blog/azure-resource-manager-adding-parameters-to-arm-templates/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-resource-manager-adding-parameters-to-arm-templates/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/templatearchitecture.png&#34; width=&#34;760&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the &lt;a href=&#34;https://ravichaganti.com/blog/azure-resource-manager-arm-template-basics/&#34;&gt;last part&lt;/a&gt; of &lt;a href=&#34;https://ravichaganti.com/series/azure-resource-manager-in-30-days/&#34;&gt;this series&lt;/a&gt;, you learned the template syntax and authored an ARM template that provisions the resource group needed for the above architecture. This deployment was performed at the subscription level using Azure CLI. In this part, you will create another template for performing additional resource &amp;ndash; storage account and virtual network &amp;ndash; provisioning at the resource group level. You will, then, parameterize this template to understand how to add parameters to ARM templates.&lt;/p&gt;
&lt;h2 id=&#34;resource-group-deployment&#34;&gt;Resource group deployment&lt;/h2&gt;
&lt;p&gt;Deployments scoped at the resource group level are the most common deployments. In this method, you provision resources within a resource group in your subscription. Within the VS Code editor, typing &lt;code&gt;arm!&lt;/code&gt; brings up the snippet for a resource group scoped ARM template.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=rgScopedDeploymentSkeleton.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can see in the above snippet that the &lt;code&gt;$schema&lt;/code&gt; value is different from what was used for a subscription scoped deployment. Within this template, you can either right-click in the editor window and select Insert Item in the context menu and select Resource or click &lt;code&gt;+&lt;/code&gt; next to resources in the ARM template outline to add any additional resources you need.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d3-insertresource.png&#34; width=&#34;760&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Either of these options will present you with a list of available resource types. To add a storage account resource type, select &lt;code&gt;Storage Account&lt;/code&gt; from the list of resources. You may go ahead and add a virtual network resource as well. This is how the updated template will look like.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=rgScopedDeployment.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;As you see here, the insert resources method adds the resource definitions with pre-defined default values. You may not be able deploy this as-is since some of the resource names (storage account especially) might be taken already. You may enter some unique names for the resources and try template deployment using the deploy to Azure button below.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2frgScopedDeployment.azrm.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;When this template opens in the Azure portal, you will be prompted to select either an existing resource group or create a new resource group. Since you already created a resource group in the last part of this series, you can select the same. For the resources (storage account and virtual network), the selected resource group&amp;rsquo;s location will be used. This is specified in the template using the built-in &lt;code&gt;resourceGroup()&lt;/code&gt; function. You will learn more about these functions and expressions in a later part of the series. For now, just remember that &lt;code&gt;resourceGroup().location&lt;/code&gt; will give the location of the resource group selected for the resources&amp;rsquo; deployment.&lt;/p&gt;
&lt;h2 id=&#34;parameters-in-arm-templates&#34;&gt;Parameters in ARM templates&lt;/h2&gt;
&lt;p&gt;The template that you just built provides a good foundation to start experimenting with parameters in an ARM template. In the template above, there are several resource properties that can be parameterized so that the template becomes reusable between multiple deployments by providing the necessary input parameters. So, if you have to identify a few parameters within each resource, you may come with a list similar to the one below.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;Parameter Names&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;storageAccounts&lt;/td&gt;
&lt;td&gt;storageAccountName, storageAccountSku, storageAccountTier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;virtualNetworks&lt;/td&gt;
&lt;td&gt;virtualNetworkName, virtualNetworkAddressPrefix, VirtualNetworkSubnetName, virtualNetworkSubnetAddressPrefix&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With this list handy, take a look at the syntax for adding parameters.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=parameterSyntax.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;Within all possible elements described above for defining a parameter, only name and type are mandatory. Rest all elements provide a way to control the input values. For the type element, the allowed values are string, int, bool, securestring, object, secureObject, and array. The type of a parameter depends on the resource property that we choose to parameterize.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;allowedValues&lt;/code&gt; element in parameters can be used to define a set of valid values for the selected resource property. For example, Azure supports two type of storage tiers &amp;ndash; standard and premium &amp;ndash; for any storage SKU. Any other value for this property will be invalid. When an end user does not select any value out of the allowed values for a property, you can default to a known value using the &lt;code&gt;defaultValue&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;maxLength&lt;/code&gt; and &lt;code&gt;minLength&lt;/code&gt; are used for string data types. Within the above template, these elements can be used for the &lt;code&gt;name&lt;/code&gt; property of the resources to define the minimum and maximum allowed length of the string input. For example, an Azure storage account name should be between 3 to 24 characters in length. These elements can be used with array type as well.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;minValue&lt;/code&gt; and &lt;code&gt;maxValue&lt;/code&gt; elements are used for parameters of int type. In the parameter selection that we did, there is no need for using these elements yet. You will see the use of these elements in a later part of this series.&lt;/p&gt;
&lt;p&gt;With this understanding, you can define the parameters for this template as below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=parametersford4template.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;The parameter definitions above provide a clear idea about how to use the &lt;code&gt;allowedValues&lt;/code&gt; and &lt;code&gt;defaultValue&lt;/code&gt; elements in a parameter definition. Now, how do you use these parameter values in the template for resource properties?&lt;/p&gt;
&lt;h3 id=&#34;using-parameter-values&#34;&gt;Using parameter values&lt;/h3&gt;
&lt;p&gt;The built-in &lt;code&gt;parameters()&lt;/code&gt; function can be used to retrieve the value provided by the end user as a part of template deployment. This function takes the parameter name as the argument and retrieves the value. For example, &lt;code&gt;[parameters(&#39;storageAccountSku&#39;)]&lt;/code&gt;. You may now update the template above to change the static values to use the &lt;code&gt;parameters()&lt;/code&gt; function.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=d4RgScopedStorageVNetTemplateFinal.azrm.json&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;deploying-parameterized-templates&#34;&gt;Deploying parameterized templates&lt;/h3&gt;
&lt;p&gt;You can try deploying the parameterized template by clicking on the below deploy to Azure button.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2fd4RgScopedStorageVNetTemplateFinal.azrm.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;This will bring up the input blade for this template deployment.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d4-finalportaldeployment.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Take a look at how the array value for the virtual network address prefix is provided. The &lt;code&gt;*&lt;/code&gt; next to a parameter name indicates a mandatory parameter or a parameter that has no default value. If you hover the &lt;code&gt;!&lt;/code&gt; icon next to the parameter name to see (balloon tip) what the parameter is about. This text is you added in the parameter &lt;code&gt;metadata&lt;/code&gt; element as &lt;code&gt;description&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The parameter &amp;lsquo;Virtual Network Address Prefix&amp;rsquo; accepts values of array type and it can be seen from the example above how array values are provided. The array values must be enclosed in square brackets.&lt;/p&gt;
&lt;p&gt;Now that you have tried the portal experience of deploying templates, take a look at how you can do that at the command line using Azure CLI. With Azure CLI, there are many ways of providing template parameter input. Inline parameter values is one such method.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=d4-deployTemplateInlineParam.azcli&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the above command, a resource group for the template deployment gets created first. The &lt;code&gt;az deployment group create&lt;/code&gt; command performs the template deployment by using the template URL as the argument to &lt;code&gt;--template-uri&lt;/code&gt; parameter and &lt;code&gt;--parameters&lt;/code&gt; is used to supply all template input parameter values. The URL specified as argument to the &lt;code&gt;--template-uri&lt;/code&gt; parameter must be accessible from Azure. As an alternate to the &lt;code&gt;--template-uri&lt;/code&gt; parameter, you can use the &lt;code&gt;--template-file&lt;/code&gt; to specify a local path to the template JSON file.&lt;/p&gt;
&lt;p&gt;As you see in the above Azure CLI command, all mandatory parameters (parameters with no default values) should be provided as key-value pairs separated by space. This can be quite daunting and error-prone if you have a lot of template parameters. You can also provide a JSON string as an argument to &lt;code&gt;--parameters&lt;/code&gt;. Also, when using Azure CLI, you must know the names of the parameters to be supplied as input. This is where the parameter files will come in very handy. You can either create one manually or use ARM Tools VS Code extension to generate one for you.&lt;/p&gt;
&lt;p&gt;To use VS Code extension to generate the parameter file, right-click anywhere in the template editor window and click &lt;em&gt;Select/Create Parameter File&lt;/em&gt;. In the command window, select &lt;em&gt;New&lt;/em&gt; and then &lt;em&gt;All Parameters&lt;/em&gt;. This will prompt for a name and location for the parameter JSON file. Here is how the generated parameter JSON will look like.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=d4-paramJson.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can fill-in the required values and use the following Azure CLI command to start the deployment.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=d4-deployTemplateWithParamJson.azcli&#34;&gt;&lt;/script&gt;

&lt;p&gt;This command specification is way simpler than using inline parameters or JSON string.&lt;/p&gt;
&lt;p&gt;Apart from the inline key-value pair specification, the @d4-paramJson.json (@{path}) specification references a file in the local folder path. This is most preferred in case of CI &amp;amp; CD of ARM templates in which the parameter JSON file can be auto-generated during build processes. Also, you can use a mix of inline parameters and parameter JSON as well. You can explore more such examples using &lt;code&gt;az deployment group create --help&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this part, you looked at how to add resources to an ARM template and learned how to parameterize the template for reusability. Parameters in ARM templates support multiple data types and learned how to use string and array data types in this article. You will learn about using other data types in the later parts of this series. You learned how to use Azure portal and Azure CLI for template deployments. You looked at using inline parameter key-value specification and looked at creating and using parameter JSON files as well. In the next part, you will learn how to build expressions and variables in ARM templates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Resource Manager - ARM template basics</title>
      <link>https://ravichaganti.com/blog/azure-resource-manager-arm-template-basics/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-resource-manager-arm-template-basics/</guid>
      <description>&lt;p&gt;In the last two parts of &lt;a href=&#34;https://ravichaganti.com/series/azure-resource-manager-in-30-days/&#34;&gt;the series&lt;/a&gt;, you have seen a brief introduction to Azure Resource Manager and the services that complement ARM to extend its functionality or support the services offered by ARM. You also looked at an overview of ARM templates and the tools available to design, author, and deploy these templates.&lt;/p&gt;
&lt;p&gt;Starting this part of the series for the next few days, you will start learning about authoring ARM templates right from the basics and to the advanced template syntax and techniques with a goal to build an ARM template that helps provision the following architecture.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/templatearchitecture.png&#34; width=&#34;760&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;This is not a complex architecture but gives you enough scope to implement what you learn through this series of articles. Apart from this architecture, I recommend that you start looking at the &lt;a href=&#34;https://github.com/Azure/AzureStack-QuickStart-Templates&#34;&gt;quickstart templates repository&lt;/a&gt; and read the templates there to understand the syntax and how some of those templates are written and implement best practices. Throughout this series, you will see examples from quickstart templates repository to explain best practices in template authoring.&lt;/p&gt;
&lt;p&gt;I strongly recommend using VS Code for ARM template authoring and the next section provides a quick overview of this before you dive into ARM template basics.&lt;/p&gt;
&lt;h2 id=&#34;vs-code-and-arm-tools-extension&#34;&gt;VS Code and ARM tools extension&lt;/h2&gt;
&lt;p&gt;If you have already installed VS Code and the ARM tools extension, you may want to customize the extension settings for improved authoring experience and ease. By default, VS Code editor will auto-detect template files if the JSON or JSONC file contains the appropriate schema and changes the editor language to Azure Resource Manager template. You can see this in the status bar of the VS Code editor.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d3-editorarm.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;However, this method requires that you at least have a value for the $schema element. You can also use file association setting to detect a file in the editor as an ARM template. This can be done by adding the following in the extension settings. With this setting in place, you can even create an empty file with an extension azrm.json and the editor auto-detects and sets the editor language as ARM template.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=azrmtemplatefileassociation.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;Once the editor language gets set to Azure Resource Manager Template, you can access over 70 snippets that come with the extension. For example, typing arm in the editor window, brings up the snippets that you can select and insert into the editor.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d3-armsnippets.png&#34; width=&#34;600&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Throughout this series, you will see different features of this VS Code extension. Now, let us get started with the basics of the ARM template language.&lt;/p&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;p&gt;As you have seen already, an ARM template is JSON file with additional template functions and expressions that the Azure Resource Manager understands. Here is a basic skeleton structure of an ARM template.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=skeleton.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the following sections, you will see quick overview of the elements in an ARM template.&lt;/p&gt;
&lt;h3 id=&#34;schema&#34;&gt;$schema&lt;/h3&gt;
&lt;p&gt;This element identifies the version of template language to be used. The value of this element changes based on the type of editor and the scope of the deployment. There are four different scopes at which you can deploy an ARM template.&lt;/p&gt;
&lt;h4 id=&#34;subscription-scope&#34;&gt;Subscription Scope&lt;/h4&gt;
&lt;p&gt;When you need to deploy resources at the subscription level, for example create resource groups or provision policies and resource-based access controls, you need to use subscription level deployments. For this type of deployments, the value of &lt;code&gt;$schema&lt;/code&gt; should be &lt;code&gt;https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;management-group-scope&#34;&gt;Management Group Scope&lt;/h4&gt;
&lt;p&gt;Management groups in Azure are used to organize subscriptions for better governance. When you need to provision resources such as policies at the management group level, you need to the use the management group level schema. The value of this element for management group level deployments should be &lt;code&gt;https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;tenant-scope&#34;&gt;Tenant Scope&lt;/h4&gt;
&lt;p&gt;For provisioning resources across multiple Azure AD tenants, you need the tenant scoped deployments. For tenant level deployments the value of &lt;code&gt;$schema&lt;/code&gt; element should be set to &lt;code&gt;https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;resource-group-scope&#34;&gt;Resource Group Scope&lt;/h4&gt;
&lt;p&gt;This is the typical type of deployment you will normally come across. When using this deployment scope, you describe resources that need to be deployed within a given resource group in a subscription. The value of &lt;code&gt;$schema&lt;/code&gt; for this type of deployments in VS Code should be &lt;code&gt;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&lt;/code&gt;. For Visual Studio, this value should be &lt;code&gt;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will learn more about scoped deployments in a later article in this series.&lt;/p&gt;
&lt;h3 id=&#34;contentversion&#34;&gt;ContentVersion&lt;/h3&gt;
&lt;p&gt;This element identifies the version of the template content. This value is required but can be set to anything you want. If you use source control for ARM templates, you can increment the value of this element in your template at every commit. You will learn more about this in a later article discussing CI &amp;amp; CD of ARM templates.&lt;/p&gt;
&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;
&lt;p&gt;This element accepts a set of parameters that act as input to the ARM template deployment using which you can introduce reusability of ARM templates. If you are familiar with any programming language, similar to a function or a method parameters, ARM template parameters too support different data types, valid values, default values, and different other characteristics such as min and max values (for numeric types), and min and max length (for string types). This is not a mandatory element but highly recommended to parameterize the template.&lt;/p&gt;
&lt;h3 id=&#34;functions&#34;&gt;Functions&lt;/h3&gt;
&lt;p&gt;ARM template syntax support built-in functions and expressions. These functions range from comparison functions to numeric, date, string, and so on. In a later update to the ARM template syntax, support for custom user-defined functions was added. You can now define some complex expressions that you want to use in the template as user-defined functions. This is not a mandatory element.&lt;/p&gt;
&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;
&lt;p&gt;Variables, similar to functions, can help reduce the complexity of expressions in the ARM template. This is not a mandatory element. In an ARM template, variables are predominantly inside expressions. Between parameters and variables, you need to always a strike balance (free-form vs known configuration) to create templates are easy to deploy.&lt;/p&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;p&gt;This element is where you define what Azure resource you need to deploy or update. An ARM template must have at least one resource. The type of valid resources supported in a template depends on the value of &lt;code&gt;$schema&lt;/code&gt; element. In the next section, you will see how to author your first ARM template and you will see more about resource specification in an ARM template.&lt;/p&gt;
&lt;h3 id=&#34;outputs&#34;&gt;Outputs&lt;/h3&gt;
&lt;p&gt;Using this element, you can specify the values returned by the template after the deployment is complete. This element is not mandatory. This can be very useful when using nested templates and you will learn more about it soon in this series.&lt;/p&gt;
&lt;h2 id=&#34;first-arm-template&#34;&gt;First ARM template&lt;/h2&gt;
&lt;p&gt;Alright! After that quick overview of the template elements, this section will get you started with your first ARM template. For this purpose, you will perform a subscription scoped deployment to provision a new resource group. Within VS Code, if you want a quick snippet that supports subscription level deployments, you can type &lt;code&gt;arm!s&lt;/code&gt; and press enter. You can now add the following snippet under the resource element.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=resourceGroup.res&#34;&gt;&lt;/script&gt;

&lt;p&gt;A typical resource specification will be very similar to what is shown above. The following table provides an overview of the resource group object properties that you can use in a template.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Is Mandatory?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;This property identifies the type of a resource that you want to provision. For a resource group, this will be &lt;code&gt;Microsoft.Resources/resourceGroups&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;Using this property, you can specify a name for the resource being provisioned.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apiVersion&lt;/td&gt;
&lt;td&gt;This property identifies the API version to be used for provisioning the resource. For a resource group resource, this, at present, should be &lt;code&gt;2020-06-01&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;location&lt;/td&gt;
&lt;td&gt;This property specifies where there resource should be created. Some resources may not be supported in all regions or enabled in your subscription.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;properties&lt;/td&gt;
&lt;td&gt;Specifies additional properties needed for the resource provisioning.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tags&lt;/td&gt;
&lt;td&gt;Specifies a list of tags (key-value pairs) associated with the resource.&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For now, you don&amp;rsquo;t have to worry about the parameters, variables, functions, and outputs in the template. You can simply leave them blank. With the addition of resource group snippet, here is how your first template should look like.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=resourceGroup.azrm.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is ready for deployment. If you want to use Azure portal for template deployments, the subscription level deployment, at present, is available only in the preview portal. The below deploy to Azure button will take you directly to the preview portal.&lt;/p&gt;

    &lt;a href=&#34;https://preview.portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fgist.githubusercontent.com%2frchaganti%2fd7e35878c6687da07ae5fa5dfb7d54c2%2fraw%2fresourceGroup.azrm.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;If you want to perform this deployment using Azure CLI, you can use the below command to perform this subscription level deployment to create the resource group.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have not already done so, you must first authenticate using &lt;code&gt;az login&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=resourceGroupDeploy.azcli&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the above command, do not confuse the &lt;code&gt;--name&lt;/code&gt; and &lt;code&gt;--location&lt;/code&gt; parameters to what you have in the ARM template. These two parameters indicate the name of the deployment and location where the deployment meta data should be stored. The &lt;code&gt;sub&lt;/code&gt; subcommand within az deployment indicates that you are doing a subscription level deployment.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this part of the article, you looked at basics of ARM template syntax, understood different elements in the template and their purpose, saw a quick overview of scoped deployments, and finally performed a subscription level deployment to create a resource group in your subscription and used Azure CLI for this purpose. In this next part of this series, you will learn how to create reusable ARM templates by adding parameters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Hub CLI - An extension to git command-line</title>
      <link>https://ravichaganti.com/blog/github-hub-cli-an-extension-to-git-command-line/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/github-hub-cli-an-extension-to-git-command-line/</guid>
      <description>&lt;p&gt;As I started writing more in markdown and using GitHub pages, my work with git and GitHub increased quite a bit. At times, I find myself fighting with git conflicts and merges. I am not an expert in git command-line and in a complex scenario, I figure my way out looking for some help.&lt;/p&gt;
&lt;p&gt;You may have already seen in my articles that I use &lt;a href=&#34;https://cli.github.com/&#34;&gt;GitHub CLI&lt;/a&gt; a lot to work with my GitHub repositories, pull requests, and issues. I recently started using another CLI tool from GitHub called &lt;a href=&#34;https://hub.github.com/&#34;&gt;hub&lt;/a&gt;. Hub is an extension to git command-line and makes working with GitHub from the command-line a breeze.&lt;/p&gt;
&lt;h2 id=&#34;install-hub-cli&#34;&gt;Install Hub CLI&lt;/h2&gt;
&lt;p&gt;You can download Hub CLI from &lt;a href=&#34;https://github.com/github/hub/releases/&#34;&gt;https://github.com/github/hub/releases/&lt;/a&gt;. I am using Windows OS and therefore I downloaded the 64-bit zip archive package for Windows. Once the download is complete, extract it to a temporary location and run install.bat at the command prompt. If the install is successful, you will see a message that hub.exe installed successfully.&lt;/p&gt;
&lt;p&gt;The hub.exe binary gets copied to &lt;code&gt;%LOCALAPPDATA%\GitHubCLI\Bin&lt;/code&gt;. This gets added to the user &lt;code&gt;path&lt;/code&gt; variable and if you close and reopen the console, you should be able to start using &lt;code&gt;hub&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-repositories&#34;&gt;Create repositories&lt;/h2&gt;
&lt;p&gt;The first thing you may want to do is to indicate https for all hub communication with GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git config --global hub.protocol https
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is done, you can create a GitHub repository.&lt;/p&gt;
&lt;h3 id=&#34;from-an-empty-folder&#34;&gt;From an empty folder&lt;/h3&gt;
&lt;p&gt;You can either create a GitHub repository from an empty folder or from folder that already has your files. Let us look at the first method now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir TestRepo
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cd&lt;/span&gt; TestRepo/
hub init
hub create -poc -d &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Test repository for hub.exe demo&amp;#39;&lt;/span&gt; -h &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;https://www.ravichaganti.com&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;hub init&lt;/code&gt; command is same as &lt;code&gt;git init&lt;/code&gt;. It will initialize a git repository in the empty folder. The &lt;code&gt;hub create&lt;/code&gt; command will create the GitHub repository from the local git repo. The &lt;code&gt;-p&lt;/code&gt; flag indicates that you want to create a private repository, &lt;code&gt;-o&lt;/code&gt; indicates that the newly create repository URL be opened in a browser, and &lt;code&gt;-c&lt;/code&gt; indicates that the created repository URL be copied to clipboard. The &lt;code&gt;-d&lt;/code&gt; and &lt;code&gt;-h&lt;/code&gt; flags should be self-explanatory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hub create&lt;/code&gt; will prompt for your GitHub credentials. A personal access token gets created and will be given limited scopes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once this repository is created, you can add the files to this folder and push upstream to GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;#This is a test repository&amp;#34;&lt;/span&gt; &amp;gt; README
hub add .
hub commit -m &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;initial commit&amp;#34;&lt;/span&gt;
hub push -u origin HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;from-an-existing-folder&#34;&gt;From an existing folder&lt;/h3&gt;
&lt;p&gt;To create a repository from folder from that contains your code, you need to set the location to that folder and run the following commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cd&lt;/span&gt; TestRepo/
hub init
hub add .
hub commit -m &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;New repository from an existing folder&amp;#39;&lt;/span&gt;
hub create
hub push -u origin HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above commands will create a new GitHub repository from an existing folder. The name of the folder gets used as the name of the repository.&lt;/p&gt;
&lt;h2 id=&#34;delete-repositories&#34;&gt;Delete repositories&lt;/h2&gt;
&lt;p&gt;The personal access token that gets created when you first authenticate using the hub CLI. However, this token will not be given the &lt;code&gt;delete_repo&lt;/code&gt; scope permission. Therefore, to be able to delete a repository using hub CLI, you need to &lt;a href=&#34;https://github.com/settings/tokens/&#34;&gt;enable&lt;/a&gt; the &lt;code&gt;delete_repo&lt;/code&gt; scope for the personal access token.&lt;/p&gt;
&lt;p&gt;Once you enable the required scope, you can use the &lt;code&gt;hub delete &amp;lt;repoName&amp;gt;&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag command with this command will skip the prompt.&lt;/p&gt;
&lt;h2 id=&#34;working-with-gists&#34;&gt;Working with gists&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;hub gist&lt;/code&gt; subcommand to work with gists. This command supports listing gists, getting contents of a gist and, creating new gists.&lt;/p&gt;
&lt;h3 id=&#34;show-gists&#34;&gt;Show gists&lt;/h3&gt;
&lt;p&gt;To list gists from your account, you can use the hub gist show command. This requires a mandatory ID parameter which you can obtain from the gist URL from &lt;a href=&#34;https://gists.github.com&#34;&gt;gists.github.com&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hub gist show 54ccde11aa58f7ecd443e6ff3d1cf319
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/hubgistshow.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You can get the contents of a gist by specifying the filename.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hub gist show 54ccde11aa58f7ecd443e6ff3d1cf319 arrays.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/hubgistshowfile.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;h3 id=&#34;create-gists&#34;&gt;Create gists&lt;/h3&gt;
&lt;p&gt;Creating gists can be done using the &lt;code&gt;hub gist create&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;echo Write-Host&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;This is a test gist&amp;#39;&lt;/span&gt; | hub gist create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates a secret gist and the URL gets shown in the output. In this method, the gist gets created as a .txt file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hub gist create test1.ps1 test2.ps1 -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will create the gist and add the files test1.ps1 and test2.ps1 from the local folder. the &lt;code&gt;-c&lt;/code&gt; flag will copy the created gist URL to clipboard.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/hubgistcreate.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You can use the &lt;code&gt;--public&lt;/code&gt; flag to create a public gist and &lt;code&gt;-o&lt;/code&gt; flag to open the newly create gist in a browser.&lt;/p&gt;
&lt;p&gt;This is it for today. In a future article, we will revisit some more hub CLI commands.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Resource Manager - Tools for ARM template design, authoring, and deployment</title>
      <link>https://ravichaganti.com/blog/azure-resource-manager-tools-for-arm-template-design-authoring-and-deployment/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-resource-manager-tools-for-arm-template-design-authoring-and-deployment/</guid>
      <description>&lt;p&gt;The first part of this series of articles on Azure Resource Manager (ARM) provided a quick overview of ARM. You looked a quick introduction to ARM templates as well and looked at an overview of different template deployment methods. In this part of the series, we will look at different methods to author ARM templates and an in-depth look at preferred deployment methods. You can choose any of the methods mentioned here but this series of articles will use one preferred method each for authoring and deploying templates. You will read more about those methods and the reasons behind that choice as well.&lt;/p&gt;
&lt;h2 id=&#34;authoring-tools&#34;&gt;Authoring Tools&lt;/h2&gt;
&lt;p&gt;ARM templates, as mentioned in the last part, are JSON documents. These files can be authored in notepad as well but there are better ways to deal with this task. You will learn about three different methods that I have used and my observations and preferences around these methods. Let us start with the template editor that Azure Portal offers.&lt;/p&gt;
&lt;h3 id=&#34;template-editor-in-azure-portal&#34;&gt;Template Editor in Azure Portal&lt;/h3&gt;
&lt;p&gt;The web-based template editor in the Azure portal is one way but I see it as a better way to edit existing templates than writing one from scratch. You can import a quick start template and use that as a starting point for building your own template.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-templateeditor-qs.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Once you click on &lt;em&gt;Quickstart template&lt;/em&gt; [1], you will be shown a list of templates available from the &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;GitHub repository&lt;/a&gt;. The selected template then gets loaded into the editor for further updates or deployment. I selected the &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates/tree/master/101-vm-simple-windows&#34;&gt;101-vm-simple-windows template&lt;/a&gt; from the list.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-templateeditor-ar.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;At this point, you can click on &lt;em&gt;Add resource&lt;/em&gt; [2] to add another resource to this template. This will bring up a limited set of additional resources you can add to the loaded template. You may select a Windows Virtual Machine.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-templateeditor-arwvm.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;This brings up a few input parameters needed for the new VM instance. Once you enter these values and click OK, the template in the editor window gets updated to add the new VM resource instance. You can review the updated template and click on Save to move ahead to deploy this template.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-templateeditor-deploy.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;At this point, you will presented with a list of input parameters needed for this template deployment. You can enter these values and click &lt;em&gt;Purchase&lt;/em&gt; to start the template validation and deploy it if there are no validation errors. However, it is not always this straightforward. I ended up updating a few language expressions to make this working. If you have tried this option, you will know that the editing experience is limited. It supports adding only a few types of additional resources to the template. And, of course, this isn&amp;rsquo;t a great way to edit or build anything other than a simple template. You need a better way than this web-based editor.&lt;/p&gt;
&lt;h3 id=&#34;visual-studio&#34;&gt;Visual Studio&lt;/h3&gt;
&lt;p&gt;Visual Studio provides a rich integrated development environment (IDE) for developing various types of applications. You can use some of the starter templates packaged along with Visual Studio and build upon those existing templates to add your own resources or start from a blank template and build everything from scratch. For this quick overview of using Visual Studio for template authoring and deployment, I will use Visual Studio 2019 Community Edition.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudiostart.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;When you install and open Visual Studio, you will see different options to get started. Select &lt;em&gt;Create a new project&lt;/em&gt;.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudio.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the next window, filter down the options [1] to Azure and Cloud. In the filtered project templates, select &lt;em&gt;Azure Resource Group&lt;/em&gt; [2] and click &lt;em&gt;Next&lt;/em&gt;.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudioconfigure.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Enter the relevant input for creating a Visual Studio project and click Create.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudiotemplate.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As you see in the above screenshot, you can select one of the canned starter templates or start with a blank template. Since we have learned the basics of template authoring yet, scroll down in the template list and select &lt;em&gt;Windows Virtual Machine&lt;/em&gt; and click OK. This creates the Visual Studio solution.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudiosolution.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Once the solution gets created, click on WindowsVirtualMachine.json [1] in the Solution Explorer pane. This opens the ARM template. On the left-hand side, you can see the JSON Outline [2] pane which shows parameters, variables, and resources defined in the template.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudioresource.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Similar to the Azure Portal template editing experience, you can add resources to this existing template by right-clicking on resources node in the JSON outline and selecting &lt;em&gt;Add New Resource&lt;/em&gt;.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudioaddresource.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;From a set of limited resource types, you can select the resource type you want to add, provide the necessary input parameter values and click Add. The selected resource gets added to the template. You can now customize the template and start a deployment. Before you can deploy the template, you will have to provide the values for the template parameters. This can be done by opening the WindowsVirtualMachine.parameters.json file and enter the relevant values.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudioeditparams.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Before starting a deployment of this template, you can validate the template. For that, right click on the solution name in the Solution Explorer and select &lt;em&gt;Validate&lt;/em&gt;.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudiovalidate.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You will be prompted to enter the password for the admin user to continue validation. If the validation completes with no errors, you can again right-click on the solution name in the Solution Explorer and click Deploy to provision the ARM resources defined in the template.&lt;/p&gt;
&lt;p&gt;Overall experience with authoring templates in Visual Studio is good. This method provides intellisense for different resource properties based on the template schema version.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudiointelli.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;The editor experience in Visual Studio also provides insights into what might be wrong with certain resource property values and / or what might be missing therefore providing better editing experience.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-visualstudioeditorexp.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Overall, compared to the web editor in Azure portal, authoring experience in Visual Studio is way better. However, this is a heavy solution. On a decently configured system, it takes close to a minute to just open Visual Studio. Also, as you may have already seen, the starter templates do not support selecting the Azure quickstart templates from the GitHub repository. Within the template editor, you can auto-complete the resource property names once the resource type property is populated. However, there are no quick snippets that you can use directly. This, for me, kills productivity. There may be a few external marketplace extensions but there is no built-in support.&lt;/p&gt;
&lt;h3 id=&#34;visual-studio--code&#34;&gt;Visual Studio  Code&lt;/h3&gt;
&lt;p&gt;This is my favorite tool. No doubt. There are several reasons as you will read in this section. This tweet poll just endorses my choice.&lt;/p&gt;
&lt;p&gt;tweet 1280058881322872833&lt;/p&gt;
&lt;p&gt;Throughout this series, you will see using VS Code only for authoring ARM templates. Therefore, I will skip any details similar to Visual Studio based template authoring experience you just read earlier. Now, moving on to why I like VS Code for ARM template authoring, first of all, VS Code is an open source, lightweight, and faster alternative to Visual Studio. The extension support within VS Code is unmatchable. With the official Azure extensions and a bunch of other community extensions, you can be super productive when working with the complex ARM template files. Before you get started with authoring an ARM template in VS Code, you must first install the right set of extensions that will help you in the authoring process. The following list is the minimum you will need to follow the articles in this series. Alternatively, you can install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack&#34;&gt;Azure Tools extension pack&lt;/a&gt; that will install following three plus a bunch of other extensions that you may never need.&lt;/p&gt;
&lt;h4 id=&#34;azure-account&#34;&gt;Azure Account&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account&#34;&gt;Azure account&lt;/a&gt; VS Code extension allows you to sign into Azure and access your Azure subscriptions. This is necessary for other Azure extensions to function. Once you install this extension, you get a set of commands to sign in, sign out, select subscriptions, create Azure accounts, and open Azure Cloud Shell within VS Code.&lt;/p&gt;
&lt;h4 id=&#34;azure-resource-manager-arm-tools&#34;&gt;Azure Resource Manager (ARM) Tools&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=msazurermtools.azurerm-vscode-tools&#34;&gt;ARM Tools extension&lt;/a&gt; is a must if you want to be productive authoring ARM templates in VS Code. This extension provides the full ARM template language support and provides a bunch of snippets to speed up the authoring process. You will see and use this extension a lot in the next parts of this article series and therefore I will not spend any more time on this here.&lt;/p&gt;
&lt;h4 id=&#34;azure-policy&#34;&gt;Azure Policy&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=AzurePolicy.azurepolicyextension&#34;&gt;Azure Policy&lt;/a&gt; extension can be used for authoring and managing policy definitions and assignments. This is in preview like a few other VS Code extensions. This is a good one to install as well as you follow this series of articles on Azure Resource Manager and want to try out Azure Policy related examples.&lt;/p&gt;
&lt;h4 id=&#34;azure-cli-tools&#34;&gt;Azure CLI Tools&lt;/h4&gt;
&lt;p&gt;Finally, the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.azurecli&#34;&gt;Azure CLI Tools&lt;/a&gt; extension is what will help you when you author Azure CLI scripts to perform template deployments. This is an optional one if all you need is really the ability to run Azure CLI commands to validate and deploy templates within the VS Code terminal.&lt;/p&gt;
&lt;h2 id=&#34;deployment-tools&#34;&gt;Deployment Tools&lt;/h2&gt;
&lt;p&gt;There are many ways to deploy ARM templates. This includes using Azure portal, Azure CLI, Azure PowerShell cmdlets, ARM REST API, and Python or Go SDK.&lt;/p&gt;
&lt;h3 id=&#34;azure-portal&#34;&gt;Azure Portal&lt;/h3&gt;
&lt;p&gt;Azure Portal allows you to author templates in an online editor or upload templates for deployments or deploy from a collection of quick start templates. We looked at the an example of this in the previous section already. Using the template editor in the Azure portal, you can author and deploy or you can simply upload a template for deployment. Many places online (including the Azure Quickstart template repository), you see a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-to-azure-button&#34;&gt;Deploy to Azure&lt;/a&gt; button that directly takes to you the custom deployment page. You can use this method to deploy a template stored in an online public repository to perform resource group level deployments. Here is how it appears in a webpage.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252FAzure%252Fazure-quickstart-templates%252Fmaster%252F101-storage-account-create%252Fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;Clicking on the above button brings up the custom deployment blade asking for the input parameters needed for the template deployment.&lt;/p&gt;
&lt;h3 id=&#34;azure-cli&#34;&gt;Azure CLI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest&#34;&gt;Azure CLI&lt;/a&gt; offers a method to deploy ARM templates as well. You can use the &lt;code&gt;az deployment&lt;/code&gt; command to perform template deployment.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=deploytemplate.azcli&#34;&gt;&lt;/script&gt;

&lt;p&gt;With the &lt;code&gt;az deployment&lt;/code&gt; command, we can either use an online template file or local file.&lt;/p&gt;
&lt;h3 id=&#34;azure-powershell&#34;&gt;Azure PowerShell&lt;/h3&gt;
&lt;p&gt;Similar to Azure CLI, you can use &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/azure&#34;&gt;Azure PowerShell module&lt;/a&gt; as well to deploy ARM templates.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/d7e35878c6687da07ae5fa5dfb7d54c2.js?file=deploytemplate.ps1&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you do not want to install any of these tools (Az CLI and Az PowerShell module) on your local system, you can always use Azure Cloud Shell within VS Code or launch Cloud Shell in the browser to start using any of these tools. Within this series of articles, you will occasionally see a button like the one displayed below. You can click on it to open &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/cloud-shell/embed-cloud-shell&#34;&gt;Azure Cloud Shell&lt;/a&gt; and start performing command execution.&lt;/p&gt;

    &lt;a href=&#34;https://shell.azure.com/&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://shell.azure.com/images/launchcloudshell.png&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h3 id=&#34;arm-rest-api&#34;&gt;ARM REST API&lt;/h3&gt;
&lt;p&gt;ARM REST API is another way to do template deployment but I consider this a bit low-level and requires good amount of scripting / programming experience.&lt;/p&gt;
&lt;p&gt;For most part of this series of articles on ARM, you will see Azure CLI examples. You will occasionally see a few Azure PowerShell examples. I will write about other deployment methods such as Terraform and Pulumi in a different series of articles. But, before you go there, it is good to get a good grasp of ARM fundamentals. Next few articles in this series of articles will dive into the ARM template authoring and deployment. For now, let us move on to discuss some features and services that work hand in hand with ARM.&lt;/p&gt;
&lt;h2 id=&#34;template-design-and-visualization-tools&#34;&gt;Template Design and visualization Tools&lt;/h2&gt;
&lt;p&gt;As a cloud consultant or architect, you have to create the cloud architecture proposals before you go into the implementation phase. There are a bunch of tools &amp;ndash; online and offline &amp;ndash; that can help you create the architecture diagrams for your cloud infrastructure proposals. In this final section of this post, you will get to know about a few tools that I have used or using to create these architecture diagrams.&lt;/p&gt;
&lt;p&gt;You can always use good old friend Microsoft Visio if you have a license for the product and I trust this a lot and use it. However, I will introduce other tools that you may find useful.&lt;/p&gt;
&lt;h3 id=&#34;arm-template-visualizer&#34;&gt;ARM template visualizer&lt;/h3&gt;
&lt;p&gt;The ARM template visualizer is not really a designer like Visio or any other tool you may see in this section but a good way to visualize an ARM template on a canvas. If you navigate to the ARM quickstart template GitHub repository, you will see a button like what is shown below.&lt;/p&gt;

    &lt;a href=&#34;http://armviz.io/#/?load=https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2f101-1vm-2nics-2subnets-1vnet%2fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/visualizebutton.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;And, when you on click on this button, it takes you to an ARM template visualizer where you can see the template in a visual form.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-armviz.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;By default, the template visualization [1] opens up and you can click on &lt;em&gt;&amp;lt;/&amp;gt;&lt;/em&gt; [2] to see the ARM template JSON. You can edit the contents of the template and return back to the canvas to see the updated visualization. Going to the File menu, you can open a local template or download the template that is visualized.&lt;/p&gt;
&lt;h3 id=&#34;drawio&#34;&gt;Draw.io&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://draw.io&#34;&gt;Draw.io&lt;/a&gt; is a web-based tool that can help you design and save Azure architecture diagrams. There is a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio&#34;&gt;VS Code extension&lt;/a&gt; as well for this and you can now create the diagrams right within VS Code.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-drawio.png&#34; width=&#34;860&#34;/&gt; 
&lt;/figure&gt;

&lt;h3 id=&#34;cloudskew&#34;&gt;Cloudskew&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudskew.com/&#34;&gt;Cloudskew&lt;/a&gt; is another web-based tool that provides a very nice canvas to create cloud architecture diagrams. This is also a free tool that offers several built-in cloud icon support.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armin30/d2-cloudskew.png&#34; width=&#34;860&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;There may be many other tools for ARM template design and visualization that I may not have tried yet. But, like I mentioned earlier, my trusted source is still good old Visio and I continue to use it.&lt;/p&gt;
&lt;p&gt;So far in this article, we looked at different authoring tools, deployment methods, and finally a few options to design and visualize these ARM templates. This should get you equipped with the right tools to get started with template authoring. In the next part of this series, we will look at the basics of template authoring. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Resource Manager - Introduction</title>
      <link>https://ravichaganti.com/blog/azure-resource-manager-introduction/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/azure-resource-manager-introduction/</guid>
      <description>&lt;p&gt;A while ago, I had written a &lt;a href=&#34;https://ravichaganti.com/series/arm-templates/&#34;&gt;series of articles&lt;/a&gt; introducing and diving deep into authoring Azure Resource Manager (ARM) templates. A few things have changed in authoring ARM templates and new features got added in the recent past. I thought it is probably a better time to revisit and do it all over again. At the same time, I thought why just limit to just authoring ARM templates. Over the years, I made notes around ARM and learned quite a bit. Starting today, I will share those notes with you here.&lt;/p&gt;
&lt;p&gt;In this new and improved series, I will start from the very basics and build upon that in each article. The goal is to ensure I create a set of articles that can be referenced in a zero to hero approach to understand ARM and authoring ARM templates. So, without further ado, let us get started and let us start with the very basics.&lt;/p&gt;
&lt;h2 id=&#34;what-is-azure-resource-manager-arm&#34;&gt;What is Azure Resource Manager (ARM)?&lt;/h2&gt;
&lt;p&gt;Microsoft Azure, during the early days, had a management layer called Azure Service Manager (ASM) that was responsible for deploying and managing services. These services that you deployed using ASM were all independent entities without any grouping whatsoever. There was no way to define the dependencies either. So, if you were to implement a three-tier application as a set of cloud services, each service in the three-tier application had to be deployed individually and managed individually. When you have to delete this application, you had to do it by deleting each service individually. The same applies to updates as well. Monitoring and billing was a nightmare. This approach was not scalable. So, during &lt;a href=&#34;https://channel9.msdn.com/Events/Build/2014/2-607&#34;&gt;Build 2014&lt;/a&gt;, Microsoft announced a new deployment and management service called Azure Resource Manager (ARM).&lt;/p&gt;
&lt;p&gt;Here is a super simplified view of the ARM that provides an overview of the constructs.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d1-armarch.png&#34; width=&#34;350&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With ARM, all your &lt;em&gt;&lt;strong&gt;resources&lt;/strong&gt;&lt;/em&gt; having a common life cycle (create/update/delete) can now be grouped together under a &lt;em&gt;&lt;strong&gt;resource group&lt;/strong&gt;&lt;/em&gt; and their life cycle management can be done together. A resource group becomes the unit of management. Each resource in Azure is supplied by a service known as a &lt;em&gt;&lt;strong&gt;resource provider&lt;/strong&gt;&lt;/em&gt;. The resources in Azure can be deployed in many ways but the focus of this series will be around the declarative &lt;em&gt;&lt;strong&gt;deployment templates&lt;/strong&gt;&lt;/em&gt; through which you can provision the resources in a consistent and idempotent manner.&lt;/p&gt;
&lt;p&gt;Let us dig a bit into the terminology you read in the above paragraph.&lt;/p&gt;
&lt;h2 id=&#34;azure-resources&#34;&gt;Azure Resources&lt;/h2&gt;
&lt;p&gt;Resources are what you provision in Azure cloud. For example, as shown in the above image, web apps, virtual machines, databases, and so on. Each resource will have certain properties that you can configure. What resources you can provision depends on what is allowed and / or enabled in your subscription. We will look at this in a later article.&lt;/p&gt;
&lt;h2 id=&#34;azure-resource-groups&#34;&gt;Azure Resource Groups&lt;/h2&gt;
&lt;p&gt;Resource group is a container for all resources that share a common life cycle. A resource should always exist in a resource group and can exist only in one group. It is not necessary that resources that have inter-dependencies are provisioned in the same resource group. These resources within a resource group can exist in different regions too. Instead, the life cycle of the resources is used as a way to group the resources together.&lt;/p&gt;
&lt;h2 id=&#34;azure-resource-providers&#34;&gt;Azure Resource Providers&lt;/h2&gt;
&lt;p&gt;The resource providers enable the resource and implement the management of the resources. Each resource that you can provision in Azure will have an associated resource provider. ARM binds all this together to provide a single management pane irrespective of what type of resource you are provisioning.&lt;/p&gt;
&lt;p&gt;There are several methods to interact with ARM for all your resource creation and management needs. These methods include Azure PowerShell module, Azure CLI, Azure SDKs for Golang, Python, and other languages. You can, of course, use the REST API directly to provision and manage resources. Through all these methods, you basically use individual commands or write scripts or you own applications to provision and manage resources. This approach is more imperative in nature. You write a script to implement what you need and at the same time you define how that needs to be done. In an imperative method, you perform checks to see if the resource that you are trying to provision already exists or not and provision only if it does not exist. You perform all error handling yourself in the imperative approach. And, if you were to create a lot of resources that do not necessarily depend on each other, you can write some parallel jobs to perform simultaneous execution of resource creation. But, the onus is on you to write this code and make sure it works.&lt;/p&gt;
&lt;h2 id=&#34;azure-resource-manager-templates&#34;&gt;Azure Resource Manager Templates&lt;/h2&gt;
&lt;p&gt;ARM templates help eliminate the need for the tedious and error-prone development of automation scripts using any of the methods you read about earlier. These templates are JSON files that provide a declarative syntax to provision Azure resources. Using the &lt;strong&gt;declarative&lt;/strong&gt; syntax of ARM templates, you define what infrastructure you need to provision and not how. With the increasing focus on Agile infrastructure practices and DevOps, this declarative template becomes a part of your application code and lives in the same source control repositories as your application. Any changes to the infrastructure configuration go through the same source control and application development procedures such as automation validations, continuous integration and delivery / deployment. This is what we describe as Infrastructure as Code (IaC).&lt;/p&gt;
&lt;p&gt;The ARM templates also offer a way to repeatedly deploy your infrastructure in Azure cloud. This is done in an &lt;strong&gt;idempotent&lt;/strong&gt; way. Idempotency means that the result of a provisioning task (state of the resources defined in the template) would be same irrespective of how many times you run the task.&lt;/p&gt;
&lt;p&gt;With ARM templates, unlike imperative scripting, you don&amp;rsquo;t have to worry about simultaneous resource creation or resource provisioning dependencies or error handling. ARM can infer these dependencies from what is defined in the template and also perform parallel execution when possible. This ensures &lt;strong&gt;reliable&lt;/strong&gt; deployment of resources defined in the template.&lt;/p&gt;
&lt;p&gt;In summary, &lt;em&gt;&lt;strong&gt;ARM templates offer a declarative method to provision your infrastructure resources in a reliable and idempotent manner&lt;/strong&gt;&lt;/em&gt;. There are several other aspects of ARM templates such as validation, extensions, and modularity / composability. You will read more about these characteristics in the upcoming parts of this series with relevant examples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apart from ARM templates, there are 3rd party providers such as &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/developer/terraform/overview#:~:text=%20Terraform%20with%20Azure%20%201%20Automate%20infrastructure,configuring%20it%20to%20use%20Azure.%20%20More%20&#34;&gt;Terraform&lt;/a&gt; and &lt;a href=&#34;https://www.pulumi.com/azure/&#34;&gt;Pulumi&lt;/a&gt; for provisioning Azure infrastructure. These methods provide the same characteristics as ARM templates. Each of these methods have their pros and cons. This series of articles will only use ARM templates as a way to provision infrastructure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are interested in exploring what ARM templates look like or looking for a quick start for a specific resource type or scenario, you may look up &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;Azure Quickstart templates GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Writing and reading ARM templates can be very complex and may get boring as well! At Build 2020, Microsoft announced &lt;a href=&#34;https://youtu.be/UaVCNpD3pvg?t=986&#34;&gt;language revision&lt;/a&gt; that intends to provide a Domain Specific Language (DSL) abstraction that complies to a JSON template underneath and makes it easy for you to author complex ARM templates.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/UaVCNpD3pvg?t=986&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;As this preview becomes available, I will write more about this new method here.&lt;/p&gt;
&lt;p&gt;After you author the ARM templates, you can deploy these templates using a variety of methods. You will read more about these methods in the next part of this series.&lt;/p&gt;
&lt;h2 id=&#34;azure-deployment-manager&#34;&gt;Azure Deployment Manager&lt;/h2&gt;
&lt;p&gt;As your organization grows and you start using Azure with multiple subscriptions and may be in multiple regions too, it becomes complex to perform an ordered and monitored rollout of Azure deployments. This is where &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deployment-manager-overview&#34;&gt;Azure Deployment Manager&lt;/a&gt; (ADM) comes into play. ADM extends ARM by enabling new features called &lt;em&gt;Service Topologies&lt;/em&gt; and &lt;em&gt;Rollouts&lt;/em&gt;.  ADM makes it easy to define complex deployments that span multiple regions and subscriptions and allows repeated deployments of these topologies using &lt;a href=&#34;https://docs.microsoft.com/en-us/rest/api/deploymentmanager/rollouts&#34;&gt;Rollouts&lt;/a&gt;. You will learn about this in-depth in later parts of this series.&lt;/p&gt;
&lt;h2 id=&#34;azure-governance&#34;&gt;Azure Governance&lt;/h2&gt;
&lt;p&gt;While knowing how to author and deploy ARM templates is an important part of working with Azure, it is equally important to know how to govern those resources and services deployed in Azure. As cloud architect, you would want control over who can create what type resources, where can they create those resources and how many. You would also want to standardize on the deployments so that the configuration of resources is in compliance with your organization standards. Among many other aspects like this you would want the ability to track your cloud cost more granularly for every service deployed in the cloud and for every business unit or group within your organization. To address this and to implement efficient governance Azure offers features and services such as &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/policy/overview&#34;&gt;Policies&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/management-groups/&#34;&gt;Management Groups&lt;/a&gt;, &lt;a href=&#34;https://azure.microsoft.com/en-us/features/resource-graph/&#34;&gt;Resource Graph&lt;/a&gt;, and &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/blueprints/overview&#34;&gt;Blueprints&lt;/a&gt;. Here is an excellent depiction of Azure governance architecture from the &lt;a href=&#34;https://www.microsoft.com/en-us/us-partner-blog/2019/07/24/azure-governance/&#34;&gt;partner blog&lt;/a&gt;.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/armin30/d1-azuregovernance.png&#34; width=&#34;800&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Azure Policy&lt;/strong&gt;&lt;/em&gt; helps enforce your organizational IT and business standards for resource consistency, compliance to regulatory requirements, management, security, and cost. Azure offers a set of built-in policy definitions that are readily available for some of the common use cases in your Azure environment. You can, of course, create your own custom policy definitions as well.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Azure Management Groups&lt;/strong&gt;&lt;/em&gt; allow organizing subscriptions into containers called management groups and then perform governance on these management groups. The subscriptions under the management groups inherit the governance conditions (policies) applied at the management group level.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Azure Resource Graph&lt;/strong&gt;&lt;/em&gt; offers an efficient and performant way to query resources across multiple environments and subscriptions. This service can be used to extend management of Azure resources by enabling the ability to query resources with complex filtering, grouping, and sorting by resource properties. To use Azure Graph, you need to understand the Kusto Query Language (&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/governance/resource-graph/concepts/query-language&#34;&gt;KQL&lt;/a&gt;). In this series of articles, you will see a basic overview of KQL and using Azure CLI to query the Resource Graph.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Azure Blueprints&lt;/strong&gt;&lt;/em&gt; enable streamlining of resource deployments by packaging ARM templates, policies, and role assignments. Blueprints are a declarative way to orchestrate these templates and other related artifacts. Blueprints enable efficient tracking and auditing of deployments. The knowledge you gain around ARM templates can be directly used with Azure Blueprints.&lt;/p&gt;
&lt;p&gt;With this quick overview of Azure governance features and service, you have an understanding of Azure Resource Manager and services that complement ARM. This brings us to the end of today&amp;rsquo;s article. The next few parts of this series will focus on authoring ARM templates. As described earlier, the ARM templates are JSON files and can be authored in notepad as well. But, there are some very good authoring tools and we will take a look at that in the next part of this series. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell commands to generate Git.io shorturls</title>
      <link>https://ravichaganti.com/blog/powershell-commands-to-generate-git-io-shorturls/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-commands-to-generate-git-io-shorturls/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/gitio.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://git.io&#34;&gt;Git.io&lt;/a&gt; &amp;ndash; service by GitHub &amp;ndash; can be used generate the short URLs for any GitHub.com based URL. You can navigate to Git.io and paste a GitHub URL into the input box and generate a short URL. Note that this works only with GitHub.com URLs.&lt;/p&gt;
&lt;p&gt;I have been using &lt;a href=&#34;http://gist.github.com/&#34;&gt;gists&lt;/a&gt; a lot lately and the URL to gists is usually very long and includes guids. For these gist URLs, I have been using the git.io service and wrapped that in a quick PowerShell module to help me generate these URLs. Today, I published it on &lt;a href=&#34;https://github.com/rchaganti/psgitio&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.powershellgallery.com/packages/psgitio/1.0.0.0&#34;&gt;PowerShell Gallery&lt;/a&gt; for you to use it as well.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;It is straightforward to use this module. There are only two commands.&lt;/p&gt;
&lt;h3 id=&#34;get-gitioshorturl&#34;&gt;Get-GitIoShortUrl&lt;/h3&gt;
&lt;p&gt;This command is used to get the expanded URL from the short URL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Get-GitIoShortUrl -ShortUrl &#39;https://git.io/psdev&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;new-gitioshorturl&#34;&gt;New-GitIoShortUrl&lt;/h3&gt;
&lt;p&gt;This command can create a new short URL for any GitHub URL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;New-GitIoShortUrl -Url &#39;https://github.com/rchaganti/DSCResources&#39; -Code &#39;psdsc&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the above example, &lt;code&gt;-Code&lt;/code&gt; specifies an optional shortcode to be used for create the short URL. So, if the shortcode is not already taken the generated short URL will be &lt;a href=&#34;https://git.io/psdsc&#34;&gt;https://git.io/psdsc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the absence of &lt;code&gt;-Code&lt;/code&gt; parameter, a random shortcode gets generated.&lt;/p&gt;
&lt;p&gt;If you generated a short URL for a given GitHub URL without &lt;code&gt;-Code&lt;/code&gt;, trying this command again with the same URL and with &lt;code&gt;-Code&lt;/code&gt; will not have any impact. Once a short URL gets generated, the git.io service will always return the same short URL.&lt;/p&gt;
&lt;p&gt;BTW, if you are using GistPad VS Code extension, you may want to &lt;a href=&#34;https://github.com/vsls-contrib/gistpad/issues/168&#34;&gt;upvote this feature request&lt;/a&gt; to add an option to copy the GitHub shorturl for the gists.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding visitor counter to statically generated web pages</title>
      <link>https://ravichaganti.com/blog/adding-visitor-counter-to-statically-generated-web-pages/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/adding-visitor-counter-to-statically-generated-web-pages/</guid>
      <description>&lt;p&gt;One of the to-do list items I had for this static blog site was to figure out a way to add page views counter to every article. This is especially important for PowerShell Magazine articles as we move that to a static site as well. I tried looking for a few solutions but found mostly things that would require playing with JavaScript.&lt;/p&gt;
&lt;p&gt;While looking at different GitHub profile pages this morning, I came across a visitor counter on &lt;a href=&#34;https://github.com/TylerLeonhardt&#34;&gt;Tyler&amp;rsquo;s page&lt;/a&gt;. This piqued my interest and looked at how he was generating it. It was made possible through a service hosted on &lt;a href=&#34;https://visitor-badge.glitch.me/&#34;&gt;glitch.me&lt;/a&gt;. There is a &lt;a href=&#34;https://github.com/jwenjian/visitor-badge&#34;&gt;GitHub repo&lt;/a&gt; that contains the source for this. At first, it seemed like a thing only for GitHub readme markdown but looking at the docs, I realized that I can embed that in simple webpages too.&lt;/p&gt;
&lt;p&gt;So, I updated single.html in my Hugo theme to add the following code. Single.html is the template for the article content in Hugo.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=visitorbadge&#34;&gt;&lt;/script&gt;

&lt;p&gt;With Hugo framework, this becomes relatively easy since the variables provided within the page context while building the static pages will help us build the necessary URL for tracking the visitors to the page. Depending on what static page generator framework you use, you may have to change the code above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My custom Hugo shortcode collection</title>
      <link>https://ravichaganti.com/blog/my-custom-hugo-shortcode-collection/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/my-custom-hugo-shortcode-collection/</guid>
      <description>&lt;p&gt;In the past I wrote here about the &lt;a href=&#34;https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/&#34;&gt;Az Deploy button shortcode&lt;/a&gt; and the &lt;a href=&#34;https://ravichaganti.com/blog/embedding-channel9-videos-in-hugo-static-pages/&#34;&gt;channel9 video embed shortcode&lt;/a&gt; for Hugo generated static pages. I have been creating some simple shortcodes for my own use on this blog as I start writing on different technologies again. A couple of more shortcodes I added recently are for the ARM template visualize button and launching Azure Cloud Shell.&lt;/p&gt;
&lt;p&gt;Today I decided to publish these &lt;a href=&#34;https://github.com/rchaganti/hugo-shortcodes&#34;&gt;shortcodes as a collection on GitHub&lt;/a&gt;. Instead of writing about each and every shortcode &amp;ndash; unless it has significant value to others as well &amp;ndash; this article will get updated every time I publish a new shortcode.&lt;/p&gt;
&lt;h2 id=&#34;azdeploy&#34;&gt;AzDeploy&lt;/h2&gt;
&lt;p&gt;If you ever read the Microsoft documentation around ARM templates or visited the &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;ARM templates quickstart repository&lt;/a&gt;, you might have noticed a &lt;em&gt;deploy to Azure&lt;/em&gt; button. Clicking on the button will take you to the Azure Portal to a page that provides a blade to input parameter values to deploy the ARM template. This shortcode enables the same functionality on a statically generated page. Here is how you use it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeployuse&#34;&gt;&lt;/script&gt;

&lt;p&gt;The link to JSON file should be a publicly accessible raw URL. The above shortcode when gets compiled to a static page will generate a button as shown below.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2f101-storage-account-create%2fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h2 id=&#34;armvisualize&#34;&gt;ArmVisualize&lt;/h2&gt;
&lt;p&gt;Along with the deploy to Azure button, you may have also seen a Visualize button that will show a visual representation of the ARM template. This shortcode helps implement the same functionality in a Hugo generated static page. Here is how you use it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=armvisualize&#34;&gt;&lt;/script&gt;

&lt;p&gt;The link to JSON file should be a publicly accessible raw URL.&lt;/p&gt;
&lt;p&gt;This shortcode displays a button as shown below.&lt;/p&gt;

    &lt;a href=&#34;http://armviz.io/#/?load=https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2f101-1vm-2nics-2subnets-1vnet%2fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/visualizebutton.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h2 id=&#34;azcloudshell&#34;&gt;AzCloudShell&lt;/h2&gt;
&lt;p&gt;Many Azure related documents have a button that is used to launch Azure cloud shell in a browser. This shortcode can be used to add the same functionality in a static web page.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azcloudshell&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can specify to open Bash or PowerShell by specifying that as the target argument. If you skip target parameter, the last opened shell will be launched. Here is how the Launch cloud shell button will appear.&lt;/p&gt;

    &lt;a href=&#34;https://shell.azure.com/bash&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://shell.azure.com/images/launchcloudshell.png&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h2 id=&#34;channel9&#34;&gt;Channel9&lt;/h2&gt;
&lt;p&gt;Hugo has built-in shortcodes for YouTube and Vimeo. However, I refer to a few channel9 videos that I want to embed in my articles. So, I decided to write a shortcode that helps me embed Channel 9 videos. Here is how you use it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=channel9use&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here is how the embed will appear.&lt;/p&gt;

    &lt;center&gt;
        &lt;iframe
            src=&#34;https://channel9.msdn.com/Events/Build/2020/KEY01/player&#34;
            width=&#34;640&#34;
            height=&#34;360&#34;
            frameBorder=&#34;0&#34;
            allowfullscreen=&#34;true&#34;&gt;
        &lt;/iframe&gt;
    &lt;/center&gt;
    &lt;br /&gt;


</description>
    </item>
    
    <item>
      <title>GitHub workflow for streamlined publishing of static pages</title>
      <link>https://ravichaganti.com/blog/github-workflow-for-streamlined-publishing-of-static-pages/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/github-workflow-for-streamlined-publishing-of-static-pages/</guid>
      <description>&lt;p&gt;Ever since I moved to this site/blog to static pages using Hugo and GitHub pages, I have been finding ways to optimize the publishing experience. If you ever used Wordpress, the plugins that are available to customize the site look and feel and functionality will spoil you. They make your life easy by extending base functionality and you can achieve pretty much anything you want as long as there is a plugin for that and you will always find one. Moving from such an environment to a static page generator makes you feel that you have to do all the heavy lifting.&lt;/p&gt;
&lt;p&gt;For example, tweeting an article once it is published is super simple when using Wordpress. You can simply integrate with Jetpack or use an external plugin to do that job for you. However, with static pages hosted on GitHub pages, your options are limited. If your static site generator generates an RSS feed, you can use a service like &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt; to retrieve changes to the feed and then send out a tweet announcing a new article. In the absence of an RSS feed, you must manually tweet the article.&lt;/p&gt;
&lt;p&gt;As a part of this move to Hugo and GitHub pages, I wanted more control over publishing articles on this blog. I started writing a couple of longer series of articles. These articles will be written in advance but published one after another. So, I will have a lot of articles in draft state until the time I want to publish them. Now, you may say that I may be over engineering this but this becomes an important aspect as I move &lt;a href=&#34;https://www.powershellmagazine.com/&#34;&gt;PowerShell Magazine&lt;/a&gt; to a static site as well. PowerShell Magazine has multiple authors contributing and we need a way to ensure that the content submitted by these contributors is reviewed and allowed to publish only after the review and subsequent updates are complete. We cannot let anyone commit to a master or a live branch. So, figuring out these details before PowerShell Magazine goes live as a static site will help on-board other contributors quickly. Essentially, my site is a playground for all that! :)&lt;/p&gt;
&lt;p&gt;So, here is the GitHub flow that I implemented as of today. I am going to optimize this further based on what I need for PowerShell Magazine.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/gitflow.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;blockquote&gt;
&lt;p&gt;You will need &lt;a href=&#34;https://cli.github.com/&#34;&gt;GitHub CLI&lt;/a&gt; try out commands in this article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To implement this flow, I have two different GitHub repositories &amp;ndash; blog and rchaganti.github.io. Blog repository is a private repository that contains all the markdown files for the articles on this blog and rchaganti.github.io is a public repository to which the generated static pages will be pushed to.&lt;/p&gt;
&lt;p&gt;Blog repository has two branches &amp;ndash; draft and live. Draft branch is where I author all the articles and keep them ready for publishing. Live branch has the content that should be live on the public website. Whenever there is content that needs to be pushed into the live branch, I submit a pull request.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=ghcreatepull.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;I use the blog article title as the argument to &lt;code&gt;--title&lt;/code&gt; parameter and the permalink to the new article as the argument to &lt;code&gt;--body&lt;/code&gt; parameter. I use these values specifically since I want to be able to send a tweet once the static page is generated and public site is updated. You will see how it gets used in the workflow file.&lt;/p&gt;
&lt;p&gt;Here is how (example from an earlier test) the created pull request will appear.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/ghpull.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;At this point in time, since I am the only author on my site, I can simply merge the pull request. In case of a multi-author blog or external contributions, we can go through the review workflow after the PR is submitted.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=ghprmerge.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above command will merge the PR. Now, at this point, we can trigger a GitHub workflow to use Hugo to generate the static pages, push to an external public repository, and finally tweet that change. Here is the workflow YAML from my repository.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=workflow.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above workflow gets triggered only when a pull request is associated with the live branch and the PR is closed. I have chosen a ubuntu runner to ensure all actions that I specified can run. And, this is a multi-step workflow.&lt;/p&gt;
&lt;p&gt;In the first step, live branch of the blog repository gets checked out. In step 2, I am using &lt;a href=&#34;peaceiris/actions-hugo@v2&#34;&gt;peaceiris/actions-hugo@v2&lt;/a&gt; action from the marketplace to setup Hugo and I am using extended version (specified using &lt;code&gt;extended: true&lt;/code&gt;) since I have custom CSS that needs to be compiled.&lt;/p&gt;
&lt;p&gt;Step 3 builds the static pages using Hugo command and step 4 publishes those static pages to an external public repository. This step uses &lt;a href=&#34;peaceiris/actions-gh-pages@v3&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/a&gt; from the actions marketplace. This action a few options. If you do not specify an external repository, it will simply create a new branch in the same repository that was checked out earlier and publish your static pages there. It will also auto-configure the cname based on what is configured in the static pages. I did not want this behavior since my Blog repository is a private repository and do not want a public facing site in that repository. For this action to be able to access the external repository and commit the new build of static pages, it needs the &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token#:~:text=Personal%20access%20tokens%20%28PATs%29%20are%20an%20alternative%20to,uses%20SAML%20SSO%2C%20you%20must%20authorize%20the%20PAT.&#34;&gt;GitHub personal token&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the last step sends out a tweet using the &lt;a href=&#34;ethomson/send-tweet-action@v1&#34;&gt;ethomson/send-tweet-action@v1&lt;/a&gt; action. This action requires Twitter API token and secrets. You can create your own app on &lt;a href=&#34;https://developer.twitter.com/en/apps&#34;&gt;Twitter developer portal&lt;/a&gt;. If everything else goes fine, this last step will send the tweet out using the pull request title and body arguments you have seen earlier.&lt;/p&gt;
&lt;p&gt;Here is a test tweet that was sent out at the end of an earlier test run.&lt;/p&gt;
&lt;p&gt;tweet 1279720259801530368&lt;/p&gt;
&lt;p&gt;Now, there is one thing I still need to implement is the conditional execution of the GitHub action. For example, I may update an already published article for whatever reasons but may not want a tweet to go out after this update. I can implement this based on the pull request labels. And, I want to be able to schedule article publishing which may be possible using cron syntax within the workflows. More on these later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microsoft MVP for another year</title>
      <link>https://ravichaganti.com/blog/micosoft-mvp-for-another-year/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/micosoft-mvp-for-another-year/</guid>
      <description>&lt;p&gt;July 1st of every year is a hit-refresh or F5 day for most of us in the &lt;a href=&#34;http://mvp.microsoft.com/&#34;&gt;Microsoft MVP community&lt;/a&gt;. This year is no different.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/mvp20.png&#34; width=&#34;800&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;I will be a &lt;a href=&#34;https://mvp.microsoft.com/en-us/PublicProfile/4029023?fullName=Ravikanth%20Chaganti&#34;&gt;Cloud &amp;amp; Data Center Management (CDM) MVP&lt;/a&gt; for another year. This is my 12th award and still excited the same as my first year in the MVP award program. The last MVP year (2019-2020) was good with PowerShell Conference Asia moving to India and being super successful with over 230 attendees. For the upcoming MVP year (2020-2021), I have a good number of things lined up on this blog already. You will start seeing those contributions starting this month. I am in the process (very slow) of moving &lt;a href=&#34;https://www.powershellmagazine.com/&#34;&gt;PowerShell Magazine&lt;/a&gt; as well to a static site so that it becomes easy to maintain and author more articles. Stay tuned for these updates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I use GitHub Gists to store and display code snippets in blog posts</title>
      <link>https://ravichaganti.com/blog/how-i-use-gists-to-store-and-display-code-snippets-in-blog-posts/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/how-i-use-gists-to-store-and-display-code-snippets-in-blog-posts/</guid>
      <description>&lt;p&gt;After I moved to a static site hosted on GitHub Pages, I was looking at different options to share the code snippets in a better way. With the Hugo generated static pages, there are a few options for code sharing in an article.&lt;/p&gt;
&lt;p&gt;You can use the simple pre-formatted text in markdown. This is usually done by enclosing code snippet in ```. This appears (in Hugo Coder theme I am using) as a big black block and has no way to choose the right syntax highlighting based on what programming language the snippet is written in. There are no line numbers or no highlighting of lines in a code snippet and so on.&lt;/p&gt;
&lt;p&gt;The second method involves Hugo&amp;rsquo;s default &lt;a href=&#34;https://gohugo.io/content-management/syntax-highlighting/&#34;&gt;Highlight shortcode&lt;/a&gt;. This is a good method that supports line numbers, language type, and line highlights. But, the only shortcoming is that I have to now store the code snippet locally in the same static page. So, if I need to update the code snippet, I end up updating the static page itself.&lt;/p&gt;
&lt;p&gt;So, wanted to explore something better and then I found the &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/#gist&#34;&gt;Gist shortcode&lt;/a&gt; in Hugo. Using this shortcode, you can embed a GitHub Gist on a static page. This seemed like a good fit for me since I get the line numbers, language based syntax highlighting, and nothing saved locally in the static page. However, for adding the code snippets as Gists, I first need to upload the Gist and then use it in my article. For this, I need to navigate to the GitHub site and then return once I am done uploading Gists. This is where I found &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs&#34;&gt;GistPad VS Code extension&lt;/a&gt; quite helpful. With this extension in place, I can now create/update/delete Gists right inside VS Code where I am writing all the markdown content for the articles. So, I never have to leave VS Code. Here is how it appears in VS Code.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/vscodegist.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the screenshot, I can group all Gists that belong a specific article or category and then simply use them here in an article. With this integration, I simply write all code as a Gist and then use the following syntax to make it appear here.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=gistshortcode&#34;&gt;&lt;/script&gt;

&lt;p&gt;Simple. I will be using this method of sharing code snippets within an upcoming article series. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embedding Channel9 Videos in Hugo Static Pages</title>
      <link>https://ravichaganti.com/blog/embedding-channel9-videos-in-hugo-static-pages/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/embedding-channel9-videos-in-hugo-static-pages/</guid>
      <description>&lt;p&gt;I have been trying a few things with my new blogging platform here and in the preparation for a new series of articles, I wanted the ability to embed &lt;a href=&#34;https://channel9.msdn.com/&#34;&gt;Channel9&lt;/a&gt; videos. This is Hugo platform! So, it was not a big deal. I just had to create another &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcode&lt;/a&gt; like the one I created for &lt;a href=&#34;https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/&#34;&gt;Deploy to Azure button&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the code for the shortcode.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=channel9.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can save this as channel9.html under the layouts/shortcode folder of your site content. And, then use this shortcode as shown here.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=channel9use&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can use either of the methods shown above. The first one uses an named parameter while the second one avoids named parameter specification. Here is how the embed appears on the static page.&lt;/p&gt;

    &lt;center&gt;
        &lt;iframe
            src=&#34;https://channel9.msdn.com/Events/Build/2020/KEY01/player&#34;
            width=&#34;640&#34;
            height=&#34;360&#34;
            frameBorder=&#34;0&#34;
            allowfullscreen=&#34;true&#34;&gt;
        &lt;/iframe&gt;
    &lt;/center&gt;
    &lt;br /&gt;


&lt;p&gt;It is good to be writing here again! Can&amp;rsquo;t wait to start publishing the new series of articles that I am writing now. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo shortcode for Deploy to Azure Button in a Static Page</title>
      <link>https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/</guid>
      <description>&lt;p&gt;As I moved to this new implementation of the blog using Hugo and GitHub pages, I decided to move older article &lt;a href=&#34;https://ravichaganti.com/series/arm-templates/&#34;&gt;series around authoring Azure Resource Manager templates&lt;/a&gt;. This series was one of the most visited ones on this blog. This series provided an incremental way to learn how to author ARM templates and deploy these ARM templates. In each of these articles, I added a &amp;ldquo;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-to-azure-button&#34;&gt;Deploy to Azure Button&lt;/a&gt;&amp;rdquo; that you could just click and open the template directly in Azure Portal ready for deployment. The code behind this button usually looks like this.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeployurl&#34;&gt;&lt;/script&gt;

&lt;p&gt;As I moved to static page generation using Hugo, I looked around to see if there was an easy way to generate the above HTML snippet. I came across the feature called &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcodes in Hugo&lt;/a&gt;. This allows you to embed shortcodes for YouTube videos, images, and so on. Several articles that I moved to this new site use shortcodes. And, it is not too difficult to &lt;a href=&#34;https://gohugo.io/templates/shortcode-templates/&#34;&gt;write your own shortcode&lt;/a&gt;. So, I decided to write one for AzDeploy button.&lt;/p&gt;
&lt;p&gt;First, you need a shortcode template.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeploy.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;I will spare an explanation of this and you can read the documentation of custom shortcodes. But, this is no rocket science. The way you use this shortcode in markdown is simple. You can use either of the methods shown below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeployuse&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is it really. If you put that above code in the markdown and generate the static page, you will see the Deploy to Azure button appear like this.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2f101-storage-account-create%2fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;Simple and straightforward. I really fell in love with Hugo and static site generation. This has a lot of ways to customize and way faster than any other framework I used so far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moved Blog to a Static Site Using Hugo and GitHub Pages</title>
      <link>https://ravichaganti.com/blog/moved-to-static-site-using-hugo-and-github-pages/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/moved-to-static-site-using-hugo-and-github-pages/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/welcome.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;It has been a while since I wrote something here. I was using a Digital Ocean droplet to run this blog using self-hosted version of Wordpress. Overall, it was good experience but there are issues with Wordpress installs. While it allows greater levels of customization, when all you need is just sharing your ideas, it becomes rather heavy. Also, the recent vulnerabilities made me think about it again. While I was having this thought process, I came across a few sites hosted on GitHub pages using Jekyll and simple static pages. I really wanted to move but moving from Wordpress to static site isn&amp;rsquo;t an easy option. There are Wordpress &lt;a href=&#34;https://ma.ttias.be/step-by-step-guide-migrating-wordpress-to-hugo/&#34;&gt;plugins available to export&lt;/a&gt; to markdown format and then host the same on GitHub pages. This is done using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. While, on paper, it looks very easy job, it is actually not. The exported markdown files won&amp;rsquo;t be compatible with your selected &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo theme&lt;/a&gt;. As I was wondering about this whole process, &lt;a href=&#34;https://twitter.com/ChendrayanV&#34;&gt;Chen&lt;/a&gt; came to the rescue and gave me a head start. After reviewing what he sent and doing some more research, I decided to build the site from scratch.&lt;/p&gt;
&lt;p&gt;So, welcome to the new home. In the process of migrating to Hugo+GitHub Pages, I decided to drop some old content from the blog and export what was most visited through last few years. I have moved three most important series of articles I wrote here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/arm-templates/&#34;&gt;Authoring Azure Resource Manager Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/powershell-remoting/&#34;&gt;PowerShell Remoting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/wql-via-powershell/&#34;&gt;WMI Query Language (WQL) via PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have archived most of the other content and will try to bring it in slowly when I get some free time. Believe me. It is a lot of work bringing in old content into the markdown format. The images need to be moved, links need to be corrected, and code needs to be formatted again based on what type of syntax highlighter you were using.&lt;/p&gt;
&lt;p&gt;Anyway, I just fell in love with this new look and the way it makes my life easy. I have been writing in markdown for a while and I feel so comfortable doing it. I hope this move helps me write more and share my thoughts.&lt;/p&gt;
&lt;p&gt;I am also in the process of moving PowerShell Magazine to a static site but that is much more complex than a simple blog like mine. But, yes, I certainly want to make it easy for our contributing authors.&lt;/p&gt;
&lt;p&gt;Are you using a static site as well? What is your experience?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Global Azure Bootcamp - Azure CLI 2.0</title>
      <link>https://ravichaganti.com/blog/slides-and-demo-scripts-from-azure-cli-2-0-tips-and-tricks-session-at-globalazurebootcamp/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-and-demo-scripts-from-azure-cli-2-0-tips-and-tricks-session-at-globalazurebootcamp/</guid>
      <description>&lt;p&gt;I had the opportunity over the weekend to speak at the Global Azure Bootcamp organized by local Microsoft user groups. This event was held at ABB office in Bangalore and I must say that they have done a splendid job. It was a very well organized event. I had only one session and it was about Azure CLI 2.0 Tips and Tricks. I mentioned earlier that I am using CLI mostly these days to work with Azure resources and in this session I shared some tips and tricks around making it easier to work with Azure resource management using Azure CLI 2.0.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/exlTOlYe4c0N2o&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;The demo scripts I used for this session can be downloaded from&lt;br&gt;
&lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/GAB2019-BLR&#34;&gt;https://github.com/rchaganti/Presentations/tree/master/GAB2019-BLR&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: BITPro UG Meet - Tests Driven PowerShell Learning using PSKoans</title>
      <link>https://ravichaganti.com/blog/session-slides-tests-driven-powershell-learning-using-pskoans/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/session-slides-tests-driven-powershell-learning-using-pskoans/</guid>
      <description>&lt;p&gt;At today’s Bangalore IT Pro and PowerShell Bangalore User Group (PSBUG) event, I had the opportunity to showcase the &lt;!-- raw HTML omitted --&gt;PSKoans &lt;!-- raw HTML omitted --&gt;module by &lt;!-- raw HTML omitted --&gt;Joel Sallow&lt;!-- raw HTML omitted --&gt;. This module has a set of Pester tests that you have to fix as you proceed in your efforts towards mastering PowerShell.&lt;/p&gt;
&lt;p&gt;I have found this method engaging and decided that I must show this to the community.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/dReJxeJsDhvCRz&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;After this session on PSKoans, I did live coding and streamed it &lt;!-- raw HTML omitted --&gt;live on Twitch&lt;!-- raw HTML omitted --&gt; (and did not realize that it was without audio :((). I fixed a function in my PSWindowsAdminCenter module and added a new function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Experts Live India – Azure at the command line</title>
      <link>https://ravichaganti.com/blog/session-slides-experts-live-india-azure-at-the-command-line/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/session-slides-experts-live-india-azure-at-the-command-line/</guid>
      <description>&lt;p&gt;I had the opportunity to speak at the inaugural edition of Experts Live India 2019 over the weekend. It was a great experience. The organizers did a great job even when there were teething facilities issues that plagued the event right from the start.&lt;/p&gt;
&lt;p&gt;My first session was on Azure at the command line. In this session, I walked through both Az CLI 2.0 and Az PowerShell modules and explained the differences to help the audience choose the right tool for their job. The slides do not contain a huge deal of information as I preferred showing the audience a good demo to understand the differences.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/gKG58Jis0XZUzj&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;The demo scripts are available at &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/ExpertsLiveIN2019/AzCommandline&#34;&gt;https://github.com/rchaganti/Presentations/tree/master/ExpertsLiveIN2019/AzCommandline&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Experts Live India – PowerShell Data as File System</title>
      <link>https://ravichaganti.com/blog/session-slides-experts-live-india-powershell-data-as-file-system/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/session-slides-experts-live-india-powershell-data-as-file-system/</guid>
      <description>&lt;p&gt;I had the opportunity to speak at the inaugural edition of Experts Live India 2019 over the weekend. It was a great experience. The organizers did a great job even when there were teething facilities issues that plagued the event right from the start.&lt;/p&gt;
&lt;p&gt;I had planned only for one session at the event but as some international speakers could not make it to the event, I was asked to take up one more session and I chose to show the audience SHiPS module. Hierarchical data can be read as a file system in PowerShell using SHiPS open source module. In this session, I walked the audience through what are providers and what is the advantage of implementing PowerShel providers using the SHiPS module.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/LIDAL5Jq1Unbx2&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;Once again, the slides do not contain great deal of information since I wanted to make this more of a demo based session. The demo scripts are available at &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/ExpertsLiveIN2019/PSDataAsFileSystem&#34;&gt;https://github.com/rchaganti/Presentations/tree/master/ExpertsLiveIN2019/PSDataAsFileSystem&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Azure MVP Bootcamp – Microsoft Azure Cloud and DevOps</title>
      <link>https://ravichaganti.com/blog/slides-from-azure-mvp-bootcamp-microsoft-azure-cloud-and-devops/</link>
      <pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-from-azure-mvp-bootcamp-microsoft-azure-cloud-and-devops/</guid>
      <description>&lt;p&gt;I had the privilege to join the &lt;a href=&#34;http://www.miraclesoft.com/&#34;&gt;Miracle &lt;/a&gt;team at Visakhapatnam today for an Azure MVP bootcamp. I spoke about &lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/Azure-Boot-Camp-Vizag2016&#34;&gt;Microsoft Azure Cloud and DevOps&lt;/a&gt;. This event, I must say, it a very well organized and orchestrated. I have been to conferences and events in India and outside India and never seen this level of care of speakers and attendees anywhere.&lt;/p&gt;
&lt;p&gt;I started my day with a good morning walk along the beach and just loved it. I wish I get to do this often.&lt;/p&gt;
&lt;p&gt;Finally, in my session, there were 100+ attendees and it was very interactive. Here are the slides from that session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/9I392jmqcxwHLF&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: PowerShell Conference Asia 2016</title>
      <link>https://ravichaganti.com/blog/powershell-conference-asia-2016-slides-and-demo-scripts/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-conference-asia-2016-slides-and-demo-scripts/</guid>
      <description>&lt;p&gt;Yet another successful conference this year. All kudos to Matt, Milton, Sebastian, and Ben for making this year’s &lt;a href=&#34;http://psconf.asia&#34;&gt;PowerShell Conference Asia&lt;/a&gt; such a super hit.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://pbs.twimg.com/media/CvfxdqcVMAA05aI.jpg:large&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I had a great time speaking about &lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/psconfAsia2016/UGMeet-19Oct16&#34;&gt;Developing Infrastructure Code for CI &amp;amp; CD&lt;/a&gt; and &lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/psconfAsia2016/CFN_DSC-22Oct16&#34;&gt;Using PowerShell DSC with AWS Cloud&lt;/a&gt;. I have had the opportunity to do an impromptu session with Deepak &amp;amp; Matt on the release pipeline. Overall, I am really happy with the way all my sessions went through and the response from attendees.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/7JuYV40SYl1yyK&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;


    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/IMgRBSo8AZLtKH&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;Slides and demos scripts for my sessions are available in my Github repository: &lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/psconfAsia2016&#34;&gt;https://github.com/rchaganti/Presentations/tree/master/psconfAsia2016&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: PowerShell Conference EU 2016</title>
      <link>https://ravichaganti.com/blog/session-slides-and-demo-scripts-from-powershell-conference-eu-2016/</link>
      <pubDate>Mon, 25 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/session-slides-and-demo-scripts-from-powershell-conference-eu-2016/</guid>
      <description>&lt;p&gt;I returned home from PowerShell Conference EU this morning. Wow, what an amazing event was that! Seriously, right from the opening event to each and every session, this was truly the global PowerShell conference with attendees from more than twelve countries and speakers from four continents.&lt;/p&gt;
&lt;p&gt;I had two sessions at this conference and these were very well received. I uploaded the slides and demo scripts to a PSConfEU &lt;a href=&#34;https://github.com/psconfeu/2016&#34;&gt;Github repository&lt;/a&gt;. Feel free to use them as needed. For those who prefer, Slideshare instead, here are the slide decks. The sessions recordings should be online in a couple of weeks. I will updated this post.&lt;/p&gt;
&lt;h4 id=&#34;operations-validation-for-infrastructure-as-code&#34;&gt;Operations Validation for Infrastructure as Code&lt;/h4&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/iqw6Jz1bEGTVew&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/psconfeu/2016/blob/master/Ravikanth%20Chaganti/OVF/Demos.zip&#34;&gt;Demo Scripts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;During this session, I introduced a new concept called infrastructure blueprints that essentially package PowerShell DSC configurations with integration and operations validation tests in written in Pester. You can check out an example of this in my &lt;a href=&#34;https://github.com/rchaganti/InfraBlueprints&#34;&gt;Github repository&lt;/a&gt;. This is a work in progress and I expect to make several changes over next few weeks.&lt;/p&gt;
&lt;h4 id=&#34;powershell-dsc-partial-configurations-and-cross-node-synchronization&#34;&gt;PowerShell DSC Partial Configurations and Cross-node Synchronization&lt;/h4&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/RQoVoRVWyHkwB&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/psconfeu/2016/blob/master/Ravikanth%20Chaganti/PCandCNS/Demos.zip&#34;&gt;Demo Scripts&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom Template Deployment Improvements in Azure Portal</title>
      <link>https://ravichaganti.com/blog/custom-template-deployment-improvements-in-azure-portal/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/custom-template-deployment-improvements-in-azure-portal/</guid>
      <description>&lt;p&gt;When testing ARM templates, I typically use the custom template deployment option in the Azure Portal. This UI option just got better! This deployment option now supports lists the parameters, variables, and resources used in template in a nice treeview navigation.&lt;/p&gt;
&lt;p&gt;To start a new deployment, you can click on New -&amp;gt; Template Deployment.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate11-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This opens up the Custom Deployment blade. Click on Edit Template.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate11-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the Edit Template blade, copy/paste your template JSON in the editor.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate11-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In a few seconds, you will see the treeview built for the template. You can expand each node to see the individual elements within each category. Selecting a specific element within a node navigates to the definition for that selection within the JSON template.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate11-4.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;You can click Save and then proceed to the deployment by completing the remaining steps in the custom deployment.&lt;/p&gt;
&lt;p&gt;The second enhancement is the option to pull a quick start &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;template from the Github repository&lt;/a&gt; and deploy it!&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate11-5.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the &lt;em&gt;Load a quickstart template&lt;/em&gt; blade, you can select a template listed in the dropdown.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate11-6.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Clicking OK in this blade opens the template in the Edit Template blade where you can make changes as needed and save it.&lt;/p&gt;
&lt;p&gt;These are two nice surprises this morning. Anymore waiting? 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Forcing WMF 4.0 when using DSC Extension</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-forcing-wmf-4-0-when-using-dsc-extension/</link>
      <pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-forcing-wmf-4-0-when-using-dsc-extension/</guid>
      <description>&lt;p&gt;This subject won&amp;rsquo;t really need a post of its own but I will do it anyway. In the previous part of this &lt;a href=&#34;http://azrs.tk/armseries&#34;&gt;ARM series&lt;/a&gt;, I showed how we can use the domain join extension instead of DSC to join a VM to an existing AD domain. This resulted is huge savings in time taken to deploy the entire scenario. When I was talking to my good friend, fellow PowerShell MVP and all-things-Azure guru, &lt;a href=&#34;https://twitter.com/bgelens&#34;&gt;Ben Gelens&lt;/a&gt;, he was quick to point that the delays when using DSC extension here could be due to the install of WMF 5.0. Indeed!&lt;/p&gt;
&lt;p&gt;When you use Azure DSC extension, it by default installs latest available version of WMF 5.0 (production preview at the time of this writing) which requires a reboot! Therefore, using DSC extension in ARM templates for down-level OS such as Windows Server 2012 or 2012 R2, there will be delays. But, there is a workaround. We can force DSC extension to use WMF 4.0. Here is how we do that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Compute/virtualMachines/extensions&amp;#34;,
    &amp;#34;copy&amp;#34;: {
        &amp;#34;name&amp;#34;: &amp;#34;vmDomainLoop&amp;#34;,
        &amp;#34;count&amp;#34;: &amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
    },
    &amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;vm&amp;#39;,copyIndex(1),&amp;#39;/domainjoin&amp;#39;)]&amp;#34;,
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-05-01-preview&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;dependsOn&amp;#34;: [
        &amp;#34;vmLoop&amp;#34;
    ],
    &amp;#34;properties&amp;#34;: {
        &amp;#34;publisher&amp;#34;: &amp;#34;Microsoft.Powershell&amp;#34;,
        &amp;#34;type&amp;#34;: &amp;#34;DSC&amp;#34;,
        &amp;#34;typeHandlerVersion&amp;#34;: &amp;#34;2.8&amp;#34;,
        &amp;#34;settings&amp;#34;: {
            &amp;#34;ModulesUrl&amp;#34;: &amp;#34;[concat(parameters(&amp;#39;assetLocation&amp;#39;),&amp;#39;/Configuration.zip&amp;#39;)]&amp;#34;,
            &amp;#34;WmfVersion&amp;#34;:  &amp;#34;4.0&amp;#34;,
            &amp;#34;ConfigurationFunction&amp;#34;: &amp;#34;Configuration.ps1\\DomainJoin&amp;#34;,
            &amp;#34;Properties&amp;#34;: {
                &amp;#34;DomainName&amp;#34;: &amp;#34;[parameters(&amp;#39;adDomainName&amp;#39;)]&amp;#34;,
                &amp;#34;AdminCreds&amp;#34;: {
                    &amp;#34;UserName&amp;#34;: &amp;#34;[parameters(&amp;#39;adminUsername&amp;#39;)]&amp;#34;,
                    &amp;#34;Password&amp;#34;: &amp;#34;PrivateSettingsRef:adminPassword&amp;#34;
                }
            }
        },
        &amp;#34;protectedSettings&amp;#34;: {
            &amp;#34;Items&amp;#34;: {
                &amp;#34;adminPassword&amp;#34;: &amp;#34;[parameters(&amp;#39;adminPassword&amp;#39;)]&amp;#34;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Observe line number 19. We use the WmfVersion property and set it to 4.0. This forces DSC extension to use WMF 4.0 instead of installing latest WMF 5.0 bits. Remember to use this method, for down-level OS where WMF / PS 5.0 isn’t available by default and where you don’t need any features provided by WMF / PS 5.0, to make sure deployment times are optimized.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you need to do this outside an ARM template, &lt;a href=&#34;https://blogs.msdn.microsoft.com/powershell/2015/10/01/how-to-use-wmf-4-with-azure-dsc-extension-in-azure-cloud-service-manager-asm/&#34;&gt;you can do so by creating the JSON needed for this and then use the Azure PowerShell cmdlets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can click the Deploy to Azure button below to deploy the sample scenario detailed in this article series.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Storage-VirtualNet-LinkedTemplate-Complete.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;By forcing DSC extension to use WMF 4.0, the complete sample scenario (with one AD VM and three VMs joining the domain) was completed in 33 mins!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Using Domain Join Extension</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-domain-join-extension/</link>
      <pubDate>Sat, 13 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-domain-join-extension/</guid>
      <description>&lt;p&gt;The scenario that we used to understand and build ARM templates contained a domain controller VM along with one or more VMs that joined the domain service hosted by the DC VM.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate9-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;To make sure the VMs join the domain, we used PowerShell DSC configuration. One of the biggest quirks, at least what I faced, with DSC extension with ARM templates is that it takes little longer to complete. For example, the complete scenario deployment took almost 48 minutes to deploy. I am not making up that number. Here is the proof.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate9-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, 48 minutes may not sound that worse but imagine deploying tens of VMs that need to join the domain using the DSC configuration as we saw in the earlier example in this series.&lt;/p&gt;
&lt;p&gt;This is where the new JsonADDomainExtension helps! Instead of using DSC configuration to add VMs to a AD domain, we will now use this VM extension. Within the [earlier template that deployed this scenario][1], we will remove the domainJoin resource definition and replace that with JsonADDomainExtension.&lt;/p&gt;
&lt;p&gt;Here is how that new resource definition looks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;resources&amp;#34;: [
    {
        &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-06-15&amp;#34;,
        &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Compute/virtualMachines/extensions&amp;#34;,
        &amp;#34;name&amp;#34;: &amp;#34;[concat(concat(&amp;#39;vm&amp;#39;,copyIndex(1)),&amp;#39;/joindomain&amp;#39;)]&amp;#34;,
        &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
        &amp;#34;dependsOn&amp;#34;: [
                &amp;#34;[concat(&amp;#39;Microsoft.Compute/virtualMachines/&amp;#39;, concat(&amp;#39;vm&amp;#39;,copyIndex(1)))]&amp;#34;
        ],                    
        &amp;#34;properties&amp;#34;: {
            &amp;#34;publisher&amp;#34;: &amp;#34;Microsoft.Compute&amp;#34;,
            &amp;#34;type&amp;#34;: &amp;#34;JsonADDomainExtension&amp;#34;,
            &amp;#34;typeHandlerVersion&amp;#34;: &amp;#34;1.0&amp;#34;,
            &amp;#34;settings&amp;#34;: {
                &amp;#34;Name&amp;#34;: &amp;#34;[parameters(&amp;#39;adDomainName&amp;#39;)]&amp;#34;,
                &amp;#34;User&amp;#34;: &amp;#34;[concat(parameters(&amp;#39;adDomainName&amp;#39;), &amp;#39;\\&amp;#39;, parameters(&amp;#39;adminUserName&amp;#39;))]&amp;#34;,
                &amp;#34;Restart&amp;#34;: &amp;#34;true&amp;#34;,
                &amp;#34;Options&amp;#34;: &amp;#34;3&amp;#34;,
                &amp;#34;OUPath&amp;#34;: &amp;#34;[parameters(&amp;#39;OUPath&amp;#39;)]&amp;#34;
            },
            &amp;#34;protectedsettings&amp;#34;: {
                &amp;#34;Password&amp;#34;: &amp;#34;[parameters(&amp;#39;adminPassword&amp;#39;)]&amp;#34;
            }
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this extension settings, I am re-using a few parameters such as &lt;em&gt;adDomainName&lt;/em&gt;, &lt;em&gt;adminUserName&lt;/em&gt;, and &lt;em&gt;adminPassword&lt;/em&gt;. I added a new parameter called &lt;em&gt;OUPath&lt;/em&gt;. This specifies the organization unit for the VM computer account and it is not mandatory to specify this. Let’s take a quick look at the properties of this resource.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Property Name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Name of the Active Directory Domain to join&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;Administrator account name to authenticate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Restart&lt;/td&gt;
&lt;td&gt;Specifies if the VM should restart after domain join. Possible values: true or false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;Domain join options. Default option is 3.Refer to &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa370433(v=vs.85).aspx&#34;&gt;NetJoin options on MSDN&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OUPath&lt;/td&gt;
&lt;td&gt;Organization Unit for the VM computer account. It is not mandatory to specify this value.Example specification: OU=testOU; DC=domain; DC=Domain; DC=com&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/rchaganti/armseries/blob/master/arm-series_Final-JoinDomain-Extension.json&#34;&gt;complete template that uses this new extension&lt;/a&gt; is rather lengthy. So, click on the below Deploy to Azure button to deploy this template.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Final-JoinDomain-Extension.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;As compared to the DSC way of joining a domain, the new domain join extension method took only 31 minutes. This is it for now! Try this template and let me know what you think.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Putting it all together</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-putting-it-all-together/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-putting-it-all-together/</guid>
      <description>&lt;p&gt;In this series so far, we looked at building ARM templates by example. The focus was not really on the resource types or how to use resource definitions. Instead, our focus was on learning the basics of template language. To that extent, we have a scenario that we want to deploy and we are incrementally building the template for it.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate8-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;While building an ARM template for this, we looked at how to use parameters and variables. We looked at using copy object to create multiple instances of a resource type without really writing the resource definition multiple times. We went on to find out how we can define dependencies between different resource types so they are orchestrated in the right order. We looked at how we can decompose the template into purpose-specific external templates and how to link them together. While learning these concepts, we created a template that almost built the scenario we started with.&lt;/p&gt;
&lt;p&gt;We will now add the remaining VMs based on the &lt;em&gt;environmentType&lt;/em&gt; selected by the user. So, based on the VM instance count we need, we have to create network interfaces and virtual machines. We have already provisioned the inbound NAT rules needed for the RDP access to these virtual machine consoles post deployment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
  &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-06-15&amp;#34;,
  &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Network/loadBalancers/inboundNatRules&amp;#34;,
  &amp;#34;copy&amp;#34;: {
    &amp;#34;name&amp;#34;: &amp;#34;lbRdpNatLoop&amp;#34;,
    &amp;#34;count&amp;#34;: &amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
  },
  &amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;/loadBalancer/&amp;#39;,&amp;#39;VM&amp;#39;, copyIndex(1),&amp;#39;-RDP&amp;#39;)]&amp;#34;,
  &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
  &amp;#34;dependsOn&amp;#34;: [
    &amp;#34;Microsoft.Network/loadBalancers/loadBalancer&amp;#34;
  ],
  &amp;#34;properties&amp;#34;: {
    &amp;#34;frontendIPConfiguration&amp;#34;: {
      &amp;#34;id&amp;#34;: &amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/loadBalancers&amp;#39;,&amp;#39;loadBalancer&amp;#39;),&amp;#39;/frontendIPConfigurations/LBFrontEnd&amp;#39;)]&amp;#34;
    },
    &amp;#34;protocol&amp;#34;: &amp;#34;tcp&amp;#34;,
    &amp;#34;frontendPort&amp;#34;: &amp;#34;[add(3389, copyIndex(1))]&amp;#34;,
    &amp;#34;backendPort&amp;#34;: 3389,
    &amp;#34;enableFloatingIP&amp;#34;: false
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look at line number 8. We are building the name of the inbound NAT rule using &lt;em&gt;copyIndex()&lt;/em&gt;. This gives us the ability to differentiate between NAT rules for different VMs. We now have to create the equal number of VM network interfaces based on the instance count selected. Here is how we do it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-05-01-preview&amp;#34;,
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Network/networkInterfaces&amp;#34;,
    &amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;vm&amp;#39;, copyIndex(1), &amp;#39;-nif&amp;#39;)]&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;copy&amp;#34;: {
        &amp;#34;name&amp;#34;: &amp;#34;vmNetworkLoop&amp;#34;,
        &amp;#34;count&amp;#34;: &amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
    },
    &amp;#34;dependsOn&amp;#34;: [
        &amp;#34;Microsoft.Network/loadBalancers/loadBalancer&amp;#34;,
        &amp;#34;[concat(&amp;#39;Microsoft.Network/virtualNetworks/&amp;#39;, parameters(&amp;#39;vNetName&amp;#39;))]&amp;#34;,
        &amp;#34;Microsoft.Resources/deployments/updatevnetdns&amp;#34;,
        &amp;#34;lbRdpNatLoop&amp;#34;
    ],
    &amp;#34;properties&amp;#34;: {
        &amp;#34;ipConfigurations&amp;#34;: [
            {
                &amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;vm&amp;#39;, copyIndex(1), &amp;#39;-ipconfig&amp;#39;)]&amp;#34;,
                &amp;#34;properties&amp;#34;: {
                    &amp;#34;privateIPAllocationMethod&amp;#34;: &amp;#34;dynamic&amp;#34;,
                    &amp;#34;subnet&amp;#34;: {
                        &amp;#34;id&amp;#34;: &amp;#34;[variables(&amp;#39;vNetSubnet1ID&amp;#39;)]&amp;#34;
                    },
                    &amp;#34;loadBalancerBackendAddressPools&amp;#34;: [
                        {
                            &amp;#34;id&amp;#34;: &amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/loadBalancers&amp;#39;,&amp;#39;loadBalancer&amp;#39;),&amp;#39;/backendAddressPools/LBBackEnd&amp;#39;)]&amp;#34;
                        }
                    ],
                    &amp;#34;loadBalancerInboundNatRules&amp;#34;: [
                        {
                            &amp;#34;id&amp;#34;: &amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/loadBalancers&amp;#39;,&amp;#39;loadBalancer&amp;#39;),concat(&amp;#39;/inboundNatRules/VM&amp;#39;,copyIndex(1),&amp;#39;-RDP&amp;#39;))]&amp;#34;
                        }
                    ]
                }
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let us discuss this definition a bit. We need to ensure that the network interfaces are bound to the load balancer. Without this, the RDP endpoints that we created within the NAT rules will not apply to the VMs. To achieve this, we defined dependency (line number 14) on the NAT rules resource definition identified using &lt;em&gt;lbRdpNatLoop&lt;/em&gt;. So, this is how we depend on the copy loop within the ARM template language. Line number 32 attaches the right RDP NAT rule for the VM by using the &lt;em&gt;copyIndex()&lt;/em&gt; function again.&lt;/p&gt;
&lt;p&gt;Now that we have the network interfaces required (based on the instance count), we can create the virtual machines needed based on the &lt;em&gt;envrionmentType&lt;/em&gt; (Development or Test or Production). Based on this choice, there may be more than one virtual machine that gets created. Where there is more than one VM behind a load balancer, we would need an availability set attached to those VMs. So, let us add the resource definition for the availability set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Compute/availabilitySets&amp;#34;,
    &amp;#34;name&amp;#34;: &amp;#34;availabilitySet&amp;#34;,
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-06-15&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;properties&amp;#34;: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now go ahead create the virtual machines we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-05-01-preview&amp;#34;,
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Compute/virtualMachines&amp;#34;,
    &amp;#34;copy&amp;#34;: {
        &amp;#34;name&amp;#34;: &amp;#34;vmLoop&amp;#34;,
        &amp;#34;count&amp;#34;: &amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
    },
    &amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;vm&amp;#39;,copyIndex(1))]&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;dependsOn&amp;#34;: [
        &amp;#34;[concat(&amp;#39;Microsoft.Compute/virtualMachines/&amp;#39;, parameters(&amp;#39;dcVMName&amp;#39;))]&amp;#34;,
        &amp;#34;[concat(&amp;#39;Microsoft.Storage/storageAccounts/&amp;#39;, parameters(&amp;#39;storageAccountName&amp;#39;))]&amp;#34;,
        &amp;#34;vmNetworkLoop&amp;#34;
    ],
    &amp;#34;properties&amp;#34;: {
        &amp;#34;availabilitySet&amp;#34;: {
            &amp;#34;id&amp;#34;: &amp;#34;[resourceId(&amp;#39;Microsoft.Compute/availabilitySets&amp;#39;,&amp;#39;availabilitySet&amp;#39;)]&amp;#34;
        },
        &amp;#34;hardwareProfile&amp;#34;: {
            &amp;#34;vmSize&amp;#34;: &amp;#34;[parameters(&amp;#39;vmSize&amp;#39;)]&amp;#34;
        },
        &amp;#34;osProfile&amp;#34;: {
            &amp;#34;computername&amp;#34;: &amp;#34;[concat(&amp;#39;vm&amp;#39;,copyIndex(1))]&amp;#34;,
            &amp;#34;adminUsername&amp;#34;: &amp;#34;[parameters(&amp;#39;adminUsername&amp;#39;)]&amp;#34;,
            &amp;#34;adminPassword&amp;#34;: &amp;#34;[parameters(&amp;#39;adminPassword&amp;#39;)]&amp;#34;
        },
        &amp;#34;storageProfile&amp;#34;: {
            &amp;#34;imageReference&amp;#34;: {
                &amp;#34;publisher&amp;#34;: &amp;#34;[variables(&amp;#39;imagePublisher&amp;#39;)]&amp;#34;,
                &amp;#34;offer&amp;#34;: &amp;#34;[variables(&amp;#39;imageOffer&amp;#39;)]&amp;#34;,
                &amp;#34;sku&amp;#34;: &amp;#34;[parameters(&amp;#39;windowsOSVersion&amp;#39;)]&amp;#34;,
                &amp;#34;version&amp;#34;: &amp;#34;latest&amp;#34;
            },
            &amp;#34;osDisk&amp;#34;: {
                &amp;#34;name&amp;#34;: &amp;#34;osdisk&amp;#34;,
                &amp;#34;vhd&amp;#34;: {
                    &amp;#34;uri&amp;#34;: &amp;#34;[concat(&amp;#39;http://&amp;#39;,parameters(&amp;#39;storageAccountName&amp;#39;),&amp;#39;.blob.core.windows.net/vhds/&amp;#39;, concat(&amp;#39;vm&amp;#39;,copyIndex(1),&amp;#39;-osdisk.vhd&amp;#39;))]&amp;#34;
                },
                &amp;#34;caching&amp;#34;: &amp;#34;ReadWrite&amp;#34;,
                &amp;#34;createOption&amp;#34;: &amp;#34;FromImage&amp;#34;
            }
        },
        &amp;#34;networkProfile&amp;#34;: {
            &amp;#34;networkInterfaces&amp;#34;: [
                {
                    &amp;#34;id&amp;#34;: &amp;#34;[resourceId(&amp;#39;Microsoft.Network/networkInterfaces&amp;#39;,concat(&amp;#39;vm&amp;#39;,CopyIndex(1),&amp;#39;-nif&amp;#39;))]&amp;#34;
                }
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We, once again, use a copy object in this definition to create as many virtual machines as we need based on the derived instance count. We also attach (line number 46) the network interfaces created in an earlier step. Once these VMs are created, we need to join them to the domain we created using DSC extension earlier. This is done using DSC again!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Compute/virtualMachines/extensions&amp;#34;,
    &amp;#34;copy&amp;#34;: {
        &amp;#34;name&amp;#34;: &amp;#34;vmDomainLoop&amp;#34;,
        &amp;#34;count&amp;#34;: &amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
    },
    &amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;vm&amp;#39;,copyIndex(1),&amp;#39;/domainjoin&amp;#39;)]&amp;#34;,
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-05-01-preview&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;dependsOn&amp;#34;: [
        &amp;#34;vmLoop&amp;#34;
    ],
    &amp;#34;properties&amp;#34;: {
        &amp;#34;publisher&amp;#34;: &amp;#34;Microsoft.Powershell&amp;#34;,
        &amp;#34;type&amp;#34;: &amp;#34;DSC&amp;#34;,
        &amp;#34;typeHandlerVersion&amp;#34;: &amp;#34;2.8&amp;#34;,
        &amp;#34;settings&amp;#34;: {
            &amp;#34;ModulesUrl&amp;#34;: &amp;#34;[concat(parameters(&amp;#39;assetLocation&amp;#39;),&amp;#39;/Configuration.zip&amp;#39;)]&amp;#34;,
            &amp;#34;ConfigurationFunction&amp;#34;: &amp;#34;Configuration.ps1\\DomainJoin&amp;#34;,
            &amp;#34;Properties&amp;#34;: {
                &amp;#34;DomainName&amp;#34;: &amp;#34;[parameters(&amp;#39;adDomainName&amp;#39;)]&amp;#34;,
                &amp;#34;AdminCreds&amp;#34;: {
                    &amp;#34;UserName&amp;#34;: &amp;#34;[parameters(&amp;#39;adminUsername&amp;#39;)]&amp;#34;,
                    &amp;#34;Password&amp;#34;: &amp;#34;PrivateSettingsRef:adminPassword&amp;#34;
                }
            }
        },
        &amp;#34;protectedSettings&amp;#34;: {
            &amp;#34;Items&amp;#34;: {
                &amp;#34;adminPassword&amp;#34;: &amp;#34;[parameters(&amp;#39;adminPassword&amp;#39;)]&amp;#34;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Line numbers 18 and 19 got the real magic that we need to join an existing domain. I packaged all DSC configurations I need for the DC creation and domain join into the configuration.zip file. We give this path to the DSC extension and tell this extension to use the &lt;em&gt;DomainJoin&lt;/em&gt; configuration from the Configuration.ps1 file from the zip package.&lt;/p&gt;
&lt;p&gt;This completes the resource definitions needed for the scenario we have. The complete ARM template is rather lengthy. So, I will not put the entire contents here but you can find it at &lt;a href=&#34;https://github.com/rchaganti/armseries/blob/master/arm-series_Storage-VirtualNet-LinkedTemplate-Complete.json&#34;&gt;https://github.com/rchaganti/armseries/blob/master/arm-series_Storage-VirtualNet-LinkedTemplate-Complete.json&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can optionally click on the below button to deploy the complete template right away.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Storage-VirtualNet-LinkedTemplate-Complete.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;Once you deploy this, you can verify that we have the configuration done in the right away by looking at the load balancer NAT rules and how they are mapped to the VMs in the backendpool.&lt;/p&gt;
&lt;p&gt;This completes our learning of the basics of ARM template language. Hope you have learned enough to go get started with writing ARM templates. I will continue this series writing about the best practices, tips and tricks around ARM template authoring. Stay tuned for more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Using Linked Templates</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-linked-templates/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-linked-templates/</guid>
      <description>&lt;p&gt;One of the ARM template authoring best practices is to decompose the JSON template, if applicable, into multiple target-specific templates. Think of this as creating re-usable code. You can leverage the re-usable parts of your code within multiple aspects of your application or the deployment.&lt;/p&gt;
&lt;p&gt;For linking different external templates within the main template, we need to define the &lt;em&gt;Microsoft.Resources/deployments&lt;/em&gt; resource instance. Before we proceed let us look at the scenario for which we are building an ARM template.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate7-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;So far in this series, we have looked at building an ARM template that deploys the following components of this scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A storage account&lt;/li&gt;
&lt;li&gt;A virtual network&lt;/li&gt;
&lt;li&gt;A public IP address&lt;/li&gt;
&lt;li&gt;A load balancer&lt;/li&gt;
&lt;li&gt;Virtual network interfaces for the DC and other VMs based on the environment type.&lt;/li&gt;
&lt;li&gt;Finally, a VM with DNS and Directory Services running in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate7-2&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;By default, the Azure based IaaS deployments use the Azure DNS. If you have deployed the template that we built in the previous part of this series, you will notice that the virtual network us configured to use Azure DNS.&lt;/p&gt;
&lt;p&gt;Since we deployed a VM that runs our own DNS and directory services, we now want to use the custom DNS in the Azure deployment so that other VMs in the deployment can join the domain that we created using the PowerShell DSC configuration.&lt;/p&gt;
&lt;p&gt;For this, we will use an external template and call it inside our main template. What we essentially need to do here is to update the existing virtual network to use the custom DNS. Here is how it looks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
  &amp;#34;$schema&amp;#34;: &amp;#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;#34;,
  &amp;#34;contentVersion&amp;#34;: &amp;#34;1.0.0.0&amp;#34;,
  &amp;#34;parameters&amp;#34;: {
    &amp;#34;virtualNetworkName&amp;#34;: {
      &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
      &amp;#34;metadata&amp;#34;: {
        &amp;#34;description&amp;#34;: &amp;#34;The name of the Virtual Network to Create&amp;#34;
      }
    },
    &amp;#34;virtualNetworkAddressRange&amp;#34;: {
      &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
      &amp;#34;metadata&amp;#34;: {
        &amp;#34;description&amp;#34;: &amp;#34;The address range of the new VNET in CIDR format&amp;#34;
      },
      &amp;#34;defaultValue&amp;#34;: &amp;#34;10.0.0.0/16&amp;#34;
    },
    &amp;#34;subnetName&amp;#34;: {
      &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
      &amp;#34;metadata&amp;#34;: {
        &amp;#34;description&amp;#34;: &amp;#34;The name of the subnet created in the new VNET&amp;#34;
      }
    },
    &amp;#34;subnetRange&amp;#34;: {
      &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
      &amp;#34;metadata&amp;#34;: {
        &amp;#34;description&amp;#34;: &amp;#34;The address range of the subnet created in the new VNET&amp;#34;
      },
      &amp;#34;defaultValue&amp;#34;: &amp;#34;10.0.0.0/24&amp;#34;
    },
    &amp;#34;DNSServerAddress&amp;#34;: {
      &amp;#34;type&amp;#34;: &amp;#34;array&amp;#34;,
      &amp;#34;metadata&amp;#34;: {
        &amp;#34;description&amp;#34;: &amp;#34;The DNS address(es) of the DNS Server(s) used by the VNET&amp;#34;
      }
    }
  },
  &amp;#34;resources&amp;#34;: [
    {
      &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-05-01-preview&amp;#34;,
      &amp;#34;name&amp;#34;: &amp;#34;[parameters(&amp;#39;virtualNetworkName&amp;#39;)]&amp;#34;,
      &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Network/virtualNetworks&amp;#34;,
      &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
      &amp;#34;properties&amp;#34;: {
        &amp;#34;addressSpace&amp;#34;: {
          &amp;#34;addressPrefixes&amp;#34;: [
            &amp;#34;[parameters(&amp;#39;virtualNetworkAddressRange&amp;#39;)]&amp;#34;
          ]
        },
        &amp;#34;dhcpOptions&amp;#34;: {
          &amp;#34;dnsServers&amp;#34;: &amp;#34;[parameters(&amp;#39;DNSServerAddress&amp;#39;)]&amp;#34;
        },
        &amp;#34;subnets&amp;#34;: [
          {
            &amp;#34;name&amp;#34;: &amp;#34;[parameters(&amp;#39;subnetName&amp;#39;)]&amp;#34;,
            &amp;#34;properties&amp;#34;: {
              &amp;#34;addressPrefix&amp;#34;: &amp;#34;[parameters(&amp;#39;subnetRange&amp;#39;)]&amp;#34;
            }
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above template is just another ARM JSON template. It has the same syntax. We have defined parameters that are needed for updating the virtual network to use the custom DNS that we just configured. let us save this as &lt;em&gt;vnet-with-dns-server.json&lt;/em&gt; and store it at a location that is accessible to the ARM deployment engine. I chose to store it in a &lt;a href=&#34;https://github.com/rchaganti/azure-quickstart-templates/blob/master/201-vm-domain-join/vnet-with-dns-server.json&#34;&gt;public Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we need to link this template to the main ARM template that we have been authoring. Here is how it is done in the main template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-01-01&amp;#34;,
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Resources/deployments&amp;#34;,
    &amp;#34;name&amp;#34;: &amp;#34;updatevnetdns&amp;#34;,
    &amp;#34;dependsOn&amp;#34;: [
        &amp;#34;[concat(&amp;#39;Microsoft.Compute/virtualMachines/&amp;#39;, parameters(&amp;#39;dcVMName&amp;#39;),&amp;#39;/extensions/createadforest&amp;#39;)]&amp;#34;
    ],
    &amp;#34;properties&amp;#34;: {
        &amp;#34;mode&amp;#34;: &amp;#34;Incremental&amp;#34;,
        &amp;#34;templateLink&amp;#34;: {
            &amp;#34;uri&amp;#34;: &amp;#34;[concat(parameters(&amp;#39;assetLocation&amp;#39;),&amp;#39;/vnet-with-dns-server.json&amp;#39;)]&amp;#34;,
            &amp;#34;contentVersion&amp;#34;: &amp;#34;1.0.0.0&amp;#34;
        },
        &amp;#34;parameters&amp;#34;: {
            &amp;#34;virtualNetworkName&amp;#34;: {
                &amp;#34;value&amp;#34;: &amp;#34;[parameters(&amp;#39;vNetName&amp;#39;)]&amp;#34;
            },
            &amp;#34;virtualNetworkAddressRange&amp;#34;: {
                &amp;#34;value&amp;#34;: &amp;#34;[variables(&amp;#39;vNetPrefix&amp;#39;)]&amp;#34;
            },
            &amp;#34;subnetName&amp;#34;: {
                &amp;#34;value&amp;#34;: &amp;#34;[variables(&amp;#39;vNetSubnet1Name&amp;#39;)]&amp;#34;
            },
            &amp;#34;subnetRange&amp;#34;: {
                &amp;#34;value&amp;#34;: &amp;#34;[variables(&amp;#39;vNetSubnet1Prefix&amp;#39;)]&amp;#34;
            },
            &amp;#34;DNSServerAddress&amp;#34;: {
                &amp;#34;value&amp;#34;: [
                    &amp;#34;[variables(&amp;#39;dnsServerPrivateIp&amp;#39;)]&amp;#34;
                ]
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within this resource instance, we defined a dependency (line number 6) on the PowerShell DSC extension that creates the AD forest. We don’t want the linked template to execute until the DNS service is created in the DC VM. Line number 11 defines the link our external template that will configure the custom DNS settings. _vnet-with-dns-server.json _has a few parameters defined for collecting required custom DNS configuration.&lt;/p&gt;
&lt;p&gt;Within the main template, we need to pass the parameter values to the external template. This is done using the parameters element within the &lt;em&gt;Microsoft.Resources/deployments&lt;/em&gt; resource instance. For the parameter values, we use either what is already gathered from the user using the main template or what is defined in the variables element of the main template. This is how state can be shared between multiple templates. If we need to return some data from the linked template to the main template, we can do so using the outputs element within the linked template. In our scenario, we don’t need any information from the linked template and therefore we will not use the outputs element.&lt;/p&gt;
&lt;p&gt;Also, notice line number 9. The mode property within the properties element is set to incremental. This is needed because we already have some of the components within the template deployed. By setting the deployment mode to incremental, we tell the deployment engine to add the new resources or update existing resource configuration within the resource group without deleting any existing resources in the group. In our example, we are updating the configuration of an existing virtual network to use the custom DNS. so, the incremental deployment mode is necessary here.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Storage-VirtualNet-LinkedTemplate-DNS_Update.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate7-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Once you deploy this updated template, you will see that the virtual network within the resource group gets set to use the custom DNS deployed using the PowerShell DSC extension.&lt;/p&gt;
&lt;p&gt;In the next part of this series, we will look at adding more virtual machines to the deployment based on the &lt;em&gt;environmentType&lt;/em&gt; selected within the template parameters. By the end of next part, we will completely functional ARM template that deploys our scenario end to end.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Defining Resource Dependencies</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-defining-resource-dependencies/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-defining-resource-dependencies/</guid>
      <description>&lt;p&gt;We will continue learning about building ARM templates by looking at how we can define dependencies between resources. To recap, here is the scenario we are working on.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate6-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the earlier parts of this series, we created the storage account, virtual network, a public IP, a load balancer, and added all inbound NAT rules required for the virtual machine RDP access. If you notice, we have components that depend on others. For example, the inbound NAT rules depend on the load balancer. Similarly, VMs depend on network interfaces which in turn depend on the virtual network. In the absence of dependencies, ARM will attempt to deploy these resources in parallel which may result in errors. So, within the resource template, we need to define these dependencies so that ARM can make decisions about the deployment sequence. There are multiple ways of doing this.&lt;/p&gt;
&lt;h4 id=&#34;using-dependson&#34;&gt;Using DependsOn&lt;/h4&gt;
&lt;p&gt;If you have noticed in the earlier parts of this series, we have used &lt;em&gt;DependsOn&lt;/em&gt; property within the resource element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-06-15&amp;#34;,
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Network/loadBalancers/inboundNatRules&amp;#34;,
    &amp;#34;copy&amp;#34;: {
        &amp;#34;name&amp;#34;: &amp;#34;lbRdpNatLoop&amp;#34;,
        &amp;#34;count&amp;#34;: &amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
    },
    &amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;/loadbalancer/&amp;#39;,&amp;#39;VM-&amp;#39;, copyIndex(1),&amp;#39;-RDP&amp;#39;)]&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;dependsOn&amp;#34;: [
        &amp;#34;Microsoft.Network/loadBalancers/loadBalancer&amp;#34;
    ],
    &amp;#34;properties&amp;#34;: {
        &amp;#34;frontendIPConfiguration&amp;#34;: {
            &amp;#34;id&amp;#34;: &amp;#34;[resourceId(&amp;#39;Microsoft.Network/loadBalancers/frontendIPConfigurations&amp;#39;,&amp;#39;loadBalancer&amp;#39;,variables(&amp;#39;lbFrontend&amp;#39;))]&amp;#34;
        },
        &amp;#34;protocol&amp;#34;: &amp;#34;tcp&amp;#34;,
        &amp;#34;frontendPort&amp;#34;: &amp;#34;[add(3389, copyIndex(1))]&amp;#34;,
        &amp;#34;backendPort&amp;#34;: 3389,
        &amp;#34;enableFloatingIP&amp;#34;: false
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look at line number 11, we added &lt;em&gt;DependsOn&lt;/em&gt; property to define that the &lt;em&gt;inboundNatRules&lt;/em&gt; depend on the load balancer configuration. This is straightforward and very easy to define. You can use template language functions such as &lt;em&gt;ResourceId()&lt;/em&gt; or &lt;em&gt;concat()&lt;/em&gt; as well within the value of &lt;em&gt;DependsOn&lt;/em&gt; and dynamically build these dependencies. You can provide more than one value here as a comma-separated list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;dependsOn&amp;#34;: [
    &amp;#34;Microsoft.Network/loadBalancers/loadBalancer&amp;#34;,
    &amp;#34;Microsoft.Network/virtualNetworks/vNet1&amp;#34;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;using-references&#34;&gt;Using References&lt;/h4&gt;
&lt;p&gt;The second method is to define reference to the dependent resource. Let us create a virtual network interface the AD VM in our scenario. This depends on the virtual network resource that we already created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-05-01-preview&amp;#34;,
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Network/networkInterfaces&amp;#34;,
    &amp;#34;name&amp;#34;: &amp;#34;dcvmnif&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;properties&amp;#34;: {
        &amp;#34;ipConfigurations&amp;#34;: [
            {
                &amp;#34;name&amp;#34;: &amp;#34;[concat(reference(parameters(&amp;#39;vNetName&amp;#39;)).subnets[0].name,parameters(&amp;#39;dcVmName&amp;#39;),&amp;#39;-nifconfig&amp;#39;)]&amp;#34;,
                &amp;#34;properties&amp;#34;: {
                    &amp;#34;privateIPAllocationMethod&amp;#34;: &amp;#34;Static&amp;#34;,
                    &amp;#34;privateIPAddress&amp;#34;: &amp;#34;[variables(&amp;#39;dnsServerPrivateIp&amp;#39;)]&amp;#34;,
                    &amp;#34;subnet&amp;#34;: {
                        &amp;#34;id&amp;#34;: &amp;#34;[variables(&amp;#39;vNetSubnet1ID&amp;#39;)]&amp;#34;
                    }
                }
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Observe line number 9. We used the reference() function to get a reference to the virtual network object we created and get the subnet name from there and use it to construct the &lt;em&gt;IPConfiguration&lt;/em&gt; name. When ARM engine finds this reference, it creates an implicit dependency on the virtual network that we referenced. There is no need here to specify &lt;em&gt;DependsOn&lt;/em&gt; property.&lt;/p&gt;
&lt;p&gt;Note that we cannot use the reference() function as a part of the resource instance name. This is because the ARM engine must know the names of the resource instances before the deployment can start.&lt;/p&gt;
&lt;h4 id=&#34;child-or-nested-resources&#34;&gt;Child or Nested Resources&lt;/h4&gt;
&lt;p&gt;The 3rd way to define dependencies is to use child resources. Let us see an example before we discuss this further.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
    &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-06-15&amp;#34;,
    &amp;#34;type&amp;#34;: &amp;#34;Microsoft.Compute/virtualMachines&amp;#34;,
    &amp;#34;name&amp;#34;: &amp;#34;[Parameters(&amp;#39;dcVMName&amp;#39;)]&amp;#34;,
    &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
    &amp;#34;dependsOn&amp;#34;: [
        &amp;#34;[resourceId(&amp;#39;Microsoft.Storage/storageAccounts&amp;#39;,parameters(&amp;#39;storageAccount&amp;#39;))]&amp;#34;,
        &amp;#34;[resourceId(&amp;#39;Microsoft.Network/networkInterfaces&amp;#39;,concat(parameters(&amp;#39;dcVMName&amp;#39;),&amp;#39;-nif&amp;#39;))]&amp;#34;
    ],
    &amp;#34;properties&amp;#34;: {
        &amp;#34;hardwareProfile&amp;#34;: {
            &amp;#34;vmSize&amp;#34;: &amp;#34;[parameters(&amp;#39;vmSize&amp;#39;)]&amp;#34;
        },
        &amp;#34;osProfile&amp;#34;: {
            &amp;#34;computerName&amp;#34;: &amp;#34;[parameters(&amp;#39;dcVMName&amp;#39;)]&amp;#34;,
            &amp;#34;adminUsername&amp;#34;: &amp;#34;[parameters(&amp;#39;adminUsername&amp;#39;)]&amp;#34;,
            &amp;#34;adminPassword&amp;#34;: &amp;#34;[parameters(&amp;#39;adminPassword&amp;#39;)]&amp;#34;
        },
        &amp;#34;storageProfile&amp;#34;: {
            &amp;#34;imageReference&amp;#34;: {
                &amp;#34;publisher&amp;#34;: &amp;#34;[variables(&amp;#39;imagePublisher&amp;#39;)]&amp;#34;,
                &amp;#34;offer&amp;#34;: &amp;#34;[variables(&amp;#39;imageOffer&amp;#39;)]&amp;#34;,
                &amp;#34;sku&amp;#34;: &amp;#34;[parameters(&amp;#39;windowsOSVersion&amp;#39;)]&amp;#34;,
                &amp;#34;version&amp;#34;: &amp;#34;latest&amp;#34;
            },
            &amp;#34;osDisk&amp;#34;: {
                &amp;#34;name&amp;#34;: &amp;#34;[concat(parameters(&amp;#39;dcVMName&amp;#39;), &amp;#39;-osdisk.vhd&amp;#39;)]&amp;#34;,
                &amp;#34;vhd&amp;#34;: {
                    &amp;#34;uri&amp;#34;: &amp;#34;[concat(&amp;#39;http://&amp;#39;,parameters(&amp;#39;storageAccount&amp;#39;),&amp;#39;.blob.core.windows.net/vhds/&amp;#39;, parameters(&amp;#39;dcVMName&amp;#39;), &amp;#39;-osdisk.vhd&amp;#39;)]&amp;#34;
                },
                &amp;#34;caching&amp;#34;: &amp;#34;ReadWrite&amp;#34;,
                &amp;#34;createOption&amp;#34;: &amp;#34;FromImage&amp;#34;
            },
            &amp;#34;dataDisks&amp;#34;: [
                {
                    &amp;#34;name&amp;#34;: &amp;#34;[concat(parameters(&amp;#39;dcVMName&amp;#39;), &amp;#39;-data-disk1.vhd&amp;#39;)]&amp;#34;,
                    &amp;#34;vhd&amp;#34;: {
                        &amp;#34;uri&amp;#34;: &amp;#34;[concat(&amp;#39;http://&amp;#39;,parameters(&amp;#39;storageAccount&amp;#39;),&amp;#39;.blob.core.windows.net/vhds/&amp;#39;, parameters(&amp;#39;dcVMName&amp;#39;), &amp;#39;-data-disk1.vhd&amp;#39;)]&amp;#34;
                    },
                    &amp;#34;caching&amp;#34;: &amp;#34;None&amp;#34;,
                    &amp;#34;createOption&amp;#34;: &amp;#34;Empty&amp;#34;,
                    &amp;#34;diskSizeGB&amp;#34;: &amp;#34;1000&amp;#34;,
                    &amp;#34;lun&amp;#34;: 0
                }
            ]
        },
        &amp;#34;networkProfile&amp;#34;: {
            &amp;#34;networkInterfaces&amp;#34;: [
                {
                    &amp;#34;id&amp;#34;: &amp;#34;[resourceId(&amp;#39;Microsoft.Network/networkInterfaces&amp;#39;,concat(parameters(&amp;#39;dcVMName&amp;#39;),&amp;#39;-nif&amp;#39;))]&amp;#34;
                }
            ]
        },
        &amp;#34;diagnosticsProfile&amp;#34;: {
            &amp;#34;bootDiagnostics&amp;#34;: {
                &amp;#34;enabled&amp;#34;: &amp;#34;true&amp;#34;,
                &amp;#34;storageUri&amp;#34;: &amp;#34;[concat(&amp;#39;http://&amp;#39;,parameters(&amp;#39;storageAccount&amp;#39;),&amp;#39;.blob.core.windows.net&amp;#39;)]&amp;#34;
            }
        }
    },
    &amp;#34;resources&amp;#34;: [
        {
            &amp;#34;type&amp;#34;: &amp;#34;extensions&amp;#34;,
            &amp;#34;name&amp;#34;: &amp;#34;createadforest&amp;#34;,
            &amp;#34;apiVersion&amp;#34;: &amp;#34;2015-05-01-preview&amp;#34;,
            &amp;#34;location&amp;#34;: &amp;#34;[resourceGroup().location]&amp;#34;,
            &amp;#34;dependsOn&amp;#34;: [
                &amp;#34;[concat(&amp;#39;Microsoft.Compute/virtualMachines/&amp;#39;,parameters(&amp;#39;dcVMName&amp;#39;))]&amp;#34;
            ],
            &amp;#34;properties&amp;#34;: {
                &amp;#34;publisher&amp;#34;: &amp;#34;Microsoft.Powershell&amp;#34;,
                &amp;#34;type&amp;#34;: &amp;#34;DSC&amp;#34;,
                &amp;#34;typeHandlerVersion&amp;#34;: &amp;#34;2.8&amp;#34;,
                &amp;#34;settings&amp;#34;: {
                    &amp;#34;ModulesUrl&amp;#34;: &amp;#34;[concat(parameters(&amp;#39;assetLocation&amp;#39;),&amp;#39;/Configuration.zip&amp;#39;)]&amp;#34;,
                    &amp;#34;ConfigurationFunction&amp;#34;: &amp;#34;CreateADPDC.ps1\\CreateADPDC&amp;#34;,
                    &amp;#34;Properties&amp;#34;: {
                        &amp;#34;DomainName&amp;#34;: &amp;#34;[parameters(&amp;#39;adDomainName&amp;#39;)]&amp;#34;,
                        &amp;#34;AdminCreds&amp;#34;: {
                            &amp;#34;UserName&amp;#34;: &amp;#34;[parameters(&amp;#39;adminUsername&amp;#39;)]&amp;#34;,
                            &amp;#34;Password&amp;#34;: &amp;#34;PrivateSettingsRef:AdminPassword&amp;#34;
                        }
                    }
                },
                &amp;#34;protectedSettings&amp;#34;: {
                    &amp;#34;Items&amp;#34;: {
                        &amp;#34;AdminPassword&amp;#34;: &amp;#34;[parameters(&amp;#39;adminPassword&amp;#39;)]&amp;#34;
                    }
                }
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example is quite long. It is the virtual machine resource instance that we need for the domain controller. Apart from all the virtual machine properties such as storage profile and OS profile, we have something interesting at line number 61. We have another resources element within the VM resource definition. As with the top-level resources element, this is also a JSON array and contains the resource definition for the &lt;a href=&#34;http://www.powershellmagazine.com/2014/08/05/understanding-azure-vm-dsc-extension/&#34;&gt;VM DSC extension&lt;/a&gt;. It is obvious that VM DSC extension without a VM is meaningless. By defining this as a child or nested resource inside the VM resource definition, we are creating an implicit dependency between the VM and the VM DSC extension. When ARM engine looks at this in the template, it schedules VM creation before the DSC extension. BTW, this VM DSC extension has the DSC configuration required to build the domain controller in this deployment.&lt;/p&gt;
&lt;p&gt;Always make sure you that you create enough flexibility within the template for someone else to take this and deploy the template in their own environment.To this extent, I have used a parameter called &lt;em&gt;assetLocation&lt;/em&gt; (line 75) in the DSC extension properties. You can call this whatever you want. This parameter specifies where all the template assets such as DSC configuration scripts and any additional template files are stored.&lt;/p&gt;
&lt;p&gt;So far in this part, we have seen three different ways of defining dependencies between resources. If you check the template that we &lt;a href=&#34;https://github.com/rchaganti/armseries/blob/master/arm-series_Storage-VirtualNet-LB_vNIC-VM.json&#34;&gt;built so far for this scenario&lt;/a&gt;, you will observe that I have added a few more variables and parameters needed for the DC VM and its configuration.&lt;/p&gt;
&lt;p&gt;Go ahead and deploy this.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Storage-VirtualNet-LB_vNIC-VM.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;In the next part, we will look at the nested template deployments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Using Copy Object</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-copy-object/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-copy-object/</guid>
      <description>&lt;p&gt;If you are following this series, by now you know how to use parameters and variables in ARM template language. We used that knowledge to create a template that creates relevant things to like storage account and virtual network. Let us revisit the scenario.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate5-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In this part, we will extend the template to add publicIP, load balancer, and RDP endpoints for the virtual machines. Before we do that, let us review what we need. To achieve what we want in this, we will use copy object in the template.&lt;/p&gt;
&lt;h4 id=&#34;what-iscopy-object&#34;&gt;What is Copy Object?&lt;/h4&gt;
&lt;p&gt;In our template, we already have the storage account and virtual network configuration defined. What we now need is a load balancer with a public IP so that we can access this deployment from the Internet. Also, we need the inbound NAT rules for enabling RDP access to the VMs in this deployment. But before we create the RDP rules for each VM, we need to know how many VM instances we are deploying. As shown in the scenario diagram, we need to be able to deploy this template within development, test, or production environment. Depending on the selected environment, we will have one AD DC VM along with 1 (development) or 2 (test) or 3 (production) VMs that join the AD domain. Therefore, we need a way to capture the environment type as an input parameter. Also, based on the environment type selected by the user, we need to decide on the number of VM instances required for the deployment and then create only relevant number of inbound NAT rules within the load balancer.&lt;/p&gt;
&lt;p&gt;There are multiple ways to achieve this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add multiple resource definitions; one for each resource instance we need. This does not give the flexibility to dynamically add or remove instances based on the VM count we need. This method is not efficient.&lt;/li&gt;
&lt;li&gt;Use some kind of iterator, like other programming languages, within a resource definition and tell ARM how many resource instances we need. This can be achieved using copy object technique in ARM templates.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before we go to the copy object discussion, let us first add more parameters and variables that are needed for this template. These additional parameters will also help us with defining the iteration count within the copy object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccount&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique name for the storage account.&amp;#34;&lt;/span&gt;
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Account type based on the storage redundancy requirements.&amp;#34;&lt;/span&gt;
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetName&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Name for the virtual network.&amp;#34;&lt;/span&gt;
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;DnsName&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique public DNS prefix for the deployment. The fqdn will look something like &amp;#39;&amp;amp;lt;dnsname&amp;amp;gt;.westus.cloudapp.azure.com&amp;#39;.&amp;#34;&lt;/span&gt;
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;environmentType&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Development&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Production&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Development&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Type of environment where this deployment should occur. This has an impact on the number of VMs to be depoloyed.&amp;#34;&lt;/span&gt;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within the new parameters, we have the &lt;em&gt;dnsName&lt;/em&gt; parameter that will be for external access. The &lt;em&gt;environmentType&lt;/em&gt; parameter is used to capture whether the user is deploying this template for dev, test, or production. However, based on this selection, we need a way to find out the number of VMs we need in the domain. That is, we need know the instance count for each environment. Remember our discussion on free-form vs known configurations? We don’t want to leave such choices to the end user. So, the place where this decision can be made will be in the variables element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetPrefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/16&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceGroup().Location, &amp;#39;-&amp;#39;, parameters(&amp;#39;vNetName&amp;#39;), &amp;#39;-&amp;#39;, &amp;#39;Subnet&amp;#39;)]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Prefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/24&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/virtualNetworks&amp;#39;,parameters(&amp;#39;vNetName&amp;#39;)),&amp;#39;/subnets/&amp;#39;,variables(&amp;#39;vNetSubnet1Name&amp;#39;))]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dnsServerPrivateIp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.8&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;deploymentSize&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Development&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Production&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;selectedDeployment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;deploymentSize&amp;#39;)[parameters(&amp;#39;environmentType&amp;#39;)]]&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within the variables element, we defined new variables for making it easier to select the environment type. The &lt;em&gt;deploymentSize&lt;/em&gt; variable defines a JSON object. Within this, we are associating &lt;em&gt;instancesCount&lt;/em&gt; to every deployment type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;deploymentSize&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Development&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Production&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use the &lt;em&gt;selectedDeployment&lt;/em&gt; variable to retrieve the value of &lt;em&gt;deploymentSize&lt;/em&gt; variable. This is done by associating the value of environmentType parameter and looking up for that in the &lt;em&gt;deploymentSize&lt;/em&gt; variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;selectedDeployment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;deploymentSize&amp;#39;)[parameters(&amp;#39;environmentType&amp;#39;)]]&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works because &lt;em&gt;deploymentSize&lt;/em&gt; is a JSON object similar to a dictionary. We can index into it using one of the key names. So, in this case, the key names will match the value passed to the &lt;em&gt;environmentType&lt;/em&gt; parameter and indexing into that will give us the right object within _deploymentSize. _Once we have the selectedDeployment variable populated, we can access the &lt;em&gt;instancesCount&lt;/em&gt; value by dot-referencing the property name. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should not be alien to us. We use &lt;em&gt;variables()&lt;/em&gt; function and pass the &lt;em&gt;selectedDeployment&lt;/em&gt; variable name to it. The resulting object has the &lt;em&gt;instancesCount&lt;/em&gt; property which can then be retrieved using dot-referencing. Now that we figured this out, let us go back to the discussion around multiple instance creation within a template.&lt;/p&gt;
&lt;h4 id=&#34;working-with-copy-object&#34;&gt;Working with Copy Object&lt;/h4&gt;
&lt;p&gt;As stated earlier, the reason we need &lt;em&gt;instancesCount&lt;/em&gt; value is because we need to tell ARM how many times it has to iterate for creating the resource for which we need multiple instances. This is done within the &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/articles/resource-group-create-multiple/#copy-copyindex-and-length&#34;&gt;copy object syntax&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;copy&amp;#34;: { 
    &amp;#34;name&amp;#34;: &amp;#34;copy loop name&amp;#34;, 
    &amp;#34;count&amp;#34;: &amp;#34;integer value&amp;#34; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;em&gt;name&lt;/em&gt; property within the &lt;em&gt;copy&lt;/em&gt; element defines a name for the iterator which can later be used for defining dependencies. The _count _property defines the number of times the iterator has to run. In our case, we will set the value of count property to the &lt;em&gt;instancesCount&lt;/em&gt; value we retrieve from the &lt;em&gt;selectedDeployment.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We place this inside the resource definition. In our scenario, we will use the copy object within &lt;em&gt;Microsoft.Network/loadBalancers/inboundNatRules&lt;/em&gt; resource type. Let us first see the new resources that we need to enable public IP and load balancer configuration. We will then review the resource definition to understand how we use the copy object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; [
    {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[ResourceGroup().Location]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;
        }
    },
    {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;vNetName&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/virtualNetworks&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[ResourceGroup().Location]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressSpace&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressPrefixes&amp;#34;&lt;/span&gt;: [
                    &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetPrefix&amp;#39;)]&amp;#34;&lt;/span&gt;
                ]
            },
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;subnets&amp;#34;&lt;/span&gt;: [
                {
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetSubnet1Name&amp;#39;)]&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressPrefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetSubnet1Prefix&amp;#39;)]&amp;#34;&lt;/span&gt;
                    }
                }
            ]
        }
    },
    {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/publicIPAddresses&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;publicIp&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;publicIPAllocationMethod&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Dynamic&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dnsSettings&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;domainNameLabel&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;DnsName&amp;#39;)]&amp;#34;&lt;/span&gt;
            }
        }
    },
    {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;loadBalancer&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/loadBalancers&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dependsOn&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/publicIPAddresses/publicIp&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;frontendIPConfigurations&amp;#34;&lt;/span&gt;: [
                {
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;lbFrontend&amp;#39;)]&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;publicIPAddress&amp;#34;&lt;/span&gt;: {
                            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceId(&amp;#39;Microsoft.Network/publicIPAddresses&amp;#39;,&amp;#39;publicIp&amp;#39;)]&amp;#34;&lt;/span&gt;
                        }
                    }
                }
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;backendAddressPools&amp;#34;&lt;/span&gt;: [
                {
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;lbBackendAddrPool&amp;#39;)]&amp;#34;&lt;/span&gt;
                }
            ]
        }
    },
    {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-06-15&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/loadBalancers/inboundNatRules&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;lbRdpNatLoop&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(&amp;#39;/loadbalancer/&amp;#39;,&amp;#39;VM-&amp;#39;, copyIndex(1),&amp;#39;-RDP&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dependsOn&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(&amp;#39;Microsoft.Network/loadBalancers/loadBalancer&amp;#39;)]&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;frontendIPConfiguration&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceId(&amp;#39;Microsoft.Network/loadBalancers/frontendIPConfigurations&amp;#39;,&amp;#39;loadBalancer&amp;#39;,variables(&amp;#39;lbFrontend&amp;#39;))]&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;frontendPort&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[add(3389, copyIndex(1))]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;backendPort&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3389&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;enableFloatingIP&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this updated resource collection, we have added three resource types. A public IP address to assign it to the load balancer, a load balancer that will act as a container for the VM endpoints, and finally, RDP endpoints based on the number of VM instances we need.&lt;/p&gt;
&lt;p&gt;Observe the highlighted lines in the resource collection. The copy object that we used within the inboundNATRules resource type tells ARM how many instances we need to create based on the VM count we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;copy&amp;#34;: {
    &amp;#34;name&amp;#34;: &amp;#34;lbRdpNatLoop&amp;#34;,
    &amp;#34;count&amp;#34;: &amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within an ARM template, for each resource type and its instances, the &lt;em&gt;name&lt;/em&gt; property should carry a unique value. Without this, you will see an error during deployment that multiple instances cannot use the same name. So, if you look at line number 77, we are dynamically constructing the value for &lt;em&gt;name.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;name&amp;#34;: &amp;#34;[concat(&amp;#39;/loadbalancer/&amp;#39;,&amp;#39;VM-&amp;#39;, copyIndex(1),&amp;#39;-RDP&amp;#39;)]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, we are concatenating ‘/loadbalancer/’ with ‘VM-‘ and then using the &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-functions/#copyindex&#34;&gt;&lt;em&gt;copyIndex()&lt;/em&gt;&lt;/a&gt; function and finally add ‘-RDP’. The &lt;em&gt;copyIndex()&lt;/em&gt; function gives us the iteration number. So, if we are creating three VM endpoints within this resource definition, we get iteration values 0, 1, and 2. The index always starts from 0. However, if we want to offset it to different value than zero, we can specify the value inside the &lt;em&gt;copyIndex()&lt;/em&gt; function. In my example, I am using 1 so that the values the template receives will be 1, 2, and 3. Since we are using the iteration number within the name value, we always get an unique identifier.&lt;/p&gt;
&lt;p&gt;Another function that we are using within this template update is the &lt;em&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-functions/#add&#34;&gt;add()&lt;/a&gt;&lt;/em&gt; function. This function, as its name suggests, adds integers. I am using this function to dynamically derive the frontend port number for the VM RDP endpoint.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;frontendPort&amp;#34;: &amp;#34;[add(3389, copyIndex(1))]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are doing this since all VM RDP endpoints should be accessible through the load balancer. By using add function, we are adding the iteration value to the RDP port (3389) to derive a unique value.&lt;/p&gt;
&lt;p&gt;Now that we have completed our discussion on the copy object and its usage, let us move on to see the ARM template update that creates storage account, virtual network, public IP, load balancer, and finally the VM RDP endpoints. We are not creating an RDP endpoint for the DC VM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique name for the storage account.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_RAGRS&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Account type based on the storage redundancy requirements.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetName&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Name for the virtual network.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;DnsName&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique public DNS prefix for the deployment. The fqdn will look something like &amp;#39;&amp;amp;lt;dnsname&amp;amp;gt;.westus.cloudapp.azure.com&amp;#39;.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;environmentType&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Development&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Production&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Development&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Type of environment where this deployment should occur. This has an impact on the number of VMs to be depoloyed.&amp;#34;&lt;/span&gt;
            }
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetPrefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/16&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceGroup().Location, &amp;#39;-&amp;#39;, parameters(&amp;#39;vNetName&amp;#39;), &amp;#39;-&amp;#39;, &amp;#39;Subnet&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Prefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/24&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/virtualNetworks&amp;#39;,parameters(&amp;#39;vNetName&amp;#39;)),&amp;#39;/subnets/&amp;#39;,variables(&amp;#39;vNetSubnet1Name&amp;#39;))]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dnsServerPrivateIp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.8&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;lbFrontend&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;lbFrontEnd&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;lbBackendAddrPool&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;lbBackEndPool&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;deploymentSize&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Development&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
            },
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
            },
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;Production&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;instancesCount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;selectedDeployment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;deploymentSize&amp;#39;)[parameters(&amp;#39;environmentType&amp;#39;)]]&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[ResourceGroup().Location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;
            }
        },
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;vNetName&amp;#39;)]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/virtualNetworks&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[ResourceGroup().Location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressSpace&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressPrefixes&amp;#34;&lt;/span&gt;: [
                        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetPrefix&amp;#39;)]&amp;#34;&lt;/span&gt;
                    ]
                },
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;subnets&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetSubnet1Name&amp;#39;)]&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressPrefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetSubnet1Prefix&amp;#39;)]&amp;#34;&lt;/span&gt;
                        }
                    }
                ]
            }
        },
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/publicIPAddresses&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;publicIp&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;publicIPAllocationMethod&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Dynamic&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dnsSettings&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;domainNameLabel&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;DnsName&amp;#39;)]&amp;#34;&lt;/span&gt;
                }
            }
        },
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;loadBalancer&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/loadBalancers&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dependsOn&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/publicIPAddresses/publicIp&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;frontendIPConfigurations&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;lbFrontend&amp;#39;)]&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;publicIPAddress&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceId(&amp;#39;Microsoft.Network/publicIPAddresses&amp;#39;,&amp;#39;publicIp&amp;#39;)]&amp;#34;&lt;/span&gt;
                            }
                        }
                    }
                ],
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;backendAddressPools&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;lbBackendAddrPool&amp;#39;)]&amp;#34;&lt;/span&gt;
                    }
                ]
            }
        },
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-06-15&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/loadBalancers/inboundNatRules&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;lbRdpNatLoop&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;selectedDeployment&amp;#39;).instancesCount]&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(&amp;#39;/loadbalancer/&amp;#39;,&amp;#39;VM-&amp;#39;, copyIndex(1),&amp;#39;-RDP&amp;#39;)]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dependsOn&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(&amp;#39;Microsoft.Network/loadBalancers/loadBalancer&amp;#39;)]&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;frontendIPConfiguration&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceId(&amp;#39;Microsoft.Network/loadBalancers/frontendIPConfigurations&amp;#39;,&amp;#39;loadBalancer&amp;#39;,variables(&amp;#39;lbFrontend&amp;#39;))]&amp;#34;&lt;/span&gt;
                },
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;frontendPort&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[add(3389, copyIndex(1))]&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;backendPort&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3389&lt;/span&gt;,
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;enableFloatingIP&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can go ahead and deploy this update by clicking on the button below. &lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Storage-VirtualNet-LB.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate5-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This brings up the portal and prompts for the parameter values we need for the deployment. Within the parameters, you will see the &lt;em&gt;environmentType&lt;/em&gt; dropdown with three possible values. I have selected Production as the input here and I expect to see three RDP endpoints created at the end of template deployment. Let us see if this worked.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate5-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://139.59.40.198/blog/uploads/2015/11/RDPEndpoints.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you see here, the endpoints with respective frontend port numbers are created. We will have to associate these endpoints to VM network interfaces and we will take that up in a later part. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Using Variables</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-variables/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-variables/</guid>
      <description>&lt;p&gt;If you have been following this series on &lt;a href=&#34;http://139.59.40.198/blog/series/arm-templates/&#34;&gt;ARM templates&lt;/a&gt;, in the last part, we started with a sample scenario that we are using to build an ARM template. Here it is again.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate4-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the &lt;a href=&#34;http://139.59.40.198/blog/building-azure-resource-manager-templates-using-parameters/&#34;&gt;last part&lt;/a&gt;, we completed creation of storage account required for backing the OS and data disks for virtual machines in the deployment. The next step in our scenario is to create the virtual network for the VM connectivity. A virtual network and any subnets required must exist before the creation of virtual machines. So, in today’s article, we will see how we can use variables in the ARM template language while incrementally building an ARM template for our scenario and add virtual network. Towards the end, we will review some best practices guidance with regards to using parameters and variables in developing ARM templates.&lt;/p&gt;
&lt;h4 id=&#34;working-with-variables&#34;&gt;Working with Variables&lt;/h4&gt;
&lt;p&gt;Variables in ARM template language can be used to simplify the template. For example, in our template, we will be using the subnet name at multiple places. There is no point repeating the same string everywhere for this. This may also lead to human errors such as unintentional misspelling of the subnet name. This type of errors will result in failure during the deployment. Instead, we can assign subnet name as a value to a variable and refer that variable within the template as needed. Also, variables in ARM template language will let us expand or construct other variable values. We will see examples of this in the template.&lt;/p&gt;
&lt;p&gt;Here is the generic syntax for variables in ARM template language.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;variable-name&amp;gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;variable-value&amp;gt;&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;variable-name&amp;gt;&amp;#34;&lt;/span&gt;: { 
       &lt;span style=&#34;color:#f00&#34;&gt;&amp;lt;variable-complex-type-value&amp;gt;&lt;/span&gt; 
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In general, variables is a JSON object which contains pairs of variable names and values. The variable value can be a complex type such as another JSON object. We will see these as examples as we add the variables needed to complete virtual network configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetPrefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/16&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceGroup().Location, &amp;#39;-&amp;#39;, parameters(&amp;#39;vNetName&amp;#39;), &amp;#39;-&amp;#39;, &amp;#39;Subnet&amp;#39;)]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Prefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/24&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/virtualNetworks&amp;#39;,parameters(&amp;#39;vNetName&amp;#39;)),&amp;#39;/subnets/&amp;#39;,variables(&amp;#39;vNetSubnet1Name&amp;#39;))]&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dnsServerPrivateIp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.8&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the virtual network required for our scenario, we defined a variable called &lt;em&gt;vNetPrefix&lt;/em&gt; and set a value “10.0.0.0/16”. This is the overall virtual network address scope. Within this vNet, we intend to create one subnet with address prefix “10.0.0.0/24” and this is represented using the variable _vNetSubnet1Prefix. _I have added another variable named &lt;em&gt;dnsServerPrivateIp&lt;/em&gt; to reserve an IP address for the AD domain controller VM. This is because we don’t want a DHCP assigned IP for the AD DC.&lt;/p&gt;
&lt;p&gt;You will also see that we are using another function within this variables element called &lt;em&gt;&lt;a href=&#34;https://azure.microsoft.com/en-in/documentation/articles/resource-group-template-functions/#concat&#34;&gt;concat()&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceGroup().Location, &amp;#39;-&amp;#39;, parameters(&amp;#39;vNetName&amp;#39;), &amp;#39;-&amp;#39;, &amp;#39;Subnet&amp;#39;)]&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function can take ‘n’ strings and concatenate them together. In the example above, we are retrieving the resource group location and then concatenate that with ‘-‘ and the value of the &lt;em&gt;vNetName&lt;/em&gt; parameter. This variable value is then used to derive the value of the variable &lt;em&gt;vNetSubnet1ID.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1ID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/virtualNetworks&amp;#39;,parameters(&amp;#39;vNetName&amp;#39;)),&amp;#39;/subnets/&amp;#39;,variables(&amp;#39;vNetSubnet1Name&amp;#39;))]&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As I’d mentioned earlier, variables values can be generated dynamically based on other values. If you observe the above code snippet, we are constructing the &lt;em&gt;vNetSubnet1ID&lt;/em&gt; by retrieving the resource ID for the virtual network that we are creating. The &lt;em&gt;resourceId()&lt;/em&gt; function returns the unique identifier of a resource and it won’t be available until the vNet is created. This shows us that the values of variables can be derived from other related configuration settings. We have used the &lt;em&gt;concat()&lt;/em&gt; function again here to concatenate the resource Id value of the vNet with ‘/subnets/’ and the value of the &lt;em&gt;vNetSubnet1Name&lt;/em&gt; variable that we derived in last step. Similar to &lt;em&gt;parameters()&lt;/em&gt; function, the &lt;em&gt;&lt;a href=&#34;https://azure.microsoft.com/en-in/documentation/articles/resource-group-authoring-templates/#variables&#34;&gt;variables()&lt;/a&gt;&lt;/em&gt; function gives us the value of the variable name specified.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;[variables(&amp;#39;vNetSubnet1Name&amp;#39;)]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;em&gt;variables()&lt;/em&gt; function can be used with the variables element as well as the resource definitions and outputs element. Like any other expression in template language, anytime you want to use this function, it must be enclosed in square brackets ([]).&lt;/p&gt;
&lt;p&gt;We will see more about creating variables with complex value types in a later part but fundamentals that you learned here are applicable even to complex types. Now that we have the variables needed for the vNet creation, let us go ahead and add the virtual network resource definition to our template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;MyARMDemo&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;minLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;maxLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;24&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique name for the storage account.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_RAGRS&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Account type based on the storage redundancy requirements.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetName&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;myARMDemo&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique name of the virtual network for this deployment&amp;#34;&lt;/span&gt;
            }
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetPrefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/16&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceGroup().Location, &amp;#39;-&amp;#39;, parameters(&amp;#39;vNetName&amp;#39;), &amp;#39;-&amp;#39;, &amp;#39;Subnet&amp;#39;)]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1Prefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.0/24&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;vNetSubnet1ID&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(resourceId(&amp;#39;Microsoft.Network/virtualNetworks&amp;#39;,parameters(&amp;#39;vNetName&amp;#39;)),&amp;#39;/subnets/&amp;#39;,variables(&amp;#39;vNetSubnet1Name&amp;#39;))]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;dnsServerPrivateIp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10.0.0.8&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[ResourceGroup().Location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;
            }
        },
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;vNetName&amp;#39;)]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Network/virtualNetworks&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[ResourceGroup().Location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressSpace&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressPrefixes&amp;#34;&lt;/span&gt;: [
                        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetPrefix&amp;#39;)]&amp;#34;&lt;/span&gt;
                    ]
                },
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;subnets&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetSubnet1Name&amp;#39;)]&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addressPrefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;vNetSubnet1Prefix&amp;#39;)]&amp;#34;&lt;/span&gt;
                        }
                    }
                ]
            }
        }        
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I added a &lt;em&gt;vNetName&lt;/em&gt; parameter to the parameters element so that user deploying this template can provide that as input. We can go ahead and test if this is template is valid or not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Test-AzureRmResourceGroupDeployment&lt;/span&gt; -ResourceGroupName myARMDemo -TemplateFile .\arm-series_Storage-VirtualNet.json -storageAccountName myARMDemo -storageAccountType Standard_LRS -vNetName myARMDemo -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the validation is complete, we can go ahead and deploy the same to ensure it is deploy-able. To test this immediately, click on the deploy to Azure button below.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Storage-VirtualNet.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h4 id=&#34;free-form-vs-known-configuration&#34;&gt;Free-form vs Known Configuration&lt;/h4&gt;
&lt;p&gt;We have so far looked at parameters, variables, and used them in the template that we are building. Parameters give us the flexibility to gather input from user deploying the template. We can completely parameterize the template and let the user provide every value needed for the deployment as an input parameter. This is called free-form configuration. However, using free-form configuration is not always scalable. The number of parameters that a user need to input might be overwhelming. Also, you don’t want your end user deploying this template to mess-up with the vNet and subnet address prefixes. This can have negative effects on the overall IaaS deployment. You might always want to prefix the subnet name with the resource group name to ensure there is uniformity across the resource names that you use. Some of this cannot be controlled unless you use known configurations. Known configurations help standardize resource configurations. Use variables in the template for resource settings that require no user input or you need control over. By using variables, you can simply change the value of the variable if at all you need to modify the template instead of trying to find where all the value is used.&lt;/p&gt;
&lt;p&gt;We will review more such best practices guidance and see using known configurations throughout this series. This is it for today. Stay tuned for more!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – Using Parameters</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-parameters/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-using-parameters/</guid>
      <description>&lt;p&gt;In the earlier parts of this &lt;a href=&#34;http://139.59.40.198/blog/series/arm-templates/&#34;&gt;series&lt;/a&gt;, we briefly looked at &lt;a href=&#34;http://139.59.40.198/blog/building-azure-resource-manager-templates-an-introduction/&#34;&gt;different methods of deploying ARM templates&lt;/a&gt; and then &lt;a href=&#34;http://139.59.40.198/blog/building-azure-resource-manager-templates-the-basics/&#34;&gt;basics of ARM template language&lt;/a&gt;. Starting today’s article, we will see our leaning in action. To get going with our leaning, we will start building the ARM template for the following scenario.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate3-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;We will incrementally build this scenario by learning different aspects of ARM template language. We won’t be covering all resource types in Azure but we will cover every aspect of the ARM template language and functions and expressions used in the template language. We will also review best practices in building these ARM templates as we proceed forward in this series.&lt;/p&gt;
&lt;p&gt;So, what is there in the scenario that we are building?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A resource group to host different resource types in our scenario.&lt;/li&gt;
&lt;li&gt;A storage account for hosting the VM OS and data disks.&lt;/li&gt;
&lt;li&gt;A virtual network for VM network connectivity.&lt;/li&gt;
&lt;li&gt;A public IP to connect to this deployment from external world.&lt;/li&gt;
&lt;li&gt;A load balancer that has the RDP and PowerShell remoting endpoints for the non-DC virtual machines in this scenario.&lt;/li&gt;
&lt;li&gt;Network interfaces for the AD DC and other VMs in our scenario.&lt;/li&gt;
&lt;li&gt;An Active Directory Domain Controller VM with DNS services running in it.&lt;/li&gt;
&lt;li&gt;Up to three VMs (depending on the environment type) that join the AD DS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This scenario is not a complex deployment by any means but can be useful in building an ARM template that uses most or all of the artifacts in the template language. We will do this over a series of articles. But, at the end of each part, we will have a deploy-able template that we will test.&lt;/p&gt;
&lt;p&gt;Let us see how we can go about this.&lt;/p&gt;
&lt;h4 id=&#34;create-a-resource-group&#34;&gt;Create a Resource Group&lt;/h4&gt;
&lt;p&gt;Like I mentioned earlier, we need a resource group for deploying the components in our scenario using ARM templates. So, let us create one. You can do this using various means but I will stick to &lt;a href=&#34;https://github.com/Azure/azure-powershell/releases&#34;&gt;Azure PowerShell&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;Note: I will be using Azure PowerShell 1.0 cmdlets. You can get these using either PackageManagement cmdlets or Web PI or just get the &lt;!-- raw HTML omitted --&gt;MSI package from Github&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Login-AzureRmAccount
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;New-AzureRmResourceGroup&lt;/span&gt; -Name MyARMDemo -Location &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;West US&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: An Azure resource group can contain &lt;!-- raw HTML omitted --&gt;resources from different regions&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;h4 id=&#34;adding-parameters&#34;&gt;Adding Parameters&lt;/h4&gt;
&lt;p&gt;Now that we have a resource group created, let us start creating our ARM template for the scenario. First thing we need is a storage account for our resources. Storage accounts in Azure have a couple of properties — &lt;em&gt;name, type,&lt;/em&gt; and &lt;em&gt;location&lt;/em&gt; — that we can configure. We should ideally collect the values for &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;type&lt;/em&gt; from the user deploying this template. This is where we will use parameters in the ARM template language. Let us first start by defining that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;myARMDemo&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;minLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;maxLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;24&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique name for the storage account.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_RAGRS&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Account type based on the storage redundancy requirements.&amp;#34;&lt;/span&gt;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above JSON template, we added parameters sub-element to the first two mandatory elements which are &lt;em&gt;$schema&lt;/em&gt; and &lt;em&gt;contentVersion.&lt;/em&gt; Within the parameters element, we have two parameters needed for creating storage account. Here is the generic syntax for adding parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;parameterName&amp;gt;&amp;#34;&lt;/span&gt; : {
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;type-of-parameter-value&amp;gt;&amp;#34;&lt;/span&gt;,
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;optional-default-value-of-parameter&amp;gt;&amp;#34;&lt;/span&gt;,
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [ &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;optional-array-of-allowed-values&amp;gt;&amp;#34;&lt;/span&gt; ],
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;minValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f00&#34;&gt;&amp;lt;optional-minimum-value-for-int-parameters&amp;gt;&lt;/span&gt;,
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;maxValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f00&#34;&gt;&amp;lt;optional-maximum-value-for-int-parameters&amp;gt;&lt;/span&gt;,
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;minLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f00&#34;&gt;&amp;lt;optional-minimum-length-for-string-secureString-array-parameters&amp;gt;&lt;/span&gt;,
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;maxLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f00&#34;&gt;&amp;lt;optional-maximum-length-for-string-secureString-array-parameters&amp;gt;&lt;/span&gt;,
     &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;lt;optional-description-of-the parameter&amp;gt;&amp;#34;&lt;/span&gt; 
     }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will be using more or less every property within the parameters element within the scenario we are developing. So, don’t worry if you don’t immediately see all of them used right away. The &lt;em&gt;storageAccountName&lt;/em&gt; parameter is of string &lt;em&gt;type&lt;/em&gt; and we set the &lt;em&gt;defaultValue&lt;/em&gt; to ‘myARMDemo’. So, when a user deploys this template it is not mandatory to supply the parameter value. The value of &lt;em&gt;type&lt;/em&gt; property should be a valid JSON type and one of the below mentioned types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string or secureString&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;object or secureObject&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A storage account name must be at least 3 characters long and 24 characters at the most. The &lt;em&gt;minLength&lt;/em&gt; and &lt;em&gt;maxLength&lt;/em&gt; properties within the &lt;em&gt;storageAccountName&lt;/em&gt; parameter define these constraints. The &lt;em&gt;metadata&lt;/em&gt; property of the parameter is used to provide the help text to the end user deploying this template. You can put whatever string that best describes the parameter.&lt;/p&gt;
&lt;p&gt;For the &lt;em&gt;storageAccountType&lt;/em&gt; property, we have set &lt;em&gt;allowedValues&lt;/em&gt; property to ensure we restrict what the end user can provide as a value. This is required since there only a set of valid values for the storage account type in Azure. Note that &lt;em&gt;allowedValues&lt;/em&gt; property is a JSON array and is represented using square brackets. Since we are supplying &lt;em&gt;allowedValues,&lt;/em&gt; when a user deploys this template, they get to select one of the values either using dropdown or tab-complete when using PowerShell. For eample, in Azure PowerShell, this is achieved using the &lt;em&gt;New-AzureRmResourceGroupDeployment&lt;/em&gt; cmdlet.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate3-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;We would eventually add many more parameters by the time we create the final template. The basics that we discussed here should apply to all parameters that we add in future.&lt;/p&gt;
&lt;h4 id=&#34;adding-resources&#34;&gt;Adding Resources&lt;/h4&gt;
&lt;p&gt;To be able to deploy the template, we must have at least one resource type added to the &lt;em&gt;resources&lt;/em&gt; collection element. Let us go ahead and add the storage resource type to create a storage account.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;MyARMDemo&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;minLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;maxLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;24&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Unique name for the storage account.&amp;#34;&lt;/span&gt;
            }
        },
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountType&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_GRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_ZRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Premium_LRS&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_RAGRS&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Account type based on the storage redundancy requirements.&amp;#34;&lt;/span&gt;
            }
        }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[ResourceGroup().Location]&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2015-05-01-preview&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accountType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;&lt;/span&gt;
            }
        }        
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we learned earlier, resources element in the ARM template is a JSON array. It is a collection of comma-separated JSON objects where each JSON object represents an instance of a resource type. For a resource type, we need to configure the &lt;em&gt;name&lt;/em&gt; property to identify the resource instance within the group. Note the way we are retrieving the value of &lt;em&gt;storageAccountName&lt;/em&gt; parameter and assigning it to the &lt;em&gt;name&lt;/em&gt; property of storage account resource. We use the &lt;a href=&#34;https://azure.microsoft.com/en-in/documentation/articles/resource-group-template-functions/#parameters&#34;&gt;&lt;em&gt;parameters()&lt;/em&gt;&lt;/a&gt; function. We supply the name of the parameter to this function to retrieve its value. Also note that the functions and expressions within the JSON syntax must be enclosed within square brackets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;name&amp;#34;: &amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;em&gt;type&lt;/em&gt; property is used to define the resource provider (Microsoft.Storage) and resource type (storageAccounts) within the provider. The value of &lt;em&gt;location&lt;/em&gt; property identifies the region where we want to deploy the resource type. In the case of our ARM template, we are using the &lt;em&gt;&lt;a href=&#34;https://azure.microsoft.com/en-in/documentation/articles/resource-group-template-functions/#resourcegroup&#34;&gt;resourceGroup()&lt;/a&gt;&lt;/em&gt; function to define the location for our storage account. This function returns three attributes — &lt;em&gt;id, name,&lt;/em&gt; and &lt;em&gt;location&lt;/em&gt; — for the resource group within which the resource type is getting deployed. We use dot-reference to retrieve the value of location attribute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;location&amp;#34;: &amp;#34;[ResourceGroup().Location]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The properties element within the resource definition is a JSON object that identifies all the resource specific properties. We need to configure the storage account type setting and this is collected using the &lt;em&gt;storageAccountType&lt;/em&gt; parameter. Similar to how we assigned value to the &lt;em&gt;name&lt;/em&gt; property, we use the &lt;em&gt;parameters()&lt;/em&gt; function to get the value of &lt;em&gt;storageAccountType.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;{
   &amp;#34;accountType&amp;#34;: &amp;#34;[parameters(&amp;#39;storageAccountType&amp;#39;)]&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this, we have a ARM template that can be used to deploy a storage account. But, how do we know whether this is valid or not. We can either use the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/azure/dn790547.aspx&#34;&gt;REST API&lt;/a&gt; for this or PowerShell cmdlets.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Once we validate the template, we can use one of the methods we discussed in the beginning of this series to deploy this template. One of the methods we discussed is the click to deploy button. So, go ahead and click on the below button and proceed to the Azure Portal (you need a valid Azure subscription).&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fportal.azure.com%2f%23create%2fMicrosoft.Template%2furi%2fhttps%253A%252F%252Fraw.githubusercontent.com%252Frchaganti%252Farmseries%252Fmaster%252Farm-series_Storage.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;You should see Azure Portal starting a new deployment and prompting you for parameter values.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate3-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;if you mouse over the small ‘i’ icon next to the parameter name, you will see the contents of the &lt;em&gt;metadata&lt;/em&gt; property for the parameter displayed in a tooltip.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate3-4.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Once you fill in all required values in the wizard and click Create, the storage account gets deployed within the resource group.&lt;/p&gt;
&lt;p&gt;This is it. We have completed the first part of the ARM template development. In the next part, we will add some more resource types to the template and also learn some more artifacts in the ARM template language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Future Unleashed – Authoring ARM Templates</title>
      <link>https://ravichaganti.com/blog/slides-from-future-unleashed-2015-authoring-azure-resource-manager-templates/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-from-future-unleashed-2015-authoring-azure-resource-manager-templates/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/futureunleashed.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I had a great time at Future Unleashed 2015 talking about &lt;a href=&#34;http://139.59.40.198/blog/authoring-azure-resource-manager-templates-microsoft-future-unleashed-2015-futureunleased/&#34;&gt;Authoring Azure Resource Manager Templates. &lt;/a&gt;This was a one-day technical event where there were 11 tracks covering different aspects from Cloud to Data to Analytics.&lt;/p&gt;
&lt;p&gt;The breakout session setup was a little weird. There were no walls for the breakout session room (or whatever you call it). It was just a big expo hall with 11 tracks spread across like exhibitor booths. All the attendees had to wear a headset to hear the speaker.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/futureunleashed-stage.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This is where my session had happened. It took a few mins for me get adjusted to this but overall, it was a very good experience. My session was very interactive and the attendees showed lot of interest in learning how to build ARM templates. I used a step-by-step approach in my demo to show the ARM template authoring and discussed how to use some artifacts in the ARM template language. A 45-minutes session is certainly not enough to show everything but I certainly hope that my attendees got a good overview of the authoring process.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/tpPQ7wyyll44Q9&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;At some point, this month, we should have the session recording available too. I will post the demo scripts along with the session recording. Meanwhile, if you are looking for some in-depth content around learning ARM template authoring, take a look at &lt;a href=&#34;http://139.59.40.198/blog/series/arm-templates/&#34;&gt;my ARM template series&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – The Basics</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-the-basics/</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-the-basics/</guid>
      <description>&lt;p&gt;As a part of this series, we will go through the language semantics of writing ARM templates. We will explore each and every aspect of the ARM template language and go through multiple examples to understand the concepts better. We won’t focus much on the resource types and resource definitions until we complete the discussion around the language semantics and artifacts.&lt;/p&gt;
&lt;p&gt;Let us get started.&lt;/p&gt;
&lt;h4 id=&#34;tools-for-the-job&#34;&gt;Tools for the job&lt;/h4&gt;
&lt;p&gt;JSON templates for ARM can be edited in notepad too. But, there are better tools that can help us with this.&lt;/p&gt;
&lt;h5 id=&#34;visual-studio&#34;&gt;Visual Studio&lt;/h5&gt;
&lt;p&gt;Visual Studio, along with &lt;a href=&#34;https://azure.microsoft.com/en-us/downloads/&#34;&gt;Azure SDK&lt;/a&gt;, provides an easy way to get started with the template creation. You get started by creating a Resource Group project and just keep adding resources to the project and VS automatically generates the JSON for you. You can then customize it the way you want. More than the auto-generation of JSON, what I like is the intellisense capability that shows me the properties I can use within a template for a resource type.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate2-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;For more information on how to get started with using &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/azure-resource-manager-2-5-for-visual-studio/&#34;&gt;Visual Studio to create ARM templates&lt;/a&gt;, read this &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/azure-resource-manager-2-5-for-visual-studio/&#34;&gt;Azure team blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h5&gt;
&lt;p&gt;Visual Studio Code is my favorite. It loads up much faster than the full-blown Visual Studio and it is very easy to use. However, at the time of this writing, there is no ARM template authoring support like what VS has. However, it has some minimal auto-completion support based on what the editor understands from the schema.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate2-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;h5 id=&#34;sublime-text&#34;&gt;Sublime Text&lt;/h5&gt;
&lt;p&gt;Sublime Text has a &lt;a href=&#34;https://packagecontrol.io/packages/AzureResourceManager&#34;&gt;Azure Resource Manager package&lt;/a&gt; that gives a bunch of snippets for quick ARM template authoring. For example, after you activate ARM package, you can type &lt;em&gt;arm:t&lt;/em&gt; and press tab to add a skeleton of the ARM template.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate2-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Sublime does provide some level of property auto-completion but it is still buggy. But, if your first choice is sublime, you have ARM template authoring support to some extent.&lt;/p&gt;
&lt;p&gt;There may be many other editors or IDEs with JSON support. Visual Studio is the first-class citizen as far as ARM template support is concerned and I hope VS code gets a similar level of template authoring support soon. Now that we know what we need to start template authoring, let us start with the language discussion.&lt;/p&gt;
&lt;h4 id=&#34;introducing-arm-template-language&#34;&gt;Introducing ARM template language&lt;/h4&gt;
&lt;p&gt;I have mentioned this several times already but will say it one more time before I start. ARM templates are based on JSON syntax. So, to be able to appreciate and understand the way we write ARM templates, you need to know how JSON synatx works. I am not going to write about the JSON syntax here but I have an article that I &lt;a href=&#34;http://www.powershellmagazine.com/2014/12/01/a-json-primer-for-administrators/&#34;&gt;published on PowerShell Magazine and that should give you a good overview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the basic structure of an ARM template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {  },
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;variables&amp;#34;&lt;/span&gt;: {  },
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [  ],
   &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;: {  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;schema&#34;&gt;$schema&lt;/h5&gt;
&lt;p&gt;This element is mandatory and the value must be the location of JSON schema file for the ARM template language. The JSON schema is what is used to find the right set of properties for resources etc. You can find the latest schema URL listed at &lt;a href=&#34;https://github.com/Azure/azure-resource-manager-schemas/&#34;&gt;https://github.com/Azure/azure-resource-manager-schemas/&lt;/a&gt;. When you start a new resource group project using Visual Studio, this property gets filled for you.&lt;/p&gt;
&lt;h5 id=&#34;contentversion&#34;&gt;ContentVersion&lt;/h5&gt;
&lt;p&gt;This is another mandatory element and you can use this to specify the version of the template you are authoring. As a part of the ARM authoring process, I suggest that you use the source control and build process to auto-update this element value instead of manually entering a version number.&lt;/p&gt;
&lt;h5 id=&#34;parameters&#34;&gt;Parameters&lt;/h5&gt;
&lt;p&gt;Think of parameters like parameters in any other programming language. In any programming language, parameters are used to provide flexibility within the function/method and not hard code any values that are really user-specific. ARM parameters are no exception. By defining parameters, you get the capability to collect user input for resource properties prior to starting the deployment.Parameters are what we use to draw a line between the free-form and known configurations. We will discuss this in-depth later. There are several properties within the parameters element. These properties can be used to set the allowed values or default value for a parameter or even set the minimum and maximum values for a parameter. Instead of just describing what those are, we will see real examples with those properties in the upcoming parts of this series.&lt;/p&gt;
&lt;h5 id=&#34;variables&#34;&gt;Variables&lt;/h5&gt;
&lt;p&gt;Variables, once again like any other programming language, helps us simplify the template language. For example, you can use variables element to store values for different resource properties and re-use them wherever applicable instead of writing the same value again and again. Also, within the ARM template language, variables can be used to construct values at runtime. You can use the user provided input in terms of parameters and construct the value for a specific resource property. Variables in ARM template can have standard type values as well as complex types. We will see examples of all this as we move forward in this series.&lt;/p&gt;
&lt;h5 id=&#34;resources&#34;&gt;Resources&lt;/h5&gt;
&lt;p&gt;Resource is a mandatory element and defines a collection of resources that you plan to deploy as a part of the template deployment. For each resource type that you define within this collection, there are certain standard sub-elements such as name, type, apiVersion, location, properties and so on. The properties element is used to describe the resource specific properties and the valid values for this are dependent on the resource type. Within this series, we will see a different set of resource types and use them within the templates that we build. However, we will not get into the details of each and every template. You can always refer to JSON schema and online documentation to find more about the properties for any given resource type.&lt;/p&gt;
&lt;h5 id=&#34;outputs&#34;&gt;Outputs&lt;/h5&gt;
&lt;p&gt;The outputs element is used to return data and objects from a deployment. For example, once a web application deployment is complete, you may want to return the URL at which the application is hosted. Also, outputs element is what we use to share state and data between multiple templates in a nested template deployment.&lt;/p&gt;
&lt;h4 id=&#34;functions-and-expressions&#34;&gt;Functions and Expressions&lt;/h4&gt;
&lt;p&gt;Apart from the six elements I described above, the ARM template syntax provides support for different &lt;a href=&#34;https://azure.microsoft.com/en-in/documentation/articles/resource-group-authoring-templates/#expressions-and-functions&#34;&gt;functions and expressions&lt;/a&gt; to simplify the deployment. For example, when you want to construct resource property values at runtime, you may need support for concatenating strings. As a part of our exploration here, we will look different functions and expressions that we can use within the ARM templates.&lt;/p&gt;
&lt;p&gt;This brings us to the end of today’s article. In the remaining parts going forward, we will take an example scenario and start building a template for that. In the process of doing that, we will see how different elements and artifacts such as functions and expressions within the template can be used. Before we start with that, I recommend that you get yourself familiarized with a tool that can be used to build these templates. Stay tuned for more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Azure Resource Manager Templates – An Introduction</title>
      <link>https://ravichaganti.com/blog/building-azure-resource-manager-templates-an-introduction/</link>
      <pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/building-azure-resource-manager-templates-an-introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/en-in/documentation/articles/resource-group-overview/&#34;&gt;Azure Resource Manager&lt;/a&gt; isn’t a new thing! It was announced during &lt;a href=&#34;https://channel9.msdn.com/Events/TechEd/NorthAmerica/2014/DEV-B224&#34;&gt;Build 2014&lt;/a&gt;. ARM is certainly the preferred way, with more and more services getting ARM support, to deploy Azure services. Microsoft also announced that the upcoming &lt;a href=&#34;https://www.youtube.com/watch?v=fuAmcfmo3X0&#34;&gt;Azure Stack release&lt;/a&gt; will feature Azure Resource Manager and the template deployment. This means that learning how to use ARM and write you own templates is an essential skill not just for public cloud but also for the private and hybrid cloud administrators.&lt;/p&gt;
&lt;p&gt;There is lot of Microsoft and community content out there that describes why ARM is important and how you can use the templates to deploy multi-tier and multi-service cloud deployments and manage all of them as a single entity. I am not going to repeat all that here. My focus, here, will be a thorough coverage of template language and design patterns. Through this series, you will get a complete and in-depth coverage of what you need to know to build world-class ARM templates. ARM uses &lt;a href=&#34;http://json.org/&#34;&gt;JSON formatted&lt;/a&gt; templates to perform these cloud deployments. You can see a bunch of these sample templates in the &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;Azure quick start templates Github repo&lt;/a&gt; that you can use as a starting point to create your own template or understand how to use the template language and best practices. This series of posts is about sharing my learning – the way I learned authoring ARM templates.&lt;/p&gt;
&lt;p&gt;Before you we go ahead start our discussion of ARM template language, let us first quickly review different methods of deploying these templates. This is not a detailed walk-through of these different methods since the focus of this article series is not on the deployment but building templates. After you write a custom ARM template, you can choose between any of these methods to deploy those templates.&lt;/p&gt;
&lt;h4 id=&#34;new-template-deployment-preview-portal&#34;&gt;New Template Deployment (Preview Portal)&lt;/h4&gt;
&lt;p&gt;The Azure Preview portal has an option to supply the ARM template contents (JSON) and then use a wizard-based method to start the deployment.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/armtemplate1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;To start this, as shown in the picture, click on the &lt;em&gt;+ icon&lt;/em&gt; and scroll down to click on &lt;em&gt;Template Deployment&lt;/em&gt;. The wizard that starts after this pretty much self-explanatory. As with any GUI and click-here methods, this is a manual method. I do not prefer this method.&lt;/p&gt;
&lt;h4 id=&#34;azure-powershell&#34;&gt;Azure PowerShell&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Azure/azure-powershell/releases&#34;&gt;Azure PowerShell&lt;/a&gt; (the following example uses 1.0 preview) is my preferred option. You can just supply a template file and template parameter file to the &lt;em&gt;New-AzureRmResourceGroupDeployment&lt;/em&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Login-AzureRmAccount
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;New-AzureRmResourceGroup&lt;/span&gt; -Name ExampleResourceGroup -Location &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;West US&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;New-AzureRmResourceGroupDeployment&lt;/span&gt; -Name ExampleDeployment -ResourceGroupName ExampleResourceGroup -TemplateFile C:\ARMTemplates\SingleVMDeploy.json -TemplateParameterFile C:\ARMTemplates\SingleVMDeploy-parameter.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method, like any other PowerShell-based method, can be completely automated and can be made a part of your CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;If you prefer, you can do the same with &lt;a href=&#34;https://github.com/Azure/azure-xplat-cli/releases&#34;&gt;Azure CLI&lt;/a&gt; as well.&lt;/p&gt;
&lt;h4 id=&#34;arm-rest-api&#34;&gt;ARM REST API&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://msdn.microsoft.com/en-in/library/azure/dn790549.aspx&#34;&gt;template deployment API in the ARM REST API&lt;/a&gt; provides a way to deploy custom ARM templates programatically using any language that supports REST interfaces. For example, you can use the following API request to create a template deployment. You can supply the JSON template along with all parameter information in the same request or as a link to a blob in your storage account.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://management.azure.com/subscriptions/%7Bsubscription-id%7D/resourcegroups/%7Bresource-group-name%7D/providers/microsoft.resources/deployments/%7Bdeployment-name%7D?api-version=%7Bapi-version%7D&#34;&gt;https://management.azure.com/subscriptions/{subscription-id}/resourcegroups/{resource-group-name}/providers/microsoft.resources/deployments/{deployment-name}?api-version={api-version}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This method, like the Azure PowerShell or CLI method, can be easily integrated into an existing CI/CD pipeline.&lt;/p&gt;
&lt;h4 id=&#34;click-to-deploy-method&#34;&gt;Click to Deploy Method&lt;/h4&gt;
&lt;p&gt;Finally, there is a click to deploy method that Azure Preview portal gets integrated into. For example, most or all of the sample templates within the Azure quick start templates gallery contain the &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/deploy-to-azure-button-for-azure-websites-2/&#34;&gt;Deploy to Azure button&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Clicking on the above button will take you to the new template deployment option in the preview portal where you can add the parameter values and start the deployment. Similar to this, you can embed these buttons on any webpage and redirect the user to Azure Preview portal to start the deployment.&lt;/p&gt;
&lt;h4 id=&#34;visual-studio&#34;&gt;Visual Studio&lt;/h4&gt;
&lt;p&gt;For developers creating ARM custom templates, it might be an easier option to both author and test deployment using &lt;a href=&#34;https://azure.microsoft.com/en-in/documentation/articles/arm-template-deployment/#step-2-create-the-visual-studio-project-the-template-file-and-the-parameters-file&#34;&gt;Visual Studio&lt;/a&gt;. VS provides necessary tooling to do this. VS provides the options to add new resources through a wizard and then later use the VS editor to customize and deploy those templates. Note that VS does not have all the resource types available in the wizard interface. For some of these missing resource types, you might still have to refer to the &lt;a href=&#34;https://github.com/Azure/azure-resource-manager-schemas&#34;&gt;schema and resource definitions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;VS is my preferred (and only option at the moment) to start ARM template development. So, in this series, going forward, we will use VS for most of our scenarios but do the deployments using Azure PowerShell.&lt;/p&gt;
&lt;p&gt;This brings us to the end of today’s article. We have not yet seen any basics of authoring Azure Resource Manager templates. We will start discussing the basics and go in-depth starting the next part in this series. Before that, familiarize yourself with at least one of the custom template deployment methods.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Reboot Camp Bangalore - Cloud Computing for IT Professionals</title>
      <link>https://ravichaganti.com/blog/slides-from-reboot-camp-bangalore-keynote-cloud-computing-for-it-professionals/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-from-reboot-camp-bangalore-keynote-cloud-computing-for-it-professionals/</guid>
      <description>&lt;p&gt;I had the opportunity to do the keynote at the &lt;a href=&#34;http://rebootblr.azurewebsites.net/&#34;&gt;Microsoft Reboot Camp Bangalore&lt;/a&gt;. This is a community driven event with support from Microsoft. The theme for the event was cloud computing and Microsoft Cloud offerings.&lt;/p&gt;
&lt;p&gt;In my keynote, I talked about what cloud computing means to the IT professionals and how they should get ready for the future.&lt;/p&gt;
&lt;p&gt;Here are the slides from my keynote.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/w4XP9qWqOyvpZP&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Community Day 2014 – Introduction to Microsoft Azure Compute</title>
      <link>https://ravichaganti.com/blog/session-slides-community-day-2014-introduction-to-microsoft-azure-compute/</link>
      <pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/session-slides-community-day-2014-introduction-to-microsoft-azure-compute/</guid>
      <description>&lt;p&gt;Microsoft Azure offers several services each categorized into one of the four major categories – Compute, Data, App, and Network Services. This session takes you through an overview of the Microsoft Azure Compute Services.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/62eQ9o9FToFmEq&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;!-- raw HTML omitted --&gt;
&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Reboot IT, Bangalore - Hyper-V Replica</title>
      <link>https://ravichaganti.com/blog/reboot-it-bangalore-2014-session-slides-hyper-v-replica/</link>
      <pubDate>Wed, 19 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/reboot-it-bangalore-2014-session-slides-hyper-v-replica/</guid>
      <description>&lt;p&gt;Here are the session slides for my second talk on Hyper-V. In this session, I had introduced Hyper-V Replica and demonstrated how to manage Hyper-V replica in Windows Server 2012 and Server 2012 R2.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/uw9WkRyuz6OlId&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Reboot IT, Bangalore - Whats new in Server 2012 R2 Hyper-V</title>
      <link>https://ravichaganti.com/blog/reboot-it-bangalore-2014-session-slides-whats-new-in-server-2012-r2-hyper-v/</link>
      <pubDate>Wed, 19 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/reboot-it-bangalore-2014-session-slides-whats-new-in-server-2012-r2-hyper-v/</guid>
      <description>&lt;p&gt;Here are the slides I used for my first session at the Reboot IT conference in Bangalore. We had over 130 attendees and the entire event was very well received.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/3PSBj4JU4sFGIL&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Slides: PowerShell Saturday - Windows PowerShell 4.0</title>
      <link>https://ravichaganti.com/blog/powershell-4-0-slides-and-session-recording-from-powershell-saturday-singapore/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-4-0-slides-and-session-recording-from-powershell-saturday-singapore/</guid>
      <description>&lt;p&gt;I just completed my online session on PowerShell 4.0, First Look for the Singapore PowerShell User Group. It went on pretty well. Here are the slides I used for this session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/313hyQgdFB504w&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;And, here is the session recording!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/MGQk5y4g2QA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Virtual Tech Days - Windows PowerShell 3.0 – A first look</title>
      <link>https://ravichaganti.com/blog/vtd-session-windows-powershell-3-0-a-first-look-session-recording/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/vtd-session-windows-powershell-3-0-a-first-look-session-recording/</guid>
      <description>
    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/y8zcQbeseSuep9&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: VTC Online - Desired State Configuration</title>
      <link>https://ravichaganti.com/blog/slides-and-demo-scripts-from-my-desired-state-configuration-session-at-vtc-online-india/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-and-demo-scripts-from-my-desired-state-configuration-session-at-vtc-online-india/</guid>
      <description>&lt;p&gt;The Microsoft MVP community in India delivered a &lt;a href=&#34;http://139.59.40.198/blog/?p=2905&#34;&gt;Virtual Tech Conference (VTC) online&lt;/a&gt; yesterday and I had the opportunity to talk about one my favorite topics in &lt;a href=&#34;http://technet.microsoft.com/en-us/library/hh857339.aspx#BKMK_wps4&#34;&gt;PowerShell 4.0&lt;/a&gt; – &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dn249912.aspx&#34;&gt;Desired State Configuration&lt;/a&gt;. I used this opportunity to build a &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dn249927.aspx&#34;&gt;custom DSC resource&lt;/a&gt; for managing hosts file using DSC. It was a good learning experience for me. And, I see a lot more possibilities with this. Here are the slides I used for this session:&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/GydGnjhCBAPRq9&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;Click here [download id=”26″] to download the demo scripts I used for this session! Remember that the HostsFile resource I built is still not polished and it was written in a few minutes and I have hard-coded a few things such as how we check / build host entries. But, nonetheless, this can serve as a good starting point if you plan to build custom DSC resources.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring Volume Change Events in PowerShell using WMI</title>
      <link>https://ravichaganti.com/blog/monitoring-volume-change-events-in-powershell-using-wmi/</link>
      <pubDate>Sun, 21 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/monitoring-volume-change-events-in-powershell-using-wmi/</guid>
      <description>&lt;p&gt;While I was preparing a few demo scripts for a Bangalore IT Pro UG meet session, I tumbled upon on WMI event class Win32_VolumeChangeEvent. This one is interesting. It is derived from Win32_DeviceChangeEvent class and gives us the ability to monitor local drive events directly.For example, you can get a notification when a local drive or mount point gets removed or added. The following table shows a list of event types we can monitor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This class may not be there on Windows XP. I have not verified this fact.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Value&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Configuration Changed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Device Arrival&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Device Removal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Docking&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let us see a few examples:&lt;/p&gt;
&lt;h4 id=&#34;adding-a-new-local-drive&#34;&gt;Adding a new local drive&lt;/h4&gt;
&lt;p&gt;We can monitor a local drive addition using the following query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=2&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this, you can monitor removable drives such as external hard drives and flash drives.&lt;/p&gt;
&lt;h4 id=&#34;removal-of-a-local-drive&#34;&gt;Removal of a local drive&lt;/h4&gt;
&lt;p&gt;To monitor the removal of local drive events, we can use the following query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=3&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;registering-for-the-above-events&#34;&gt;Registering for the above events&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for finding all device arrival events
$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=2&amp;#34;            

#Register an event subscription
Register-WmiEvent -Query $query -Action {
    $volumeName = (Get-WMIObject -Class Win32_LogicalDisk -Filter &amp;#34;DeviceID=&amp;#39;$($Event.SourceEventArgs.NewEvent.DriveName)&amp;#39;&amp;#34;).VolumeName
    Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.DriveName) ($($volumeName)) was added&amp;#34;
} | Out-Null            

#Query for finding all device Removal events
$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=3&amp;#34;            

#Register an event subscription
Register-WmiEvent -Query $query -Action {
    Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.DriveName) was removed&amp;#34;
} | Out-Null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have these event registrations done, we can test this by connecting or disconnecting a local drive such as a USB flash drive.&lt;/p&gt;
&lt;p&gt;Now, let us see a “real-world” application of these events and how we can use that to create a simple script to backup some files automatically whenever a USB flash drive gets added. Here is the script to do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Function Backup-ScriptFolder {
    Param ([string]$backupDrive,[string]$scriptFolder)
    $backupFolder = &amp;#34;$($backupDrive)\Backup-$(Get-Date -Format MM-dd-yyyy-hh-mm)&amp;#34;
    try {
        New-Item -type directory -Path $backupFolder -Force
    }
    catch {
        $_
        return
    }
    try {
        copy-item $scriptFolder -destination $backupFolder -recurse -Verbose
    }
    catch {
        $_
    }
}                

#Query for finding all device arrival events
$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=2&amp;#34;            

#Register an event subscription
Register-WmiEvent -Query $query -Action {
    $volumeName = (Get-WMIObject -Class Win32_LogicalDisk -Filter &amp;#34;DeviceID=&amp;#39;$($Event.SourceEventArgs.NewEvent.DriveName)&amp;#39;&amp;#34;).VolumeName
    #Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.DriveName) ($($volumeName)) was added&amp;#34;
    if ($volumeName -eq &amp;#34;BACKUPDRIVE&amp;#34;) {
        Write-Host &amp;#34;Starting file copy..&amp;#34;
        Backup-ScriptFolder -backupdrive $Event.SourceEventArgs.NewEvent.DriveName -ScriptFolder &amp;#34;C:\Dropbox\Scripts&amp;#34;
    }
} | Out-Null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you see the above code, I have a simple function &lt;em&gt;Backup-ScriptFolder&lt;/em&gt; that is called within the events -Action script block. I am calling this function only when the newly added local drive has the volume name “BACKUPDRIVE”. This is to make sure I don’t make multiple copies of my backup on unnecessary drives.&lt;/p&gt;
&lt;p&gt;Now, when I add a new USB flash drive or any external hard drive with a volume name “BACKUPDRIVE”, all files from the specified folder just get copied to the newly added drive under a new folder. In the &lt;em&gt;Backup-ScriptFolder&lt;/em&gt; function, &lt;em&gt;-BackupDrive&lt;/em&gt; is the newly added drive letter and &lt;em&gt;-ScriptFolder&lt;/em&gt; is the folder you want backup.&lt;/p&gt;
&lt;p&gt;This is a very basic implementation. You can easily extend it by adding a pretty progress bar and other features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Register-WMIEvent creates a temporary event consumer. Hence, the event notifications won’t be available if we close the PowerShell host. If you want to have a permanent event registration,  use &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents &lt;/a&gt;module to make your life easy.&lt;/p&gt;
&lt;p&gt;Here is a video that shows this script in action!

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/X0EO-tFhsWc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: BITPro UG Meet - PowerShell and WMI Eventing</title>
      <link>https://ravichaganti.com/blog/bitpro-ug-meet-powershell-and-wmi-eventing-slides-demo-scripts/</link>
      <pubDate>Sat, 20 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/bitpro-ug-meet-powershell-and-wmi-eventing-slides-demo-scripts/</guid>
      <description>&lt;p&gt;I did a session at @BangaloreITPro this afternoon and the topic was “PowerShell WMI Eventing for IT Pros”. This session’s focus was to give an introduction to WMI events and how to use them in system administration. Here are the slides and demo scripts I used.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/M0T4zDdJrgbj&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Attaching scripts or tasks to Windows event log entries using PowerShell and WMI</title>
      <link>https://ravichaganti.com/blog/attaching-scripts-or-tasks-to-windows-event-log-entries-using-powershell-and-wmi/</link>
      <pubDate>Fri, 24 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/attaching-scripts-or-tasks-to-windows-event-log-entries-using-powershell-and-wmi/</guid>
      <description>&lt;p&gt;During a few load test iterations on a SharePoint farm, I started seeing some SQL exceptions in the application log of SharePoint servers. If you are familiar with SharePoint platform, you may have seen these events such as event ID &lt;a href=&#34;http://technet.microsoft.com/en-us/library/ee513066.aspx&#34;&gt;3355&lt;/a&gt;. This event complains that the SharePoint server cannot connect to SQL server. This need not really mean that the DB server is offline. So, to find out the real reason behind these event logs, I needed to start some trace activities whenever event ID 3355 gets logged.&lt;/p&gt;
&lt;p&gt;Initially, I was looking for &lt;a href=&#34;http://technet.microsoft.com/en-us/library/bb490901.aspx&#34;&gt;eventtriggers.exe&lt;/a&gt; which is meant for attaching a script or task to an event log. However, I could neither find this on Windows Server 2008 R2 nor an external download. So, I wanted to look at other options I had.  I found that there are multiple ways to achieve this.&lt;/p&gt;
&lt;h3 id=&#34;attach-to-script-or-task-to-the-event-in-windows-event-viewer&#34;&gt;Attach to script or task to the event in Windows Event Viewer&lt;/h3&gt;
&lt;p&gt;You can find this option in event viewer. This link is available in the actions pane of event viewer upon selecting an event.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/log1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;However, this method is available only if the event log entry you are interested exists in the log. Which meant that, this wizard cannot be used to specify the event ID I wanted to monitor without actually pre-selecting the event entry. In my case, I cleared the even log after some tests and did not have the entry for ID 3355 in the application log. So, this method was not an option for me to attach a script to this specific event ID. By the way, this method create a scheduled task. This will appear under Event Viewer tasks in Task Scheduler.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; We can use Task Scheduler to create an event trigger. If you go to task scheduler and click on ‘Create Task’, you can select an event as the trigger and specify an event ID there. Take a look at the image below:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/log1-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I did not use this technique. Instead, chose to use PowerShell to do this for me.&lt;/p&gt;
&lt;h3 id=&#34;create-a-wmi-event-subscription-using-register-wmievent-or-management-event-watcher-net-class-in-powershell&#34;&gt;Create a WMI event subscription using Register-WMIEvent or Management Event Watcher .NET class in PowerShell&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.management.managementeventwatcher.aspx&#34;&gt;System.Management.ManagementEventWatcher&lt;/a&gt; .NET class can be used to create an event watcher. This takes a WMI query and starts listening for any specified events. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$watcher = new-object system.management.ManagementEventWatcher
$watcher.query = &amp;#34;Select * From __InstanceCreationEvent Where
                  TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; AND
                  TargetInstance.LogFile=&amp;#39;Application&amp;#39; AND
                  targetInstance.EventCode=3355&amp;#34;
$watcher.WaitForNextEvent()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or, Register-WMIEvent — available in PowerShell v2 — can do the same job.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * From __InstanceCreationEvent Where
          TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; AND
          TargetInstance.LogFile=&amp;#39;Application&amp;#39; AND
          TargetInstance.EventCode=3355&amp;#34;
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Event Arrived or something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The WMI query here simple. We just want to monitor Application log for any event with event code 3355. Both the above methods have a drawback. They are only &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa392396(v=vs.85).aspx#using_temporary_event_consumers&#34;&gt;temporary event consumers&lt;/a&gt;. A temporary event consumer exists only as long as the host is alive. The moment we close the PowerShell host, we lose these event subscriptions. However, I did not know when this even will happen again. So, I need the WMI event subscription to survive system reboots.&lt;/p&gt;
&lt;h3 id=&#34;create-a-permanent-wmi-event-consumer-in-powershell&#34;&gt;Create a permanent WMI event consumer in PowerShell&lt;/h3&gt;
&lt;p&gt;So, the best choice for me here was to create a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa392396(v=vs.85).aspx#using_permanent_event_consumers&#34;&gt;permanent event consumer&lt;/a&gt; that can survive system reboots as well. I can create a WMI permanent consumer of command-line type in PowerShell.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note
You need to have the knowledge of WMI Query language to create WMI event consumers (permanent or temporary) in PowerShell.  If you are new to WMI or WMI query language, refer to my eGuide on ‘&lt;em&gt;&lt;strong&gt;WMI Query Language via PowerShell&lt;/strong&gt;&lt;/em&gt;‘ available at http://139.59.40.198/blog/?page_id=2134&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I explained in the last chapter of my WQL eguide, creating a WMI event consumer in PowerShell requires lot of typing. So, I chose a shortcut and used the &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; module. This module provides an easy way to create WMI event consumers using cmdlets. So, as a solution to my event log monitoring problem, I used the following 4 lines of PowerShell code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-Module PowerEvents            

#Create a WMI Query for the event log entry
$query = &amp;#34;SELECT * FROM __InstanceCreationEvent WHERE
          TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; AND
          TargetInstance.LogFile=&amp;#39;Application&amp;#39; AND
          TargetInstance.EventCode=3355&amp;#34;            

#Create an event filter
$filter = New-WmiEventFilter -Name &amp;#34;Event Filter for Event ID 3355&amp;#34; -Query $query            

#Create an event consumer
$consumer = New-WmiEventConsumer -Verbose -Name &amp;#34;Event Consumer for Event ID 3355&amp;#34; -ConsumerType CommandLine `
            -CommandLineTemplate &amp;#34;cmd.exe /c `&amp;#34;C:\debug\event.cmd`&amp;#34;&amp;#34;            

#Bind the filter and consumer together         
New-WmiFilterToConsumerBinding -Filter $filter -Consumer $consumer -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code is really self-explanatory. Whenever there is an event ID with a code 3355, this permanent WMI event consumer will trigger C:\debug\event.cmd which in turn starts a trace or some kind of logging.&lt;/p&gt;
&lt;p&gt;This is it for today. Hope this is helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ebook: Layman&#39;s Guide to PowerShell 2.0 remoting</title>
      <link>https://ravichaganti.com/blog/laymans-guide-to-powershell-2-0-remoting/</link>
      <pubDate>Fri, 24 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/laymans-guide-to-powershell-2-0-remoting/</guid>
      <description>&lt;p&gt;This eBook got an update from the initial release.&lt;/p&gt;
&lt;p&gt;You can download this ebook at no cost at &lt;a href=&#34;https://www.ravichaganti.com/ebooks/AlaymansguidetoPowerShell2remotingv2.pdf&#34;&gt;https://www.ravichaganti.com/ebooks/AlaymansguidetoPowerShell2remotingv2.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the additions in the update.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chapter 2&lt;/strong&gt; Enable remoting for only a specific network adapter
Remoting in an Enterprise&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chapter 3&lt;/strong&gt; Run script files on remote computers&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chapter 9&lt;/strong&gt; Added a note on Domain controller credential delegation&lt;/p&gt;
&lt;p&gt;​					Updated a note on Windows XP/2003 support for CredSSP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Appendix A&lt;/strong&gt; Added some more FAQ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Appendix B&lt;/strong&gt; Remoting in an Enterprise by Jan Egil Ring&lt;/p&gt;
&lt;h2 id=&#34;errata&#34;&gt;Errata&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>ebook: WMI query language (WQL) via PowerShell</title>
      <link>https://ravichaganti.com/blog/ebook-wmi-query-language-wql-via-powershell/</link>
      <pubDate>Fri, 24 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/ebook-wmi-query-language-wql-via-powershell/</guid>
      <description>&lt;p&gt;This eBook got an update from the initial release.&lt;/p&gt;
&lt;p&gt;You can download this ebook at no cost at &lt;a href=&#34;https://www.ravichaganti.com/ebooks/WMIQueryLanguageviaPowerShellv20.pdf&#34;&gt;https://www.ravichaganti.com/ebooks/WMIQueryLanguageviaPowerShellv20.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the additions in the update.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chapter 2&lt;/strong&gt; Enable remoting for only a specific network adapter
Remoting in an Enterprise&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chapter 3&lt;/strong&gt; Run script files on remote computers&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chapter 9&lt;/strong&gt; Added a note on Domain controller credential delegation&lt;/p&gt;
&lt;p&gt;​					Updated a note on Windows XP/2003 support for CredSSP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Appendix A&lt;/strong&gt; Added some more FAQ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Appendix B&lt;/strong&gt; Remoting in an Enterprise by Jan Egil Ring&lt;/p&gt;
&lt;h2 id=&#34;errata&#34;&gt;Errata&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Passing variables or arguments to an event action in PowerShell</title>
      <link>https://ravichaganti.com/blog/passing-variables-or-arguments-to-an-event-action-in-powershell/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/passing-variables-or-arguments-to-an-event-action-in-powershell/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Based on feedback from @ShayLevy, we don’t have to send the background job object to Event action as a variable. It is already available as $event.Sender or just $sender. You can see that in the image below. I just picked up a wrong example to explain the -MessageData parameter. Although, the article originally showed a background job as an example, it was just to show how &lt;em&gt;&lt;strong&gt;any&lt;/strong&gt;&lt;/em&gt; object can be passed to event action. For example, if all you want to access is a background job object which you are monitoring using Register-ObjectEvent, you can access the job name using $event.Sender.Name or $sender.Name, job Id using $event.Sender.Id or $sender.Id, and so on.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/sender1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;To avoid any confusion, I removed the initial example of background job and updated it with a more generic example.&lt;/p&gt;
&lt;p&gt;While working with @LaerteSQLDBA on a SQL SMO related script, I was asked a question on how to pass variables or arguments and access them within an event action script block. The solution is simple. We just use the -MessageData parameter of Register-ObjectEvent. So, all event subscriptions get the object and can be accessed using $event.MessageData and this is what &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347672.aspx&#34;&gt;Get-Help for -MessageData property of Register-ObjectEvent&lt;/a&gt; tells us.&lt;/p&gt;
&lt;p&gt;Let us say, You have a an object which you need to access inside an event registration for some special purpose. And, say that the event scope is different from the object scope.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$foo = &amp;#34;Ravi&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, when you need to access this variable $foo in the event action or event script block,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Register-ObjectEvent -InputObject $PSISE.Options -EventName PropertyChanged -MessageData $foo -SourceIdentifier jobEvent -Action {
                    Write-Host &amp;#34;Job Name: $(event.MessageData)&amp;#34;
                } | Out-Null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you observe the event registration, I supplied $foo as an argument to to -MessageData. This makes sure that we have the value of $foo is assigned to $event.MessageData in the event action script block.&lt;/p&gt;
&lt;p&gt;So, after the event is raised, if we look a the $event automatic variable:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/sender1-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;So, $event.MessageData now has the value of $foo. @ShayLevy pointed me to an answer he provided on Technet Forums. Check &lt;a href=&#34;http://social.technet.microsoft.com/Forums/en-US/ITCG/thread/07bbb0e5-0d31-451c-97e8-fad42361389f/#33e5ff21-00e5-46bc-ab5e-21975c2aadad&#34;&gt;this &lt;/a&gt;for an example on how to pass custom objects, etc.&lt;/p&gt;
&lt;p&gt;This is it for today. Hope you found this useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: TechED India - PowerShell in the Enterprise</title>
      <link>https://ravichaganti.com/blog/teched-india-2011-powershell-in-the-enterprise-slides/</link>
      <pubDate>Fri, 25 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/teched-india-2011-powershell-in-the-enterprise-slides/</guid>
      <description>&lt;p&gt;Here are the slides I used for my session “PowerShell in the Enterprise” at TechED India 2011. This was my first ever TechED session and went pretty well. There were 100+ attendees at the session and some good questions too.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/Jk3JoaQUyQDbxu&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Virtual Tech Days - Monitoring &amp; Managing remote Windows 7</title>
      <link>https://ravichaganti.com/blog/microsoft-virtual-tech-days-monitoring-managing-remote-windows-7-desktops-with-powershell-slides-scripts/</link>
      <pubDate>Tue, 22 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/microsoft-virtual-tech-days-monitoring-managing-remote-windows-7-desktops-with-powershell-slides-scripts/</guid>
      <description>&lt;p&gt;Early this month, I did an online webcast session for &lt;!-- raw HTML omitted --&gt;MS Virtual Tech Days&lt;!-- raw HTML omitted --&gt;. This session was around how administrators can manage remote Windows 7 desktops with Windows PowerShell. Here are the slides from that session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/yoEBa4SeuaCVc5&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Monitoring file creation using WMI and PowerEvents module</title>
      <link>https://ravichaganti.com/blog/monitoring-file-creation-using-wmi-and-powerevents-module/</link>
      <pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/monitoring-file-creation-using-wmi-and-powerevents-module/</guid>
      <description>&lt;p&gt;There are several ways we can create a file monitoring script using PowerShell. There is also a cmdlet in PowerShellPack called Start-FileSystemWatcher to monitor file /folder changes. However, none of these methods survive a exit at the console or wherever the script is running. This is because all these methods create a temporary event consumer. As I’d mentioned in an earlier post, &lt;a href=&#34;http://www.twitter.com/pcgeek86&#34;&gt;Trevor’s &lt;/a&gt;&lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; module makes it very easy to create permanent event consumers in PowerShell. In today’s post, we shall look at how we can do that.&lt;/p&gt;
&lt;p&gt;Before we dig into that, let us first see how we can create a file monitoring script using PowerShell. Many people use CIM_DirectoryContainsFile class and create an event listener. This is how we use do that class in PowerShell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;CIM_DirectoryContainsFile&amp;#39; AND TargetInstance.GroupComponent=&amp;#39;Win32_Directory.Name=&amp;#34;&amp;#34;C:\\\\Scripts&amp;#34;&amp;#34;&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action {
        Write-Host &amp;#34;A new file $($event.SourceEventArgs.NewEvent.TargetInstance.PartComponent) got created&amp;#34;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/monitor1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above output, what we get as a part of event data is just that string contained in &lt;strong&gt;$Event.SourceEventArgs.NewEvent.TargetInstance.PartComponent&lt;/strong&gt;. Of course, if you are RegEx lover, you’d just parse that and find the name (extension, etc) of the new file that just got created. However, there is an efficient and easy way to do that. And, that is: monitoring the CIM_DataFile class itself. This is how we do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;CIM_DataFile&amp;#39; AND TargetInstance.Drive=&amp;#39;C:&amp;#39; AND TargetInstance.Path=&amp;#39;\\Scripts\\&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action {
        $event.SourceEventArgs.NewEvent.TargetInstance | Select -Expand FileName, Extension, Name | Out-Host
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And, this is what we see in the output.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/monitor1-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;We selected only a few properties from the available list of properties. But, this should give you an idea why I prefer using CIM_DataFile as compared to CIM_DirectoryContainsFile when monitoring for file creation. Similarly, we can monitor file deletions and modifications by subscribing to &lt;strong&gt;__InstanceDeletionEvent&lt;/strong&gt; and &lt;strong&gt;__InstanceModificationEvent&lt;/strong&gt;. The usage of these two classes is more or less similar. So, I will skip those aspects in this post.&lt;/p&gt;
&lt;p&gt;However, as I mentioned earlier, we are only creating temporary event consumers by using Register-WMIEvent cmdlet. This is not really helpful since we have to keep the console window where we registered the event always open. We can solve this problem by using a permanent WMI event consumer. This is what PowerEvents module does. It helps us create any of the five permanent WMI consumers.&lt;/p&gt;
&lt;p&gt;So, for todays post, we shall look at creating a log file consumer using PowerEvents module.&lt;/p&gt;
&lt;p&gt;First, we need &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;download &lt;/a&gt;and import the module using Import-Module cmdlet. Once this is done, we need to create an event filter for the event we want to subscribe. This is done using &lt;strong&gt;New-WMIEventFilter&lt;/strong&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;CIM_DataFile&amp;#39; AND TargetInstance.Drive=&amp;#39;C:&amp;#39; AND TargetInstance.Path=&amp;#39;\\Scripts\\&amp;#39;&amp;#34;
$eventFilter = New-WmiEventFilter -Name &amp;#34;FileMonitor&amp;#34; -Query $query
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we need to create a event consumer. In this case, a log file consumer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$eventConsumer = New-WmiEventConsumer -ConsumerType LogFile -Name NewFileCreated -FileName C:\Logs\FileMonitor.log `
 -Text &amp;#34;New File has been created: %TargetInstance.Name%&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have both filter and consumer, we can bind them together to create the permanent event consumer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#This is how we create a binding
New-WmiFilterToConsumerBinding -Filter $eventFilter -Consumer $eventConsumer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is it. Now, whenever a file gets created in the C:\Scripts folder, we’ll see a entry in the log file at C:\Logs\FileMonitor.log. It’d look like:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/monitor1-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;These log entries will appear even after a system reboot. This is the benefit of WMI permanent consumers. If you want to learn more about WMI query language syntax used in this post, refer to my &lt;a href=&#34;http://139.59.40.198/blog/?p=1845&#34;&gt;WQL series&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating complex scheduled tasks using WMI Timer events and PowerEvents Module</title>
      <link>https://ravichaganti.com/blog/creating-complex-scheduled-tasks-using-wmi-timer-events-and-powerevents-module/</link>
      <pubDate>Sat, 25 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/creating-complex-scheduled-tasks-using-wmi-timer-events-and-powerevents-module/</guid>
      <description>&lt;p&gt;A few weeks ago, I wrote about &lt;a href=&#34;http://139.59.40.198/blog/?p=1751&#34;&gt;WMI Timer events using Win32_LocalTime&lt;/a&gt; and then mentioned how to &lt;a href=&#34;http://139.59.40.198/blog/?p=1773&#34;&gt;work around the DayOfWeek issue&lt;/a&gt;. In today’s post, I will show you how to use WMI timer events to create complex scheduled tasks.&lt;/p&gt;
&lt;p&gt;As system administrators, you may have to create scheduled jobs for performing various sysadmin tasks. We generally use Task Scheduler for such jobs. However, using the regular OS task scheduler, there is no easy way to create a scheduled task that occurs — for example — &lt;strong&gt;every Thursday of every fourth week of a month in the third quarter of every year.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/powerevents1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As I mentioned in my earlier posts, this is one area where WMI timer events are quite useful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=3) AND
          (TargetInstance.WeekInMonth=4) AND
          (TargetInstance.DayOfWeek=4 OR TargetInstance.DayOfWeek=9) AND
          (TargetInstance.Hour=12) AND
          (TargetInstance.Minute=0) AND
          (TargetInstance.Second=0)&amp;#34;                        

Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Execute your scheduled task here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the major drawback of Register-WMIEvent is that the event registration is alive only until the PowerShell consle window is open. So, for this task to execute, you must have the console window open at all times. This is because Register-WMIEvent creates only a temporary event consumer. &lt;strong&gt;So, how do we create a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390825(v=vs.85).aspx#wmi.gloss_permanent_consumer&#34;&gt;permanent event consumer&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can use &lt;a href=&#34;http://trevorsullivan.net/&#34;&gt;Trevor&lt;/a&gt;‘s (@pcgeek86) &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; PowerShell module.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;what-is-powerevents&#34;&gt;What is PowerEvents?&lt;/h4&gt;
&lt;p&gt;PowerEvents is a Windows PowerShell v2.0 module designed to facilitate the ease of creating, updating, and deleting WMI (&lt;em&gt;Windows Management Instrumentation&lt;/em&gt;) permanent event registrations. PowerEvents makes it easy to create WMI event filters (define the events you want to capture) and event consumers (responders to events), and then bind them together to initiate the flow of events. By leveraging permanent event registrations, you can perform advanced monitoring functions on a workstation or server, that would otherwise require implementation of an enterprise monitoring product. Because WMI is incredibly vast in the information it provides, very detailed monitoring can be performed using almost any of the WMI objects that exist on a computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393649(v=vs.85).aspx&#34;&gt;five types of permanent event consumers&lt;/a&gt; that are possible (out-of-the-box) in WMI and the PowerEvents module provides cmdlets to create these five event consumers. In today’s post, lets look at the command-line event consumer. This is the apt choice for creating scheduled tasks in combination with WMI timer events.&lt;/p&gt;
&lt;p&gt;To be able to receive WMI events at all time, we need to create an event filter, create an event consumer, and then bind them together. This process is explained in detail at &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393014(v=vs.85).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/aa393014%28v=vs.85%29.aspx&lt;/a&gt;. We will see how PowerEvents PowerShell module makes it easy using the new cmdlets.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At the time of writing this post, the publicly available PowerEvents release (0.2 alpha) did not have a functional command-line consumer. To be able to use the command-line consumer as shown in this post, you need to download the &lt;a href=&#34;http://powerevents.codeplex.com/SourceControl/changeset/changes/99440d1d4431&#34;&gt;changeset &lt;/a&gt;listed under source code tab.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;creating-an-event-filter&#34;&gt;Creating an event filter&lt;/h3&gt;
&lt;p&gt;An event filter is an instance of the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394639(v=vs.85).aspx&#34;&gt;&lt;strong&gt;__EventFilter&lt;/strong&gt;&lt;/a&gt; system class that describes an event type and the conditions for delivering a notification. So, in our case it is the same WQL query we used in the example above. PowerEvents module provides a cmdlet to create an event filter — &lt;em&gt;&lt;strong&gt;New-WMIEventFilter&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
              (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
              (TargetInstance.Quarter=3) AND
              (TargetInstance.WeekInMonth=4) AND
              (TargetInstance.DayOfWeek=4 OR TargetInstance.DayOfWeek=9) AND
              (TargetInstance.Hour=12) AND
              (TargetInstance.Minute=0) AND
              (TargetInstance.Second=0)&amp;#34;
$taskFilter = New-WmiEventFilter -Name &amp;#34;WQL for 3rd quarter timer event&amp;#34; -Query $query
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is it. You have the event filter created. Make a note that you need to store the event filter instance in a variable. This is required since the published version of PowerEvents has no cmdlet way to get a list of event filters. Also, see how I’d used TargetInstance.DayOfweek=9. In real world, there is no 9th DayOfWeek. This is just a &lt;a href=&#34;http://139.59.40.198/blog/?p=1773&#34;&gt;work around&lt;/a&gt; we need to put in place to make sure the event gets triggered on the desired day of week — in this case 4 (Thursday). We could use a WMI query to get that list but I will save it for another post.&lt;/p&gt;
&lt;h3 id=&#34;creating-an-event-consumer&#34;&gt;Creating an event consumer&lt;/h3&gt;
&lt;p&gt;An event consumer is a recipient of notifications that report an occurrence of an event. An event consumer is either &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390839(v=vs.85).aspx#wmi.gloss_temporary_consumer&#34;&gt;&lt;em&gt;temporary&lt;/em&gt;&lt;/a&gt; or &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390825(v=vs.85).aspx#wmi.gloss_permanent_consumer&#34;&gt;&lt;em&gt;permanent&lt;/em&gt;&lt;/a&gt;. The cmdlet for creating an event consumer is &lt;em&gt;&lt;strong&gt;New-WMIEventConsumer.&lt;/strong&gt;&lt;/em&gt; In this post, I will show you how to create a command-line consumer. The idea is to invoke a backup script when the event fires. For a list of other consumer types, refer to &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393649(v=VS.85).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/aa393649%28v=VS.85%29.aspx&lt;/a&gt;. Here is how we create a permanent event consumer using PowerEvents module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$cmdConsumer = New-WmiEventConsumer -Verbose -Name &amp;#34;bkConsumer1&amp;#34; -ConsumerType CommandLine -CommandLineTemplate &amp;#34;cmd.exe /c `&amp;#34;C:\Scripts\backup.bat`&amp;#34;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The *&lt;strong&gt;-CommandLineTemplate*&lt;/strong&gt; takes the path to the backup script. Also, note that the &lt;em&gt;&lt;strong&gt;ConsumerType&lt;/strong&gt;&lt;/em&gt; is set to CommandLine in this case. Again, make sure you store the instance of consumer in a variable. We need it later.&lt;/p&gt;
&lt;h3 id=&#34;binding-a-filter-and-consumer-together&#34;&gt;Binding a filter and consumer together&lt;/h3&gt;
&lt;p&gt;Now, as a final step, we need to bind the event filter and the consumer together so that the backup script gets invoked when the timer event gets triggered on the specified date &amp;amp; time. To do this, we will use &lt;em&gt;&lt;strong&gt;New-WMIFilterConsumerBinding&lt;/strong&gt;&lt;/em&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;New-WmiFilterToConsumerBinding -Filter $taskFilter -Consumer $cmdConsumer -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember why I said that we need to store the instances of filter and consumer? It makes it easy to bind them together.&lt;/p&gt;
&lt;p&gt;This is it. The backup script gets triggered once the timer event gets fired. This is just one example of creating complex scheduling tasks using WMI timer events. And, using PowerEvents makes it easy to create permanent event consumers. Go and explore it yourself.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Extrinsic Events</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-extrinsic-events/</link>
      <pubDate>Fri, 24 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-extrinsic-events/</guid>
      <description>&lt;p&gt;In this part of the WQL series, we shall look at extrinsic events.&lt;/p&gt;
&lt;p&gt;Extrinsic events represent events that do not directly link to standard WMI model. For example, Windows registry defines extrinsic events for all registry change events. For intrinsic events, having a WMI provider isn’t mandatory. This is mostly because they are defined within the standard WMI model and WMI takes care of these if there is no WMI provider for a given resource in the standard WMI model. However, since extrinsic events are outside of the standard WMI model, having a WMI provider is mandatory.&lt;/p&gt;
&lt;p&gt;When creating a WMI query for extrinsic events, we need to use a class derived from __ExtrinsicEvent class. Take a look at this CIM Studio capture.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL9-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see, there is registry provider that provides extrinsic events. So, rest of this post, will use the extrinsic event classes from registry provider to show we can create event notifications for extrinsic events.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: We cannot use __InstanceDeletionEvent, __InstanceCreationEvent, __InstanceModificationevent, or __InstanceOperationEvent for monitoring extrinsic events. This should be obvious from the above screen capture.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;monitoring-registry-value-change-events&#34;&gt;Monitoring registry value change events&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;&lt;strong&gt;RegistryValueChangeEvent&lt;/strong&gt;&lt;/em&gt; to monitor changes to registry values. Here is how we write a WMI query for registry value change events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryValueChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND KeyPath=&amp;#39;Software\\Temp&amp;#39; AND ValueName=&amp;#39;Name&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Value changed&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes, that is it. So, when the monitored value changes, you will see the message “value changed” on the screen. However, there is one drawback here. The event notification only tells you that the value has been modified but it won’t return the new value.! Also, deleting a value is also considered modification and you receive a notification. But, agian, the notification won’t tell you that the value was deleted. See the next screen capture.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL9-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Although I deleted the value, the resulting event notification does not tell us anything about that value deletion. So, in the -Action script block, we will have to verify the presence of registry value we are monitoring and then display the new value. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryValueChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND KeyPath=&amp;#39;Software\\Temp&amp;#39; AND ValueName=&amp;#39;Name&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action {
            if ((Get-item HKLM:\SOFTWARE\Temp).GetValue(&amp;#34;Name&amp;#34;)) {
                write-host (Get-item HKLM:\SOFTWARE\Temp).GetValue(&amp;#34;Name&amp;#34;)
            } else {
                Write-host &amp;#34;The registry value was deleted&amp;#34;
            }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;monitoring-registry-key-change-events&#34;&gt;Monitoring registry key change events&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;RegistryKeyChangeEvent&lt;/strong&gt;&lt;/em&gt; can be used to monitor modifications to a registry subkey. Similar to &lt;em&gt;&lt;strong&gt;RegistryValueChangeEvent&lt;/strong&gt;&lt;/em&gt;, this event notification also won’t give you any information beyond subkey modification. Here is how we use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryKeyChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND KeyPath=&amp;#39;Software\\Temp&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action { Write-host &amp;#34;Something changed&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once again, you need to use some technique similar to whats shown above to retrieve the “real” modification that happened.&lt;/p&gt;
&lt;h3 id=&#34;monitoring-registry-tree-change-events&#34;&gt;Monitoring registry tree change events&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;RegistryTreeChangeEvent&lt;/strong&gt;&lt;/em&gt; can be used to monitor subtree level modifications. Similar to other two event classes in the registry provider, this event class provides a notification that a change occurred but won’t tell you about what had changed. So, we got to use a method of our own to detect what change generated the event notification.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryTreeChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND RootPath=&amp;#39;&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action { Write-host &amp;#34;Something changed&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many vendor provided extrinsic event classes. For example, take a look at how Intel ME WMI provider uses extrinsic events for firmware state notifications: &lt;a href=&#34;http://software.intel.com/sites/manageability/AMT_Implementation_and_Reference_Guide/default.htm?turl=WordDocuments%2Fwmievents.htm&#34;&gt;http://software.intel.com/sites/manageability/AMT_Implementation_and_Reference_Guide/default.htm?turl=WordDocuments%2Fwmievents.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is it about extrinsic events and WMI event queries. Go and explore these using the examples I’d used through out. We shall look at WMI schema queries in the next part of this series. Stay tuned.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Schema Queries</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-schema-queries/</link>
      <pubDate>Fri, 24 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-schema-queries/</guid>
      <description>&lt;p&gt;In this last and final part of this series, we will look at how to use WQL for querying the WMI schema.&lt;/p&gt;
&lt;p&gt;Schema queries are used to retrieve class definitions (rather than class instances) and schema associations. In simple words, if you need to find out what type of information (this is what schema really means) a specific class holds, you use schema queries.Here is an example of a schema query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM meta_class where __this ISA &amp;#39;Win32_Process&amp;#39;&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And, this is what you would see when you execute this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL10-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In one of the earlier posts, we looked at retrieving class definitions with &lt;a href=&#34;http://139.59.40.198/blog/?p=1580&#34;&gt;ASSOCIATORS OF&lt;/a&gt; and &lt;a href=&#34;http://139.59.40.198/blog/?p=1624&#34;&gt;REFERENCES OF&lt;/a&gt; keywords. So, &lt;strong&gt;how are the schema queries different from the data queries using these two keywords?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, the above keywords return class definitions only when there are instances of those classes present. Using a schema query, we can retrieve the class definitions even when there is no instance present.&lt;/p&gt;
&lt;p&gt;To understand what I just said, take a look at this example that shows how a WMI query was built when using REFERENCES OF.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;REFERENCES OF {Win32_Process=$pid} WHERE ClassDefsOnly&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See the {Win32_Process=$pid} part of the query. We have to specify some identifier so that we can get an instance. In the above example, we used $pid variable. $pid is the process ID of PowerShell host. If we don’t specify a PID or some other identifier to get the instance, we end up with an error while executing the query. Now, go back and take a look at how we the schema query. We did not specify any kind of an identifier or property anywhere and we were still able to get the class definitions. That is the difference.&lt;/p&gt;
&lt;p&gt;Let us dig a bit in to the schema query syntax.&lt;/p&gt;
&lt;p&gt;We are familiar with &lt;em&gt;SELECT&lt;/em&gt; keyword. When building schema queries, only “*” is supported. Unlike other queries, you cannot do some thing like &lt;em&gt;SELECT xyz FROM abc&lt;/em&gt;. It has to be *SELECT ** always. And, the use of &lt;a href=&#34;http://en.wikipedia.org/wiki/Metaclass&#34;&gt;&lt;em&gt;&lt;strong&gt;meta_class&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; specifies that we are building a schema query. The only way to narrow down results when using schema queries is to use WHERE clause. Let us now look at a few ways to narrow the query results.&lt;/p&gt;
&lt;h4 id=&#34;using-__this&#34;&gt;Using __this&lt;/h4&gt;
&lt;p&gt;__this is a special property that identifies the target class for the query and using an ISA operator is must. This requests the definitions for the subclasses of the target class. Here is how you use this method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM meta_class where __this ISA &amp;#39;Win32_LogicalDisk&amp;#39;&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This when executed, returns the class definitions of Win32_LogicalDisk and all its subclasses.&lt;/p&gt;
&lt;h4 id=&#34;using-__class&#34;&gt;Using __Class&lt;/h4&gt;
&lt;p&gt;Using __Class, we can request for the class definitions of a single class and this is how we do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM meta_class where __class=&amp;#39;Win32_LogicalDisk&amp;#39;&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a brief overview of schema queries. We seldom need to use schema queries and IT Pros will probably never have to use this type queries. You can also use *&lt;strong&gt;REFERENCES OF*&lt;/strong&gt; and &lt;em&gt;&lt;strong&gt;ASSOCIATORS OF&lt;/strong&gt;&lt;/em&gt; keywords to get schema associations. You can use the &lt;em&gt;&lt;strong&gt;SchemaOnly&lt;/strong&gt;&lt;/em&gt; qualifier in the WHERE clause to retrieve the schema associations of a class.&lt;/p&gt;
&lt;p&gt;This is it. This ends the series on WMI query language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Intrinsic Events</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-intrinsic-events/</link>
      <pubDate>Wed, 22 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-intrinsic-events/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Intrinsic events&lt;/strong&gt; are used to monitor a resource represented by a class in the CIM repository. In other words, the intrinsic events occur in response to a change in the standard WMI data model. WMI creates intrinsic events for objects stored in the WMI repository. A provider generates intrinsic events for dynamic classes, but WMI can create an instance for a dynamic class if no provider is available. WMI uses polling to detect the changes.&lt;/p&gt;
&lt;p&gt;There are many system classes that WMI uses to report intrinsic events. However, the ones that are most interesting and useful are __InstanceCreationEvent, __InstanceModificationEvent, and __InstanceDeletionEvent. Hence, monitoring resources on a system involves monitoring of these system classes. These classes are derived from the __InstanceOperationEvent class which is derived from the __Event system class under root\Default namespace. The following capture of WMI CIM Studio shows this hierarchy.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL8-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The WQL syntax for WMI intrinsic event queries is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT \* FROM __InstanceXEvent WITHIN PollingInterval WHERE TargetInstance ISA WMIClassName AND TargetInstance.WMIClassPropertyName = Value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is something similar to what we saw in the earlier post about WQL syntax for event queries. The __InstanceXEvent can be any of the system classes such as __InstanceCreationEvent, __InstanceModificationEvent, __InstanceDeletionEvent, and __InstanceOperationEvent. &lt;strong&gt;Now, when do we use each of these event classes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__InstanceCreationEvent&lt;/strong&gt; is used when we want to receive a notification upon creation of an instance. For example, we can use this event class when you want to receive an event notification every time a new process gets created. This can be done by,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for new process events
$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA &amp;#39;Win32_Process&amp;#39;&amp;#34;
#Register WMI event
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;New Process Created. Do something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;__InstanceDeletionEvent&lt;/strong&gt; is used when we want to receive a notification upon deletion of an instance. For example, we can use this class when we want to receive an event notification every time a process is terminated. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for new process events
$query = &amp;#34;Select * from __InstanceDeletionEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;Win32_Process&amp;#39;&amp;#34;
#Register WMI event
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;A Process terminated. Do something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;__InstanceModificationEvent&lt;/strong&gt; is used when we want to monitor changes to an existing instance or a resource. For example, we can use this class when we want to receive an event notification when a the processor utilization on a system goes beyond a specified usage threshold. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for new process events
$query = &amp;#34;Select * from __InstanceModificationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;Win32_Processor&amp;#39; AND TargetInstance.LoadPercentage &amp;gt; 80&amp;#34;
#Register WMI event
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Processor utilization is more than 80%. Do something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of the examples above just displayed a message when the event notification was received. Instead, we can do something useful within the script block. For example, in the __InstanceCreationEvent example, we are just displaying that a new process was created but not the process name that just got created. &lt;strong&gt;So, how do we access that information in the script block and tell a user the name of the process that was created?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Simple, PowerShell creates an automatic variable called $event and stores the last event received in that variable. And, this automatic variable can be accessed in the -Action scriptblock you specify during a WMI event registration. Let us see an example.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL8-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you see in the above example, I made an event registration for process creation events and in the -Action script block, assigned the $event variable to a variable in the global scope ($myEvent). This is essential because we cannot access the $event variable outside the -Action script block. Once the registration was done, I opened a notepad. This will fire the __InstanceCreationEvent and $myEvent should have the details around the event. So, I tried looking at all the members of this event. After exploring that a bit, I figured out that $myEvent.SourceEventArgs.NewEvent.TargetInstance.Name has the name of the new process which is notepad.exe. This is precisely what you see in the last line there.&lt;/p&gt;
&lt;p&gt;$Event.SourceEventArgs.NewEvent.TargetInstance will have the instance of the newly created process. I will leave it to you to explore more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Syntax</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-syntax/</link>
      <pubDate>Wed, 22 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-syntax/</guid>
      <description>&lt;p&gt;The WMI query syntax for event queries is a bit different and deserves a discussion. So, before we delve in to the types of event queries, let us first look at the syntax for WQL event queries. As we discussed &lt;a href=&#34;http://139.59.40.198/blog/?p=1508&#34;&gt;earlier&lt;/a&gt;, we use SELECT statement for event queries too. We can combine this with other keywords such as WITHIN, HAVING, and GROUP to change how we receive these WMI events.&lt;/p&gt;
&lt;p&gt;Here is how a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/cc250721(v=PROT.10).aspx&#34;&gt;MSDN article&lt;/a&gt; shows the syntax for WMI event queries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EVENT-WQL = “SELECT” &lt;!-- raw HTML omitted --&gt; “FROM” /
&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;OPTIONAL-WITHIN = [“WITHIN” &lt;!-- raw HTML omitted --&gt;]
INTERVAL = 1*DIGIT
EVENT-WHERE = [“WHERE” &lt;!-- raw HTML omitted --&gt;]&lt;/p&gt;
&lt;p&gt;EVENT-EXPR = ( (&lt;!-- raw HTML omitted --&gt; “ISA” &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;) /
&lt;!-- raw HTML omitted --&gt; )
[“GROUP WITHIN” &lt;!-- raw HTML omitted --&gt;
( [“BY” [&lt;!-- raw HTML omitted --&gt; DOT] &lt;!-- raw HTML omitted --&gt;]
[“HAVING” &lt;!-- raw HTML omitted --&gt;]] )
INSTANCE-STATE = “TARGETINSTANCE” / “PREVIOUSINSTANCE”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above syntax specification, we know the SELECT, FROM, and WHERE keywords. There are also other keywords such as WITHIN, GROUP, BY, and HAVING. Let us look at each one of these keywords now.&lt;/p&gt;
&lt;h4 id=&#34;within&#34;&gt;WITHIN&lt;/h4&gt;
&lt;p&gt;WITHIN keyword is used to specify the polling interval or grouping interval (used with GROUP clause) for the events. A polling interval is the interval that WMI uses as the maximum amount of time that can pass before notification of an event must be delivered. The general syntax to specify the polling interval,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT * FROM eventclass WITHIN interval WHERE property = value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The polling interval value is specified as number of seconds and is a floating point number. So, we can specify values smaller than one second. However, specifying a polling interval smaller than one second (for example, 0.1) may cause system slow down due to the resource intensive nature of event queries. The recommended values for the polling interval really depend on the event calss. Do not use a small value here unless you really need the event notification be delivered immediately.&lt;/p&gt;
&lt;h4 id=&#34;group&#34;&gt;GROUP&lt;/h4&gt;
&lt;p&gt;Using GROUP clause causes WMI to generate a single notification to represent a group of events. When used in a WMI event query, this returns an instance of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394623(v=VS.85).aspx&#34;&gt;__AggregateEvent&lt;/a&gt; that contains an embedded object of one of the instances received during the grouping interval and number of such events received. These two are represented by &lt;strong&gt;representative&lt;/strong&gt; &amp;amp; &lt;strong&gt;NumberOfEvents&lt;/strong&gt; properties respectively. The grouping interval specifies the time period, after receiving an initial event, during which WMI should collect similar events. The GROUP clause must contain a WITHIN clause to specify the grouping interval and can contain the BY or HAVING keyword, or both. And, the GROUP clause is placed after the WHERE clause if the query contains a WHERE clause. Here is the syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT * FROM EventClass [WHERE property = value] GROUP WITHIN interval
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The WHERE, BY, and HAVING clauses are optional.&lt;/p&gt;
&lt;p&gt;This is especially useful when we don’t want to receive an event notification every time the event fires. For example, when monitoring a system, we may not want to receive a notification every time an specific event log gets generated. Instead, we can use GROUP clause to specify a grouping interval and receive only one notification for all the desired event logs generated within the grouping interval. Something similar to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Build a WMI query for receiving an event
$query = &amp;#34;Select * from __instanceCreationEvent WHERE TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; ANDTargetInstance.EventCode=1980 GROUP WITHIN 300&amp;#34;
#Register the event
Register-WmiEvent -Query $query -Action {Write-Host &amp;#34;Eventlog Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;having&#34;&gt;HAVING&lt;/h4&gt;
&lt;p&gt;In the above imaginary example, we will receive an event notification for all the events received within the grouping interval. But, what if we want to receive the event notification only when ten such event logs are generated within the grouping interval? This is where HAVING plays an important role. Let us look at how we can modify the above sample code to use HAVING keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Build a WMI query for receiving an event
$query = &amp;#34;Select * from __instanceCreationEvent WHERE TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; ANDTargetInstance.EventCode=1980 GROUP WITHIN 300 HAVING NumberOfEvents &amp;gt; 10&amp;#34;
#Register the event
Register-WmiEvent -Query $query -Action {Write-Host &amp;#34;Eventlog Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I mentioned earlier that by using GROUP returns a property called &lt;strong&gt;NumberOfEvents&lt;/strong&gt; that contains the number of events received during the grouping interval. Now, we use that property along with HAVING keyword to filter event notifications. Here is the syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT \* FROM EventClass [WHERE property = value]
GROUP WITHIN interval HAVING NumberOfEvents operator constant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, using the HAVING query as shown above, an event notification is delivered only when WMI receives more than 10 events in the grouping interval.&lt;/p&gt;
&lt;h4 id=&#34;by&#34;&gt;BY&lt;/h4&gt;
&lt;p&gt;You can use BY keyword along with GROUP clause to group events by one or more properties of the event class. The general syntax for using BY is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT \* FROM EventClass [WHERE property = value]
GROUP WITHIN interval [BY property_list]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, The following example groups all events received in 300 seconds by the TargetInstance.SourceName property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Build a WMI query for receiving an event
$query = &amp;#34;Select * from __instanceCreationEvent WHERE TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; `
                                                GROUP WITHIN 300 BY TargetInstance.SourceName `
                                                HAVING NumberOfEvents &amp;gt; 10&amp;#34;
#Register the event
Register-WmiEvent -Query $query -Action {Write-Host &amp;#34;Eventlog Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the events are grouped by the TargetInstance.SourceName property and an event notification is delivered only if the number of events received during the grouping interval exceeds 10.&lt;/p&gt;
&lt;p&gt;So far, we looked at all the important keywords that can be used while building WMI event queries. But, if you have observed, I kept using the words *&lt;strong&gt;eventclass*&lt;/strong&gt; and *&lt;strong&gt;TargetInstance*&lt;/strong&gt;. What are these?&lt;/p&gt;
&lt;h4 id=&#34;event-classes&#34;&gt;Event Classes&lt;/h4&gt;
&lt;p&gt;As discussed earlier, an event class is a WMI class that &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390797(v=VS.85).aspx#wmi.gloss_event_consumer&#34;&gt;&lt;em&gt;event consumers&lt;/em&gt;&lt;/a&gt; can subscribe to by an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390797(v=VS.85).aspx#wmi.gloss_event_query&#34;&gt;&lt;em&gt;event query&lt;/em&gt;&lt;/a&gt;. The class reports a specific type of occurrence. For example, the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394376(v=VS.85).aspx&#34;&gt;&lt;strong&gt;Win32_ProcessStopTrace&lt;/strong&gt;&lt;/a&gt; class reports that a specific process has stopped. In the upcoming parts of this series, we will look at several examples of event classes when we discuss intrinsic and extrinsic events. In fact, __InstanceCreationEvent we used in all the above examples is a part of event classes that are used for intrinsic event queries. More on this later.&lt;/p&gt;
&lt;h4 id=&#34;targetinstance&#34;&gt;TargetInstance&lt;/h4&gt;
&lt;p&gt;TargetInstance references to the instance of the event class. This is precisely the reason why we could use TargetInstance.SourceName or TargetInstance.EventCode in the examples above. Also, take a look at the query again. To refer to an event class instance, we specified TargetInstance ISA ‘Win32_NTLogEvent’. Make a note that we did not use “=” operator or “IS” operator. The only valid comparison operator when referecing TargetInstance is “ISA”.&lt;/p&gt;
&lt;p&gt;This concludes today’s post on WQL syntax for event queries. We shall look at intrinsic and extrinsic events in the upcoming parts. Stay tuned.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workarounds for DayOfWeek Timer events when using Win32_LocalTime</title>
      <link>https://ravichaganti.com/blog/workarounds-for-dayofweek-timer-events-when-using-win32_localtime/</link>
      <pubDate>Fri, 03 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/workarounds-for-dayofweek-timer-events-when-using-win32_localtime/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;http://139.59.40.198/blog/?p=1751&#34;&gt;earlier post&lt;/a&gt;, I showed how Win32_LocalTime WMI class can be used to capture timer events. As mentioned there, WMI events can be quite helpful in creating complex scheduling tasks. For example, you can specify to run a script every Thursday of every fourth week of a month in the third quarter of every year. However, there is a bug in Win32_LocalTime that currently blocks this.&lt;/p&gt;
&lt;p&gt;I created a support incident with MS and reported this bug to them. I got a response that this indeed is a bug and they provided a workaround to solve this temporarily.&lt;/p&gt;
&lt;p&gt;Let us see this with an example. I will use the same scenario I mentioned earlier: &lt;strong&gt;every Thursday of every fourth week of a month in the third quarter of every year&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=3) AND
          (TargetInstance.WeekInMonth=4) AND
          (TargetInstance.DayOfWeek=4 OR TargetInstance.DayOfWeek=5) AND
          (TargetInstance.Hour=12) AND
          (TargetInstance.Minute=0) AND
          (TargetInstance.Second=0)&amp;#34;            

Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Event Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Observe how I used DayOfWeek property twice in the query. This is the workaround. This event fires only when DayOfWeek is used this way. However, the side effect of this is: the event fires on both Thursday (4) and Friday (5). We can workaround this in a couple of ways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. You can check for DayOfWeek in the -Action script block as shown here.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=4) AND
          (TargetInstance.WeekInMonth=1) AND
          (TargetInstance.Hour=19) AND
          (TargetInstance.Minute=41) AND
          (TargetInstance.Second=0)&amp;#34;            

Register-WmiEvent -Query $query -Action { if ($MyEvent.SourceEventArgs.NewEvent.TargetInstance.DayOfWeek -eq 5) { write-Host &amp;#34;Event Arrived&amp;#34; } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. You can provide some dummy DayOfWeek value, anything outside 0-6&lt;/strong&gt;. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=4) AND
          (TargetInstance.WeekInMonth=1) AND
          (TargetInstance.DayOfWeek=5 OR TargetInstance.DayOfWeek=9) AND
          (TargetInstance.Hour=19) AND
          (TargetInstance.Minute=41) AND
          (TargetInstance.Second=0)&amp;#34;            

Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Event Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way event fires on Thursday as desired and the second check for DayOfWeek=9 will never fire. This is it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Timer Events in PowerShell using Win32_LocalTime</title>
      <link>https://ravichaganti.com/blog/wmi-timer-events-in-powershell-using-win32_localtime/</link>
      <pubDate>Wed, 24 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-timer-events-in-powershell-using-win32_localtime/</guid>
      <description>&lt;p&gt;This is not a part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=261&#34;&gt;WQL series&lt;/a&gt; I am doing. I happend to take a look at the WMI timer events while providing feedback to an upcoming (cool) &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; module by &lt;a href=&#34;http://trevorsullivan.net/&#34;&gt;Trevor&lt;/a&gt; (@pcgeek86). BTW, this module will be released on November 30th. So, watch out for the annoncement.&lt;/p&gt;
&lt;p&gt;Coming to the subject of this post, in WMI, there are 3 types of events possible. They are Timer events, Intrinsic events, and extrinsic events. My WQL series will soon cover intrinsic and extrensic events. Very few people have written about WMI timer events in the past but &lt;a href=&#34;http://theadminblog.blogspot.com/2009_02_01_archive.html&#34;&gt;this &lt;/a&gt;particular post on &lt;a href=&#34;http://theadminblog.blogspot.com/&#34;&gt;The SysAdmins blog &lt;/a&gt;discusses good amount of details.&lt;/p&gt;
&lt;p&gt;In today’s post, I am going to write about WMI timer events in PowerShell and how to use Register-WMIEvent cmdlet to create a temporary consumer to consume these events. In general, WMI timer events are generated by WMI infrastructure at a point in time. In the good old days of Windows 2000, we had to capture these by creating an instance of classes derived from the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394685(v=VS.85).aspx&#34;&gt;__TimerInstruction&lt;/a&gt; class. Also, there are two types of timer events.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Absolute Timer Events&lt;/strong&gt; occur on a specific day at a specific time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interval Timer Events&lt;/strong&gt; are events that occur periodically at specified intervals. For example, every 30 minutes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prior to Windows 2003, we have had to use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394620(v=VS.85).aspx&#34;&gt;__AbsoluteTimerInstruction&lt;/a&gt; class and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394654(v=VS.85).aspx&#34;&gt;__IntervalTimerInstruction&lt;/a&gt; class to define these events. However, that isn’t necessary anymore with the introduction of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394171(v=VS.85).aspx&#34;&gt;Win32_LocalTime&lt;/a&gt; or &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394510(v=VS.85).aspx&#34;&gt;Win32_UTCTime&lt;/a&gt; WMI classes. With these two classes, we can use the standard WMI eventing model to consume timer events.&lt;/p&gt;
&lt;p&gt;Let us take a look at Win32_LocalTime. This class represents an instance of Win32_CurrentTime.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/localtime1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above screenshot, an instance of this class represents the current date and time. There are a few special properties that tell you which quarter of the year, week in the current month, and etc. Do refer to the MSDN link for this class and read about the properties. Especially, the DayOfWeek property. It always indicates Sunday as zero irrespective of the system culture and langauge settings.&lt;/p&gt;
&lt;p&gt;Since, these this class supports standard WMI eventing model, we can use an intrinsic event query to consume these events. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Setup WQL query
$query = &amp;#34;SELECT * FROM __InstanceModificationEvent WHERE TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;&amp;#34;
#Register WMI Event
Register-WmiEvent -Query $Query -SourceIdentifier &amp;#34;Event-Every-Second&amp;#34; -Action { Write-Host &amp;#34;Event Received&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will result in displaying “Event Received” message at the console every one second. This is because the event fires every one second and that is the smallest time segment supported. Now, this won’t be very useful unless you want to flood your consumer with a bunch of useless messages every one second. Let us look at another example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Setup WQL query
$query = &amp;#34;SELECT * FROM __InstanceModificationEvent WHERE TargetInstance ISA
            &amp;#39;Win32_LocalTime&amp;#39; AND TargetInstance.Hour=14
                              AND TargetInstance.Minute=30
                              AND TargetInstance.Second=0&amp;#34;
#Register WMI Event
Register-WmiEvent -Query $Query -SourceIdentifier &amp;#34;Event-Every-Day-14.30PM&amp;#34; -Action { Write-Host &amp;#34;Event Received&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, we use WQL query to register for a WMI event that fires every day at 14.30 hours. Note that the hours value is in 24 hour format. Now, this is useful. I can use the -Action script block to do something better like running a backup script when this event fires. Similarly, you can also create event registrations for events occurring on specific day of every quarter (Quarter) or specific week (WeekInMonth) of every month.&lt;/p&gt;
&lt;p&gt;WMI Timer events can be used to create some very advanced scheduling jobs. Register-WMIEvent creates a temporary consumer but just imagine being able to create a permanent consumer and use that for scheduling several administrative tasks. I will update this post once Trevor (@pcgeek86) releases his PowerEvents module and show you some cool tricks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However, here is the catch:&lt;/strong&gt; There is a bug that causes DayOfWeek to stop triggering any timer events.
&lt;strong&gt;Update:&lt;/strong&gt; I posted this question on DayOfWeek at &lt;a href=&#34;http://social.msdn.microsoft.com/Forums/en-US/etw/thread/06b7ae7f-737e-47f2-9ae2-a5b8d4c125a9&#34;&gt;http://social.msdn.microsoft.com/Forums/en-US/etw/thread/06b7ae7f-737e-47f2-9ae2-a5b8d4c125a9&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Setup WQL query for DayOfWeek
$query = &amp;#34;SELECT * FROM __InstanceModificationEvent WHERE TargetInstance ISA
            &amp;#39;Win32_LocalTime&amp;#39; AND TargetInstance.=3
                              AND TargetInstance.Hour=12
                              AND TargetInstance.Minute=16
                              AND TargetInstance.Second=0&amp;#34;
#Register WMI Event
Register-WmiEvent -Query $Query -SourceIdentifier &amp;#34;Event-Every-Tuesday-12-16PM&amp;#34; -Action { Write-Host &amp;#34;Start backup&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a dissappointing bug and I am going to check if MS has any answer. Their documentation for Win32_LocalTime uses a WQL query that has DayOfWeek property. I’d experimented with the same query in PowerShell, VBScript &amp;amp; C#. It worked no where. So, timer events are quite useful in creating advanced scheduling jobs but the current bug is keeping it away from “real” world use.&lt;/p&gt;
&lt;p&gt;I will update this post with the details I find out or get from Microsoft. Keep watching this space.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Introduction</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-introduction/</link>
      <pubDate>Mon, 15 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-introduction/</guid>
      <description>&lt;p&gt;In this post, I will write a bit about basics of WMI events and how Register-WMIEvent cmdlet can be used. To start with, here is an excerpt from &lt;a href=&#34;http://technet.microsoft.com/en-us/library/ee156572.aspx&#34;&gt;Microsoft Scripting guide&lt;/a&gt; that introduces WMI events:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just as there is a WMI class that represents each type of system resource that can be managed using WMI, there is a WMI class that represents each type of WMI event. When an event that can be monitored by WMI occurs, an instance of the corresponding WMI event class is created. A &lt;em&gt;WMI event&lt;/em&gt; occurs when that instance is created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Windows PowerShell v2 provides a cmdlet — Register-WMIEvent — to consume WMI events. There are a couple of different ways we can use this cmdlet. You can either use -Class or -Query parameters to create a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393013(VS.85).aspx#event_consumers&#34;&gt;temporary &lt;/a&gt;event consumer. When using -Class parameter, we need to specify a WMI &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390797(v=VS.85).aspx#wmi.gloss_event_class&#34;&gt;event class&lt;/a&gt;. So, what happens if the value provided to the -Class parameter isn’t a WMI event class? Yes, PowerShell complains about it :).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL6-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;So, PowerShell says that Win32_Process isn’t an event class. Now, how do we know what are the WMI event classes? Simple, we can use a WMI query to find out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Get all classes that are WMI event classes
#filter class names for Win32 classes
Get-WMIObject -Query &amp;#34;Select * from meta_class Where (__This ISA &amp;#39;__Event&amp;#39;) AND (__Class like &amp;#39;win32%&amp;#39;)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will list all WMI event classes that start with Win32 prefix. You will see many more if you remove the second condition in the WHERE clause but for starters, this is good enough. If you execute the above PowerShell command, you will see a WMI class named &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394374(VS.85).aspx&#34;&gt;Win32_ProcessStartTrace&lt;/a&gt;. This class indicates the new process started event. We can use this WMI class to subscribe to all process start events. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Register-WmiEvent -Class Win32_ProcessStartTrace -SourceIdentifier &amp;#34;Process Started&amp;#34; `
                  -Action { Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.ProcessName) just started&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You have to open the PowerShell console in elevated mode. Else, you will see an access denied message everytime you try using Register-WMIEvent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This command will register an event consumer and display a message with the newly created process name. However, this will result in receiving the messages at the console everytime any process starts and not just the one you are interested in.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL6-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;So, what if you are interested only in one specific process? We could have easily filtered out the unnecessary processes before displaying the process name at the conole. But, why even receive the event when we don’t need it? This is where -Query parameter comes handy. Look at this example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Register-WMIEvent using -Query
Register-WmiEvent -Query &amp;#34;Select * from Win32_ProcessStartTrace WHERE ProcessName=&amp;#39;notepad.exe&amp;#39;&amp;#34; `
                  -Action {Write-Host &amp;#34;New notepad process created&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The WQL statement we used should be familiar to you by now. There are many other ways to monitor process creation using WMI events and WQL. What I showed above is just one way of doing it. We shall see the other methods soon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WMI Event Types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two types of WMI events one should understand: Intrinsic Events and Extrinsic Events. It is important to understand what are the two types of events before we dig in to WQL for WMI events. There are also timer events but these type of events are rarely used in any system administration type of scripting. So, let us keep it aside for now and visit it towards the end of this series.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intrinsic Events&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intrinsic events are used to monitor a resource represented by a class in the CIM repository. In other words, the intrinsic events occur in response to a change in the standard WMI data model. WMI creates intrinsic events for objects stored in the WMI repository. A provider generates intrinsic events for dynamic classes, but WMI can create an instance for a dynamic class if no provider is available. WMI uses polling to detect the changes. There are many system classes that WMI uses to report intrinsic events. However, the ones that are most interesting and useful are __InstanceCreationEvent, __InstanceModificationEvent, and __InstanceDeletionEvent. Hence, monitoring resources on a system involves monitoring of these system classes. We shall see some examples when we start discussing intrinsic events in the next post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extrinsic Events&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Extrinsic events represent events that do not directly link to standard WMI model. For example, Windows registry defines extrinsic events for all registry change events. For intrinsic events, having a WMI provider isn’t mandatory. This is mostly because they are defined within the standard WMI model and WMI takes care of these if there is no WMI provider for a given resource in the standard WMI model. However, since extrinsic events are outside of the standard WMI model, having a WMI provider is mandatory. We shall see more examples of this in the later posts.&lt;/p&gt;
&lt;p&gt;This concludes today’s post. I just introduced you to WMI events, showed some basic examples of using Register-WMIEvent cmdlet, and provided an introduction to different event types. In the next post, I shall talk about WQL syntax for writing event queries and then move on to showing some examples for intrinsic WMI events. Stay tuned.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Data Queries: References Of</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-references-of/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-references-of/</guid>
      <description>&lt;p&gt;Per MSDN documentation, the REFERENCES OF statement&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retrieves all association instances that refer to a particular source instance. The REFERENCES OF statement is similar to the ASSOCIATORS OF statement in its syntax. However, rather than retrieving endpoint instances, it retrieves the intervening association instances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is very cryptic for beginners like you and me. So, let us look at an example to understand this.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL5-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you look at the above diagram (captured from the associations tab of Win32_Process in CIM Studio) and as I showed you in my &lt;a href=&#34;http://139.59.40.198/blog/?p=1580&#34;&gt;earlier post&lt;/a&gt;, Win32_SessionProcess, in32_NamedJobObjectProcesses, Win32_SystemProcesses are the associator or association classes. Whereas, Win32_Process, Win32_LogonSession, Win32_NamedObject, and Win32_ComputerSystem are the associated classes.&lt;/p&gt;
&lt;p&gt;Now, let us go back to the definition. The REFERENCES OF statement retrieves all association instances that refer to a particular source instance. However, it retrieves only the intervening association instances. Again, I will show you an example to explain this.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL5-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the above screen capture, you can see the syntax for using REFERENCES OF is exactly same as that of ASSOCIATORS Of. If you closely observe the output, it is more or less same as the associator classes listed in the CIM Studio output. If you look at the properties of each WMI class listed there, you will find “Antecedent”, “Dependent”, “GroupComponent”, and “PartComponent”. These are called &lt;strong&gt;references&lt;/strong&gt;. They can be identified by type &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393024(v=VS.85).aspx&#34;&gt;ref&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is no Win32_NamedJobObjectProcesses in the output here and there is an additional CIM_ProcessExecutable. There is a missing link I am trying to find. I will update this soon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we had used “Associators of” instead of “References Of”, we would have seen the endpoint class definitions which are Win32_LogonSession, Win32_ComputerSystem, and Win32_NamedJobObject. You can see that in the output here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL5-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Similar to Associators Of keyword, you can use the WHERE clause with “References Of” keyword also. There are predefined keywords that you can use with WHERE clause. They are:&lt;/p&gt;
&lt;p&gt;REFERENCES OF {ObjectPath} WHERE
ClassDefsOnly
RequiredQualifier = QualifierName
ResultClass = ClassName
Role = PropertyName&lt;/p&gt;
&lt;p&gt;We have already seen an example of using ClassDefsOnly. Also, usage of these keywords is similar to what I mentioned an &lt;a href=&#34;http://139.59.40.198/blog/?p=1580&#34;&gt;earlier post&lt;/a&gt;. This concludes the WQL “Data or Object” queries part of this series. In the next part, we shall look at how to perform event queries and then proceed on to schema queries to end this series. I will also try to put together some “real” world examples for “Associators Of” and “References Of” keywords. Whatever we discussed around these two keywords has been really generic examples and may not have provided lot of insight in to where exactly you can use these.&lt;/p&gt;
&lt;p&gt;I hope you find this useful and I am looking for your feedback on how to improve. Thanks again for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Data Queries: Associators Of</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-associators-of/</link>
      <pubDate>Mon, 13 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-associators-of/</guid>
      <description>&lt;p&gt;As we saw in the previous post, Select queries can be used to retrieve instances of WMI class. But select queries are not the only way to query for instances. We can also use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa384793(v=VS.85).aspx&#34;&gt;Associators Of&lt;/a&gt; keyword to the same. However, there is a difference. Select queries always return a collection of instances of a WMI class where as “Associators Of” returns a collection of WMI objects that belong to different WMI classes or associated WMI classes. Before we dig too much in to this, let us first understand what are associated WMI classes.&lt;/p&gt;
&lt;p&gt;Take an example of a network adapter.WMI has several classes that represent network adapter information. Let us look at Win32_NetworkAdapter. This WMI class is associated with Win32_NetworkAdapterConfiguration, Win32_NetworkProtocol, and Win32_SystemDriver.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL4-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you look at the above output (from CIM Studio’s association tab for a selected class), you will see that Win32_NetworkAdapterconfiguration is associated to Win32_NetworkAdapter through an association class named Win32_NetworkAdapterSetting. And, the other two classes — Win32_NetworkProtocol &amp;amp; Win32_SystemDriver — are associated through an association class named Win32_ProtocolBinding. Make a note of the terminology I used here: associated Class &amp;amp; association class. We will re-visit this later in this post.&lt;/p&gt;
&lt;p&gt;So, the basic syntax of this “Associators Of” keyword is:&lt;/p&gt;
&lt;p&gt;ASSOCIATORS OF {ObjectPath}&lt;/p&gt;
&lt;p&gt;Note that the braces are part of the syntax. Any valid object path can be used for ObjectPath. Let us look at an example to understand this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above snippet shows the basic usage of Associators Of. Make a note of the syntax inside curly braces. This query — when executed — gets all the instances of all associated classes (see above screenshot). So, this can take a while and the output can be overwhelming. Remember, this query without DeviceID=12 will not return anything. We have to specify a qualifier to get the associated instances. This qualifier can be any property from the source WMI class.&lt;/p&gt;
&lt;p&gt;The output of above query can be overwhelming as the number of associated classes is very large and each associated class may have more than one instance. You can use WHERE clause to filter this out. However, the usage of WHERE clause is a bit different from how you do that with SELECT queries. There are predefined keywords that you can use with WHERE clause. They are:&lt;/p&gt;
&lt;p&gt;ASSOCIATORS OF {ObjectPath} WHERE
AssocClass = AssocClassName
ClassDefsOnly
RequiredAssocQualifier = QualifierName
RequiredQualifier = QualifierName
ResultClass = ClassName
ResultRole = PropertyName
Role = PropertyName&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You cannot use logical operators such as AND, OR, and NOT within the WHERE clause while using Associators Of keyword. You can use more than one subclause by just separating them by a space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us see the examples for some of these now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ClassDefsOnly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let us first see a way to list only the associated class names as shown in the screenshot above. You can use the subclause ClassDefsOnly for this purpose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE ClassDefsOnly&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will list all the associated class names and methods &amp;amp; properties associated with each of those classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AssocClass&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to retrieve the instance of associated class though a single association class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Associators of {Win32_NetworkAdapter.DeviceID=12} WHERE AssocClass=Win32_ProtocolBinding&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will result in the driver &amp;amp; protocol information bound to network adapter with device ID 12.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ResultClass&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This subclause indicates that you want to retrieve the end points associated only with the specified ResultClass. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE ResultClass=Win32_NetworkAdapterConfiguration&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Why the heck do you need associators of?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Technically, you don’t need to use this keyword. You can script or parse away to glory to get the same results as what “Associators Of “keyword can do for you. Take an example of Win32_NetworkAdapter class itself. Win32_NetworkAdapter stores the physical adapter details and Win32_NetworkAdapterConfiguration stores the software (IP) configuration pertaining to each adapter instance. These two classes are associated using the Win32_NetworkAdapterSetting association class. To get the IP configuration information without using “Associators of” keyword is not a straight forward task. In layman terms, this is because there is no common key between WIn32_NetworkAdapter and Win32_NetworkAdapterConfiguration. You may think that you can use Win32_NetworkAdapterSetting class to retrieve the information. However, when you run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Class Win32_NetworkAdapaterSetting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;you will see lot of information related to all network adapters in the system but there is no easy way to filter out that for a specific device. Now, if you use “Associators Of” keyword, you can get the IP information by running&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE ResultClass=Win32_NetworkAdapterConfiguration&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE AssocClass=Win32_NetworkAdapterSetting&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may now ask me why not just run “gwmi Win32_NetworkAdapaterConfiguration -Filter ‘Index=12′”. Yes, you can. This is probably the simplest way to get IP information without what is shown above. The examples above are intended only to show the usage of “Associators Of” keyword.&lt;/p&gt;
&lt;p&gt;On the same lines, let us look at another example. For a moment think that Get-Service cmdlet never existed. Now, if you want to get the dependent services of any specific service without using “associators Of”, you would do that by parsing Win32_DependentService instances. However, using the keyword discussed today, you can the do same by&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators of {Win32_Service.Name=&amp;#39;Winmgmt&amp;#39;} Where ResultRole=Dependent&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get a list of services that must be started before starting a specific service,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators of {Win32_Service.Name=&amp;#39;Winmgmt&amp;#39;} Where ResultRole=Antecedent&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get a list of both dependent and required services&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators of {Win32_Service.Name=&amp;#39;Winmgmt&amp;#39;} Where AssocClass=Win32_DependentService&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I shall conclude today’s post here and discuss “References Of” in the next post. I intentionally left a few Sub clauses for you to figure out yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Data Queries: SELECT, FROM, and WHERE</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-select-from-and-where/</link>
      <pubDate>Tue, 03 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-select-from-and-where/</guid>
      <description>&lt;p&gt;In this part of the series on WQL, we will look at what are data queries and how some of the WQL keywords &amp;amp; operators can be used to retrieve information from WMI repository. Also, as mentioned earlier, there are many other tools that consume WQL queries to retrieve information from WMI. However, in this series, I shall use only PowerShell to demonstrate WQL.&lt;/p&gt;
&lt;p&gt;WQL data queries are the most simplest form of querying for WMI data. Data queries are used to retrieve class instances and data associations. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Select * FROM Win32_Process WHERE HandleCount&amp;gt;=5500&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gives us a list of all processes with a handle count above 5500.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
You can use -filter parameter to Get-WMIObject instead of -Query. Whatever you pass as a value to -filter will be used within the WHERE clause of a WQL statement. For example, the above PowerShell example can be re-written as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Class Win32_Process -Filter &amp;#34;HandleCount&amp;gt;=5500&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, here is the difference between using -Query or  -Filter. You can pass any valid WQL statement as a value to -Query parameter. However, whatever value you pass as a value to -filter will always be used within the WHERE clause. So, the value to -filter must be a valid WHERE clause value with proper use of WQL operators. For example, using a PowerShell comparison operator such as -eq is not valid within -Filter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us use this example and discuss a few keywords.&lt;/p&gt;
&lt;h4 id=&#34;select&#34;&gt;SELECT&lt;/h4&gt;
&lt;p&gt;In the above WQL query,  we used &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393276(v=VS.85).aspx&#34;&gt;SELECT&lt;/a&gt; statement. This statement returns instances of the specified class and any of its subclasses. As a general practice, many people retrieve WMI data by specifying SELECT * FROM &lt;!-- raw HTML omitted --&gt;. By using *, we retrieve all possible properties of a given WMI class. This type of query can take a while to execute and consume more bandwidth to retrieve the result set. One method to reduce the bandwidth required to retrieve the result set is to replace * with selected set of property names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;SELECT Name FROM Win32_Process WHERE HandleCount&amp;gt;=5500&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -class Win32_Process -Filter &amp;#34;HandleCount&amp;gt;=5500&amp;#34; -Property Name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;from&#34;&gt;FROM&lt;/h4&gt;
&lt;p&gt;FROM statement is used to specify the class from which we need to create the instances. Remember that you can perform data queries only from one class at a time. For example, the following query will produce an invalid query error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Select * from win32_Service, Win32_Process&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;where&#34;&gt;WHERE&lt;/h4&gt;
&lt;p&gt;As you may be familiar by now, WHERE keyword is used to narrow the scope of retrieved data based on a filter. This keyword can be used in all of the three query types. In general, WHERE clause when used with SELECT statement can take one of the following forms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT * FROM class WHERE property operator constant
SELECT * FROM class WHERE constant operator property&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above two forms, property denotes a valid property of a WMI instance, operator is any valid WQL operator and constant must be of the correct type for the property. We have already seen an example of the first form of using WHERE. Here is an example for the second form. The following query retrieve all services in stopped state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;SELECT Name FROM Win32_Service WHERE &amp;#39;Stopped&amp;#39;=State&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Multiple groups of properties, operators, and constants can be combined in a WHERE clause using logical operators such as AND, OR, and NOT. Here are a few examples to demonstrate these.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Select * from Win32_Service Where State=&amp;#39;Running&amp;#39; AND StartMode=&amp;#39;Manual&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;SELECT * FROM Win32_LogicalDisk WHERE Name = &amp;#39;C:&amp;#39; OR Name = &amp;#39;D:&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;SELECT * FROM win32_Service WHERE NOT (State=&amp;#39;Stopped&amp;#39;)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above three examples show using AND, OR, and NOT logical operators with WHERE clause to perform multiple filters. In the third example, we can replace NOT with other WQL operators. For example, the same query can be performed in the following ways:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;SELECT * FROM win32_Service WHERE State&amp;lt;&amp;gt;&amp;#39;Stopped&amp;#39;&amp;#34;
Get-WMIObject -Query &amp;#34;SELECT * FROM win32_Service WHERE State!=&amp;#39;Stopped&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also use IS, IS NOT operators within WHERE clause. However, the query will be valid only if the constant is NULL. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -query &amp;#34;SELECT * FROM Win32_LogicalDisk WHERE FileSystem IS NULL&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is valid and will return the disk drive information with no file system information. However, the following example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -query &amp;#34;SELECT * FROM Win32_LogicalDisk WHERE DriveType IS 5&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will result in an invalid query error.&lt;/p&gt;
&lt;p&gt;There are many other keywords such as REFERENCES OF, ASSOCIATORS OF within the context of data queries. To keep these posts short, I will end today’s post here and discuss a few more keywords in the next post. As usual, please leave your feedback here on what can be improved and what else you want to see.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Keywords and Operators</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-keywords-and-operators/</link>
      <pubDate>Mon, 02 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-keywords-and-operators/</guid>
      <description>&lt;p&gt;In this post, we will look at the a brief description of WQL keywords and operators and see a classification of the keywords based on where (query types) these keywords can be used.&lt;/p&gt;
&lt;h3 id=&#34;keywords&#34;&gt;Keywords&lt;/h3&gt;
&lt;p&gt;Similar to SQL, WQL queries use keywords to retrieve data from the management objects. WQL has 19 keywords to perform these queries against WMI repositories. In the previous post, we discussed about three types of queries: Data, Event, and Schema. Though there are 19 WQL keywords, only a few of them can be used all 3 possible query types. The following table lists all the WQL keywords and lists the query type in which they can be used.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Keyword&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Query Type&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Data&lt;/td&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;Event&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AND&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Combines two Boolean expressions, and returns TRUE when both expressions are TRUE.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ASSOCIATORS OF&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Retrieves all instances that are associated with a source instance. Use this statement with schema queries and data queries.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__CLASS&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;References the class of the object in a query.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FROM&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Specifies the class that contains the properties listed in a SELECT statement. Windows Management Instrumentation (WMI) supports data queries from only one class at a time.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GROUP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Causes WMI to generate one notification to represent a group of events.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAVING&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Filters the events that are received during the grouping interval that is specified in the WITHIN clause.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IS&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Comparison operator used with NOT and NULL. The syntax for this statement is the following: IS [NOT] NULL (where NOT is optional)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISA&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Operator that applies a query to the subclasses of a specified class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KEYSONLY&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Used in REFERENCES OF and ASSOCIATORS OF queries to ensure that the resulting instances are only populated with the keys of the instances, which reduces the overhead of the call.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIKE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Operator that determines whether or not a given character string matches a specified pattern.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NOT&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Comparison operator that use in a WQL SELECT query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Indicates an object does not have an explicitly assigned value. NULL is not equivalent to zero (0) or blank.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OR&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Combines two conditions. When more than one logical operator is used in a statement, the OR operators are evaluated after the AND operators.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REFERENCES OF&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Retrieves all association instances that refer to a specific source instance. Use this statement with schema and data queries. The REFERENCES OF statement is similar to the ASSOCIATORS OF statement. However, it does not retrieve endpoint instances; it retrieves the association instances.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Specifies the properties that are used in a query.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Boolean operator that evaluates to -1 (minus one).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WHERE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Narrows the scope of a data, event, or schema query.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WITHIN&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Specifies a polling or grouping interval.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Boolean operator that evaluates to 0 (zero).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;operators&#34;&gt;Operators&lt;/h3&gt;
&lt;p&gt;WMI Query Language also uses operators. The following table lists all the opeartors supported in WQL.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;Less than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;Greater than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!= or &amp;lt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A few WQL keywords such as IS, ISA, NOT, and LIKE can also be considered as operators. In these keywords, IS and IS NOT operators are valid in the WHERE clause only if the constant is NULL. We will see a detailed discussion around these keywords &amp;amp; operators in the upcoming posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – An introduction</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-an-introduction/</link>
      <pubDate>Thu, 22 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-an-introduction/</guid>
      <description>&lt;p&gt;I have been using &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394582(v=VS.85).aspx&#34;&gt;WMI &lt;/a&gt;a lot these days and got to play with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa392902(v=VS.85).aspx&#34;&gt;WQL &lt;/a&gt;as well. In this series of posts, I want to write about how &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394606(VS.85).aspx&#34;&gt;WMI Query Language (WQL)&lt;/a&gt; can be used to retrieve management data exposed by WMI. Yes, this has nothing to do with PowerShell but as a PowerShell lover (and a &lt;a href=&#34;https://mvp.support.microsoft.com/profile=0B78975F-D499-467B-A2C0-2182990E8513&#34;&gt;MVP &lt;/a&gt;now), I will use PowerShell for all my examples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394572(v=VS.85).aspx&#34;&gt;Windows Management Instrumentation (WMI)&lt;/a&gt; is the Microsoft implementation of Web-based Enterprise Management (WBEM), which is an industry initiative to develop a standard technology for accessing management information in an enterprise environment. WMI uses the Common Information Model (CIM) industry standard to represent systems, applications, networks, devices, and other managed components. CIM is developed and maintained by the Distributed Management Task Force (&lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkId=67786&#34;&gt;DMTF&lt;/a&gt;). We can write WMI scripts to automate several tasks on local or remote computer(s).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PowerShell has a few cmdlets to retrieve the management data exposed by WMI. You can see these cmdlets by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Use Get-Command and mention WMI* as the Noun
Get-Command -Noun WMI*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One of the cmdlets to retrieve WMI information is Get-WMIObject. In it’s basic usage, this cmdlet, gets the instance of a specified WMI class. So, for example, if you need to list out all drives of type 4 (network drives) in a system,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Class Win32_LogicalDisk | Where-Object {
    $_.DriveType -eq 4
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above method, we retrieve all instances of Win32_LogicalDisk and then pass it  to Where-Object to filter out what we need. Depending on how many instances are there, this can take a while. You can use an alternative approach by specifying the -Query parameter instead of -Class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#This example uses -Query parameter and specifies the query using WQL
Get-WmiObject -Query &amp;#34;Select * from Win32_LogicalDisk WHERE DriveType=4&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example uses WMI Query Language to get the same information as the earlier example but a bit more faster. You can, of course, verify that using Measure-Command cmdlet. You can see the clear difference here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The above example is very basic and may not really explain the usefulness of WQL — the speed of execution is just one benefit. When using WQL, there are quite a few advanced querying techniques that can be used to retrieve WMI information in an efficient manner. And, sometimes – such as working with WMI events, WQL becomes a necessity. So, this series of posts will explain each of those scenarios and with some appropriate examples.&lt;/p&gt;
&lt;p&gt;With that background, let us now look at WMI Query Language.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394606(v=VS.85).aspx&#34;&gt;WMI Query Language (WQL)&lt;/a&gt; is a subset of the American National Standards Institute Structured Query Language (ANSI SQL)—with minor semantic changes. Similar to SQL, WQL has a set of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394606(v=VS.85).aspx&#34;&gt;keywords&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394605(v=VS.85).aspx&#34;&gt;operators&lt;/a&gt;. WQL supports three types of queries&lt;/p&gt;
&lt;h4 id=&#34;data-queries&#34;&gt;Data Queries&lt;/h4&gt;
&lt;p&gt;This type is the most simplet form of querying for WMI data. The earlier example, where we queried for all instances of Win32_LogicalDisk where the driveType is 4, is a data query. Data queries are used to retrieve class instances and data associations. The WQL keywords such as SELECT, ASSOCIATORS OF, REFERENCES OF, and ISA are used in data queries.&lt;/p&gt;
&lt;h4 id=&#34;schema-queries&#34;&gt;Schema Queries&lt;/h4&gt;
&lt;p&gt;Schema queries are used to retrieve class definitions (rather than class instances) and schema associations. In layman’s terms, these queries are used to get information about WMI and its structure. Schema queries return a result set of class definition objects rather than actual instances of classes. The WQL keywords such as SELECT, ASSOCIATORS OF, REFERENCES OF, and ISA are used in schema queries and of course, in a slightly different way than how data queries use these keywords.&lt;/p&gt;
&lt;h4 id=&#34;event-queries&#34;&gt;Event Queries&lt;/h4&gt;
&lt;p&gt;The event queries are used to create WMI event subscriptions. For example, using these queries, you can create an event subscription to notify whenever a USB drive gets attached to the system. The WQL keywords such as GROUP, HAVING, and WITHIN are used (and are specific to) when creating event queries. The event queries are critical when you want use PowerShell cmdlets such as Register-WMIEvent, etc.&lt;/p&gt;
&lt;p&gt;And, finally, a couple of items you should know&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WQL does not support cross-namespace queries or associations. You cannot query for all instances of a specified class residing in all of the namespaces on the target computer.&lt;/li&gt;
&lt;li&gt;WQL queries are read-only. There are no keywords such as INSERT or UPDATE. Using WQL, we cannot modify the WMI objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This brings us to the end of this post on WQL introduction. In the subsequent posts, we will look at each of the WQL keywords and each WQL query type. I am also learning as I write this series. So, I welcome your feedback.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Bangalore ITPro - PowerShell for ActiveDirectory Administration</title>
      <link>https://ravichaganti.com/blog/slides-from-bangalore-itpro-barcamp-powershell-for-activedirectory-administration/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-from-bangalore-itpro-barcamp-powershell-for-activedirectory-administration/</guid>
      <description>&lt;p&gt;I was at Bangalore ITPro BarCamp today and did a session on “PowerShell for Active Directory”. Here are the slides from that session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/ETmDJt3jFoSlGQ&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: PSBUG Meet - PowerShell 2.0 remoting</title>
      <link>https://ravichaganti.com/blog/psbug-ug-meet-slides-powershell-2-0-remoting/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/psbug-ug-meet-slides-powershell-2-0-remoting/</guid>
      <description>&lt;p&gt;We had the BITPro / PowerShell Bangalore User Group UG meet today. I presented PowerShell 2.0 remoting. Here are the slides I used at this UG meet.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/wxuMRDES5Q3sCL&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Getting Started with PowerShell scripting</title>
      <link>https://ravichaganti.com/blog/slides-getting-started-with-powershell-scripting/</link>
      <pubDate>Sat, 13 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-getting-started-with-powershell-scripting/</guid>
      <description>&lt;p&gt;I just came back from the &lt;!-- raw HTML omitted --&gt;PowerShell&lt;!-- raw HTML omitted --&gt; / &lt;!-- raw HTML omitted --&gt;Bangalore ITPro&lt;!-- raw HTML omitted --&gt; UG meet. We had nearly 40 people showing up for this event. I spoke about getting started with PowerShell scripting and &lt;!-- raw HTML omitted --&gt;Ismail&lt;!-- raw HTML omitted --&gt; talked about Exchange 2010 migration. Here are the slides I used for my session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/JDWNWgF5R8BL60&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;If you were there at the session, please provide your feedback either here or as a tweet to &lt;!-- raw HTML omitted --&gt;@psbug&lt;!-- raw HTML omitted --&gt;. See you at the next meet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 12 – Using CredSSP for multi-hop authentication</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-12-using-credssp-for-multi-hop-authentication/</link>
      <pubDate>Thu, 18 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-12-using-credssp-for-multi-hop-authentication/</guid>
      <description>&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, we look at how &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/cc226764(PROT.10).aspx&#34;&gt;CredSSP &lt;/a&gt;can be used for &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee309365(VS.85).aspx&#34;&gt;multi-hop authentication&lt;/a&gt; in PowerShell remoting. CredSSP and multi-hop support are not features of PowerShell 2.0 or PowerShell remoting, per se. Credential Security Service Provider (CredSSP) is a new security service provider that enables an application to delegate the user’s credentials from the client to the target server. Multi-hop support in Windows Remote Management uses CredSSP for authentication. Since PowerShell 2.0 remoting is built on top of WinRM, we can use CredSSP to perform multi-hop authentication.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, what is multi-hop authentication?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, let us look at an example to understand what is multi-hop authentication. Imagine a group of computers as shown here and you establish a remoting session from computer A (client) to computer B (server) and then from computer B, you try to create a file in a file share on computer C.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting12-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, within the remoting session to computer B, we want to execute a command — as below — to create test.txt on computer C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName Test-PC.SP2010lab.com -credential SP2010LAB\Administrator -ScriptBlock {[System.IO.File]::Create(\\FileServer\Share\Test.txt)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting12-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This command results in an “Access Denied” error as shown above. This command fails since the remote session tries to access the file share using the machine credentilas instead of the credentials used to invoke the remote session. We could have successfully created the text file if there was a way to pass or delegate credentials from the client so that we can authenticate to the file share. This is what is called multi-hop authentication and PowerShell remoting enables this using CredSSP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we delegate credentials?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The cmdlets to create a remoting session — Invoke-Command, Enter-PSSession and New-PSSession — have a parameter to specify the authentication method as CredSSP. However, before we use this parameter, we need to enable credSSP on the computers participating in multi-hop authentication. Also, when enabling CredSSP, we need to specify the role — client or server — of a computer. A client is the computer from which the remoting session is initiated and server is the computer from which the multi-hop authentication is triggered. So, from the above example, we need to enable CredSSP authentication on computer A and computer B.&lt;/p&gt;
&lt;p&gt;PowerShell 2.0 has &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Disable-WSManCredSSP&lt;/a&gt; and &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819468.aspx&#34;&gt;Get-WSMANCredSSP&lt;/a&gt; cmdlets to manage CredSSP authentication&lt;/p&gt;
&lt;p&gt;Let us now look at how we enable WSManCredSSP and specify client / server roles. First, let us enable CredSSP on computer A.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You need to run these cmdlets in an elevated prompt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enable-WSManCredSSP -Role Client -DelegateComputer &amp;#34;*.SP2010lab.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As shown here, you can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt; cmdlet to enable CredSSP authentication and specify the computer role as client. When the computer role is defined as a client, you can also specify the DelegateComputer parameter to specify the server or servers that receive the delegated credentials from the client. The delegateComputer accepts wildcards as shown above. You can also specify “*” to specify all computers in the network.&lt;/p&gt;
&lt;p&gt;When &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt; cmdlet is used to enable CredSSP on the client by specifying client in the role parameter. The cmdlet then performs the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The WS-Management setting &amp;lt;localhost|computername&amp;gt;\Client\Auth\CredSSP is set to true.&lt;/li&gt;
&lt;li&gt;Sets the Windows CredSSP policy AllowFreshCredentials to WSMan/Delegate on the client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, we will enable CredSSP on computer B and deginate that as server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enable-WSManCredSSP -Role Server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above cmdlet enables CredSSP on computer B and sets the WS-Management setting &amp;lt;localhost|computername&amp;gt;\Service\Auth\CredSSP is to true. Now, we can use Invoke-Command to run the script block as shown at the beginning of this post. However, we will specify the authentication method as CredSSP and pass the credentials.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName test-pc.SP2010lab.com -Credential SP2010Lab\Administrator -Authentication CredSSP -ScriptBlock {[System.IO.File]::Create(\\FileServer\Share\Test.txt)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting12-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see here,  we see the output from Create() method which shows the details of the newly created file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; CredSSP authentication delegates the user’s credentials from the local computer to a remote computer. This practice increases the security risk of the remote operation. If the remote computer is compromised, when credentials are passed to it, the credentials can be used to control the network session.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Disable-WSManCredSSP&lt;/a&gt; to disable CredSSP authentication on a client or a server computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Disable-WSManCredSSP -Role Client            
Disable-WSManCredSSP -Role Server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819468.aspx&#34;&gt;Get-WSManCredSSP&lt;/a&gt; cmdlet to verify if a computer has CredSSP enabled and also the role (client/server).&lt;/p&gt;
&lt;p&gt;This is it for now. We will look at few more aspects of PowerShell remoting in the next part of this series. Stay tuned..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 11 – Interpreting, formatting and displaying remote output</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-11-interpreting-formatting-and-displaying-remote-output/</link>
      <pubDate>Mon, 15 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-11-interpreting-formatting-and-displaying-remote-output/</guid>
      <description>&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, we look at remoting output. This includes how the output is transferred from remote computer to local, how it is displayed and how we can format this output based on a need. We already discussed various methods to execute commands (&lt;a href=&#34;http://139.59.40.198/blog/?p=1108&#34;&gt;part4&lt;/a&gt;, &lt;a href=&#34;http://139.59.40.198/blog/?p=1140&#34;&gt;part 5&lt;/a&gt; and &lt;a href=&#34;http://139.59.40.198/blog/?p=1151&#34;&gt;part 6&lt;/a&gt;) on a remote computer. In this post, for the sake of our discussion of remoting output, I will use only Invoke-Command method to execute remote commands. However, I will point out the differences as required.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Most of this does not apply within an interactive remoting session&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The concepts of remoting output are explained in a TechNet article at &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347582.aspx&#34;&gt;http://technet.microsoft.com/en-us/library/dd347582.aspx&lt;/a&gt;. I am going to put some story around this to help you understand the concepts well.&lt;/p&gt;
&lt;p&gt;First, let us start with an obvious difference in the output received from a remote session. If you use Invoke-Command to run Get-PSDrive, you see something like this.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;You can see an additional column in the output that shows the remote computer name with PSComputerName as the column name. This won’t be displayed if you run the same cmdlet on local computer. So, if you don’t want to display this information in the remote output you can use the -HideComputerName parameter.&lt;/p&gt;
&lt;p&gt;It is also possible that some cmdlets may not display PSComputerName property. For example, Get-Date. In such a scenario you can add PSComputerName to the output of Get-Date as shown here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE,SP2010-APP -ScriptBlock {Get-Date} | ft DateTime, PSComputerName -Auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;How remote command output is sent over to local computer?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The objects that Windows PowerShell cmdlets return cannot be transmitted over the network. So, the live objects are “serialized”. In other words, the live objects are converted into XML representations of the object and its properties. Then, the XML-based serialized object is transmitted across the network to the local session where it gets deserialized in to .NET object. This is how an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms973893.aspx&#34;&gt;MSDN &lt;/a&gt;article defines serialization in .NET framework.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why would you want to use serialization? The two most important reasons are to persist the state of an object to a storage medium so an exact copy can be recreated at a later stage, and to send the object by value from one application domain to another. For example, serialization is used to save session state in ASP.NET and to copy objects to the clipboard in Windows Forms. It is &lt;strong&gt;also used by remoting&lt;/strong&gt; to pass objects by value from one application domain to another.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;So, what does this mean to us in PowerShell remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As it is defined above, the live objects are converted in to XML based representation. So, once deserialized in the local session, they don’t expose any methods that actually belong to the object. Let us see an example to understand this. First, let us look at Get-Process output in a local session and see what all methods we see.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Here, you can see a list of methods you can use against a process object. Now, let us take a look at how this looks when we execute the same command in a remote session.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-4.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you observe in the above screenshot, TypeName represents a deserialized object and there are no methods that you can use against a process object. A deserialized object represents a snapshot of get-process at the time of command execution in the remote session. This also means that you can’t execute methods such as Kill() against a deserialized process object. Also, no methods to modify the property set will work in the local session.&lt;/p&gt;
&lt;p&gt;Windows PowerShell blog has a nice post on &lt;a href=&#34;http://blogs.msdn.com/powershell/archive/2010/01/07/how-objects-are-sent-to-and-from-remote-sessions.aspx&#34;&gt;how objects are to and from a remote session&lt;/a&gt;. I recommend that you read this post for more information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What about output formatting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most deserialized objects are automatically formatted for display by entries in the Types.ps1xml or Format.ps1xml files. However, the local computer might not have formatting files for all of the deserialized objects that were generated on a remote computer. When objects are not formatted, all of the properties of each object appear in the console in a streaming list. To get formatting data from another computer, use the Get-FormatData and Export-FormatData cmdlets. Again, let us take an example to understand this.&lt;/p&gt;
&lt;p&gt;Take an example of a SharePoint 2010 farm and you want to access /run SharePoint 2010 cmdlets from a Windows 7 machine using Invoke-Command. First, if we run Get-SPSite on SharePoint 2010 web frontend, you will see&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-5.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, if we try to run the same in a remote session using Invoke-Command, you will see&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-6.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above screenshot, the output from a remote session is quite different from the one you saw in a local session. This is because we don’t have the formatting data available on the Windows 7 computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, how do we get the formatting data to local computer?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can use Get-FormatData, Export-FormatData and Update-FormatData cmdlets to get the formatting data from a remote computer to local session. To do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -session $s -ScriptBlock {Add-PSSnapin Microsoft.SharePoint.PowerShell}
Invoke-Command -Session $s -ScriptBlock {Get-FormatData -TypeName *SharePoint*} | Export-FormatData -Path C:\scripts\SharePoint.Format.ps1xml
Update-FormatData -PrependPath C:\scripts\SharePoint.Format.ps1xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code snippet will let you import the formatting data for all SharePoint cmdlets in to the local session. Now, if we run Get-SPSite in the remote session using Invoke-Command, you will see&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-7.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, with the formatting information in the local session, you can see that Get-SPSite output is formatted similar to the one we saw when we ran the cmdlet in a local session. However, make a note that this applies only to the current session. If you close and re-open the PowerShell console, the formatting data will be lost. You can add the Update-FormatData cmdlet to your PowerShell profile to make the format data across all PowerShell sessions.&lt;/p&gt;
&lt;p&gt;This is it. We are just a few more posts away from completing this PowerShell remoting series. Do let me know your feedback and let me know if you want to see something more around remoting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 10 – Restricting available commands using custom session configuration</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-10-restricting-available-commands-using-custom-session-configuration/</link>
      <pubDate>Thu, 11 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-10-restricting-available-commands-using-custom-session-configuration/</guid>
      <description>&lt;p&gt;“With great power comes great responsibility”, said uncle Ben. But some people don’t just understand that. That is when you have to rip-off their powers. Similarly, the default PS Session configuration allows full access to PowerShell language, cmdlets, scripts and everything available to PowerShell. Of course, you need to authenticate as a local administrator or should have execute permission to invoke the session. Running a few cmdlets such as Stop-Service or Restart-Computer can be quite dangerous on a production server. This is where a custom session configuration can help provide role based access to remote host using PowerShell remoting.&lt;/p&gt;
&lt;p&gt;We touched upon creating custom session configuration in &lt;a href=&#34;http://139.59.40.198/blog/?p=1200&#34;&gt;part 9&lt;/a&gt; of this PowerShell &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;. In this part, I will discuss how we can extend the concept of custom session configuration to restrict available commands and PowerShell language in a remote session. I will go striaght in to the startup script used to implement this since we already looked at how to create custom session configuration and assign permissions to a specific user.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$RequiredCommands = @(&amp;#34;Get-Command&amp;#34;,
                             &amp;#34;Get-FormatData&amp;#34;,
                             &amp;#34;Out-Default&amp;#34;,
                             &amp;#34;Select-Object&amp;#34;,
                             &amp;#34;out-file&amp;#34;,
                             &amp;#34;Measure-Object&amp;#34;,
                             &amp;#34;Exit-PSSession&amp;#34;
                             )            

 $ExecutionContext.SessionState.Applications.Clear()
$ExecutionContext.SessionState.Scripts.Clear()            

Get-Command -CommandType Cmdlet, alias, function | ?{$RequiredCommands -notcontains $_.Name} | %{$_.Visibility=&amp;#34;Private&amp;#34;}
$ExecutionContext.SessionState.LanguageMode=&amp;#34;RestrictedLanguage&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, We have only a few required commands. We don’t want the remote user to execute commands other than this set. BTW, this set is the absolute minimum required even to start remoting session. So, consider this as a standard required commands list. Towards the end, we set the language mode to restricted to make sure the remote user cannot execute infinite loops, etc that could potentially bring the system down. This script, when used as the startup script for a session, will result in something as shown here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting10-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see above, get-Command lists only the commands we have in the Required Commands list. However, if you have a large list of required commands, the method you have seen in the above code is not scalable. Instead, you can use a denied list of commands that is relatively small. For example, if you don’t want your users to execute Stop-Process or Restart-Computer, your code will look like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$DeniedCommands = @(&amp;#34;Stop-Process&amp;#34;,
                             &amp;#34;Restart-Computer&amp;#34;
                             )            

$ExecutionContext.SessionState.Applications.Clear()
$ExecutionContext.SessionState.Scripts.Clear()            

Get-Command -CommandType Cmdlet, alias, function | ?{$DeniedCommands -contains $_.Name} | %{$_.Visibility=&amp;#34;Private&amp;#34;}
$ExecutionContext.SessionState.LanguageMode=&amp;#34;RestrictedLanguage&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, if you use this code for your startup script, you will see something like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting10-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I prefer the second method.&lt;/p&gt;
&lt;p&gt;If you need to extend or modify the behavior of commands in a remote session, you need to create command proxies. You can read more about it @ &lt;a href=&#34;http://blogs.msdn.com/powershell/archive/2009/01/04/extending-and-or-modifing-commands-with-proxies.aspx&#34;&gt;http://blogs.msdn.com/powershell/archive/2009/01/04/extending-and-or-modifing-commands-with-proxies.aspx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I have shown here is just one way of achieving control in the remote sessions. However, based on your organization needs there could be a better way of doing this. These methods include user role based restrictions, etc as discussed at a &lt;a href=&#34;http://blogs.msdn.com/powershell/archive/2010/02/08/pdc09-svr12-and-svr13-slides.aspx&#34;&gt;PDC’09 session&lt;/a&gt;. Do refer to that for more information.&lt;/p&gt;
&lt;p&gt;This is it for now. We will look at the remote session configuration options in the next post. Stay tuned..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 9 – Session configurations and creating custom configurations</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-9-session-configurations-and-creating-custom-configurations/</link>
      <pubDate>Tue, 09 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-9-session-configurations-and-creating-custom-configurations/</guid>
      <description>&lt;p&gt;In part2 of this series on &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;PowerShell remoting &lt;/a&gt;we quickly looked at various cmdlets that form part of overall remoting infrastructure. The list there included cmdlets related to PS Session configuration. Now that we have gone through the basics of remoting, it is time for us to dig in to these additional cmdlets and explore what they really do.&lt;/p&gt;
&lt;p&gt;So, in this part, we will look at all the PS session configurtion cmdlets, discuss how to create custom PS Session configurations and the need for it. Let us dive in to this now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is PS session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A session configuration can be used to define who can create a Windows PowerShell sesion on the local computer, what level of access — to cmdlets, scripts and PowerShell language — they have on the local computer, etc. When you enable PowerShell remoting using Enable-PSRemoting, you will see a final step performing Microsoft.PowerShell and Microsoft.PowerShell32 (on x64 systems) session configuration registrations. These default session configurations are used when the remote users connecting to local system do not specify a configuration name. By default, only members of administrators group have access to these two session configurations. Hence, only members of administrators group will be able to create remoting sessions by default.&lt;/p&gt;
&lt;p&gt;Based on the above description, PowerShell session configurations can be used to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customize the remoting experience for users&lt;/li&gt;
&lt;li&gt;delegate administration by creating session configuration with varying levels of access to system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this part, we will look at basics of session configuration and see how we can create custom session configurations. We will discuss delegated administration at depth in a later post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What cmdlets are available to manage session configurations?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following cmdlets are available to manage session configuration.&lt;/p&gt;
&lt;p&gt;Register-PSSessionConfiguration
Unregister-PSSessionConfiguration
Enable-PSSessionConfiguration
Disable-PSSessionConfiguration
Set-PSSessionConfiguration
Get-PSSessionConfiguration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I create a new session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Register-PSSessionConfiguration cmdlet can be used to create a new session configuration. You can use a C# asembly or a PowerShell script as a startup script for this new session configuration. This startup script can be used to customize the remoting experience. For example, create a script the imports Active Directory module using import-module cmdlet as shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-Module ActiveDirectory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save this script as startupscript.ps1 or any name of your choice on the local computer. Now, use the Register-PSSessionConfiguration cmdlet to create a new session configuration. This can be done by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Register-PSSessionConfiguration -Name &amp;#34;ActiveDirectory&amp;#34; -StartupScript C:\scripts\StartupScript.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will be prompted to confirm this action and at the end to restart WinRM service on the local computer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You must enable script execution on the local computer to be able to use the startup script as a part of session configuration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;How do I see available session configurations?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Get-PSSessionConfiguration cmdlet lists all the available session configurations on the local computer.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting9-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above output, Get-PSSessionConfiguration lists all available session configurations on the local computer and who has permission to access the configuration. No permissions have been assigned yet to the new active directory configuration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I give permissions to a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Set-PSSessionConfiguration to allow access to invoke the new session configuration. To do this,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-PSSessionConfiguration -Name ActiveDirectory -ShowSecurityDescriptorUI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This opens up the dialog to add permissions to invoke this session configuration. As you see in the screenshot here, administrators group has no invoke permission on this session configuration.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting9-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Select Allow -&amp;gt; Invoke permission here and click OK. You will be prompted to restart the WinRM service. Now, an administrator or a member of administrators group will be able to use this session configuration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I invoke a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use New-PSSession, Enter-PSSession and Invoke-Command cmdlets to load a session configuration othen than the default configuration. The ConfigurationName parameter can be used to specify the session configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE -ConfigurationName ActiveDirectory      
Enter-PSSession -ComputerName SP2010-WFE -ConfigurationName ActiveDirectory            
Invoke-Command -ComputerName SP2010-WFE -ConfigurationName ActiveDirectory -ScriptBlock {Get-Process}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note: To be able to use the -StartupScript, script execution policy must be set to signed or unrestricted on the local computer where the session configuration is registered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In an earlier post — &lt;a href=&#34;http://139.59.40.198/blog/?p=1151&#34;&gt;part 6: Implict remoting sessions&lt;/a&gt; — we used Invoke-Command to load the active directory module within a persistent sesion and then use that persistent session to import active directory cmdlets in to local session. However, by using a session configuration that import active directory module as a startup script, we will have all the AD cmdlets available as soon as we connect to the remote session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I disable a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Disable-PSSessionConfiguration cmdlet to disable an existing session configuration and prevents users from connecting to the local computer by using this session configuration. You can use -Name parameter to specify what session configuration you want to disable. If you do not specify a configuration name, the default Microsoft.PowerShell session configuration will be disabled.&lt;/p&gt;
&lt;p&gt;The Disable-PSSessionConfiguration cmdlet adds a “deny all” setting to the security descriptor of one or more registered session configurations. As a result, you can unregister, view, and change the configurations, but you cannot use them in a session. Disable-PSRemoting cmdlet will disable all PS Session configurations available on the local computer.&lt;/p&gt;
&lt;p&gt;Enable-PSSessionConfiguration cmdlet can be used to enable a disabled configuration. You can use -Name parameter to specify what session configuration you need to enable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I delete a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Unregister-PSSessionConfiguration cmdlet to delete a previously defined session configuration. It is quite possible to delete the default session configuration — Microsoft.PowerShell — using this cmdlet. However, this default session configuration gets re-created when you run Enable-PSRemoting cmdlet.&lt;/p&gt;
&lt;p&gt;This brings us to the end of this part on PS session configurations. In the next part, I will talk about delegated administration using session configurations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 8 – remoting scenarios and troubleshooting</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-8-remoting-scenarios-and-troubleshooting/</link>
      <pubDate>Sun, 07 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-8-remoting-scenarios-and-troubleshooting/</guid>
      <description>&lt;p&gt;If you have been following this remoting series and using PS remoting on a test setup or even production, you must have gone through a few initial hiccups. In fact, there could be many such issues if you are working in a mixed environment where you have a few computers in a domain and a few in workgroup. So, in this part of the remoting series I will discuss some of these issues and workarounds to resolve the same. I discussed enabling remoting on workgroup computers in &lt;a href=&#34;http://139.59.40.198/blog/?p=1060&#34;&gt;part3&lt;/a&gt; – “Enable remoting” of this series. This post is kind of an extension to that.&lt;/p&gt;
&lt;p&gt;A more detailed guide is available at &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347642.aspx&#34;&gt;about_remote_troubleshooting&lt;/a&gt; page on TechNet. I will list only the scenarios I have tested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remoting to a computer in workgroup from a computer in domain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Take an example of two computers, Win7-VM in a domain environment and WinXP-VM in a workgroup. Now, if you want to start a remoting session from Win7-VM using Enter-PSSession using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -ComputerName WinXP-VM -Credential WinXP-VM\Administrator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;you will see an error message similar to the one here&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting8-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;We can workaround this by adding the remote computer to local computer’s trusted hosts list — in this case, on Win7-VM. You can use one of the following methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-Item WSMan:\localhost\Client\TrustedHosts -Value *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;set-item wsman:\localhost\Client\TrustedHosts -value WinXP-VM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: WSMan:\LocalHost\Client will be available only if WinRM service is enabled and running.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first command uses a wildcard to add all computers in the network to the list of trusted hosts and the second command adds only WinXP-VM to that list. You can also supply a comma seperated list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remoting to a computer in domain from a computer in workgroup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using the same example as above — if you want to establish a remoting session from WinXP-VM to Win7-VM, you can change the trusted hosts list on WinXP-VM to add the computers in the domain. Again, it can be done in multiple ways.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-Item WSMan:\localhost\Client\TrustedHosts -Value *            
set-item wsman:\localhost\Client\TrustedHosts -value Win7-VM            
set-item wsman:\localhost\Client\TrustedHosts -value *.remotinglab.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first two commands variations must be familiar by now. The 3rd variation adds all computers in &lt;a href=&#34;http://remotinglab.com/&#34;&gt;remotinglab.com&lt;/a&gt; domain to the trusted hosts on WinXP-VM computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remoting to a domain computer as a non-administrator from another domain computer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To start a remoting a session with a remote computer, the user initiating the remoting session must&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be a member of the administrators group on the remote computer &lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Be able to authenticate to the remote computer as an administrator using the Credential parameter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively — on the remote computer, you can give non-administrator users execute permission to default session configuration. This can be done by running the following command at a elevated PowerShell prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-PSSessionConfiguration Microsoft.Powershell -ShowSecurityDescriptorUI            

#In addition to the above, on a x64 computer
Set-PSSessionConfiguration Microsoft.Powershell32 -ShowSecurityDescriptorUI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you use the above cmdlet, you will see a dialog box as shown here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting8-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Here, you need to click add and then select the non-administrator user account. Once added, give the user Execute permission. After you click OK on the main dialog and return to PowerShell, you will be prompted to restart WinRM service. That is it. I recommend this method than the first two. This way a non-administrator user should be able to remote in to a domain computer without providing administrator credentials or adding the user to local administrators group.&lt;/p&gt;
&lt;p&gt;A few things I discussed here today are really meant for an advanced remoting post. However, for the sake of getting started in a mixed environment, I thought this post is must. Feel free to write any questions you may have in an email or tweet to me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 7 – saving remote session to disk</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-7-saving-remote-session-to-disk/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-7-saving-remote-session-to-disk/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://139.59.40.198/blog/?p=1151&#34;&gt;part 6&lt;/a&gt; of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt; we looked at how we can use Import-PSSession cmdlet to execute remote commands as if they were local. This is nice but this will last only while the session ($s in the example) is alive. The moment we kill the session — using Rem0ve-PSSession, remoting session will also get killed. In this part of the series, we will look at how we can save a remoting session to disk so that we don’t even have to explicitly create a session.&lt;/p&gt;
&lt;p&gt;This is achieved using &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347679.aspx&#34;&gt;Export-PSSession&lt;/a&gt; cmdlet. This cmdlet lets us import commands from a remote session and save the same in a PowerShell module on the local disk. This cmdlet can get cmdlets, functions, aliases, and other command types in to a PowerShell module. The following example shows how we can achieve this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {Import-Module ActiveDirectory}
Export-PSSession -Session $s -OutputModule ADRemoteCommands -AllowClobber -Module ActiveDirectory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the first two lines should be quite familiar by now. The third line is where the magic happens. We tell Export-PSSession cmdlet to export all the commands, aliases, functions, etc available in PS Session $s to a module on hard disk and name it ADRemoteCommands.&lt;/p&gt;
&lt;p&gt;If the Export-PSSession is successful, you will see output similar to what is shown here&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting7-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the above output, it is clear that Export-PSSession generates .psm1, .psd1 and format data file for the module automatically. Now, you can load the module at any later point in time to get access to the remote commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we import the saved module?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you observe the output closely, path where the module files are stored is same as $Env:PSModulePath. So, you don’t need to specify the absolute path to the module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-Module ADRemoteCommands
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This imports all remote commands available in the module to local session. Whenever we execute a remote command, implicit remoting kicks in, establishes the remote session, executes the command in remote session and returns the output. All this is done without you really using any remoting related cmdlets. If establishing a remote session requires a password, you will be prompted for one.&lt;/p&gt;
&lt;p&gt;This brings us to the end of Part 7. With this, I covered all the remoting basics and we can now move on to more advanced topics like session options and WSMan configuration required for PS Remoting. Stay tuned for that..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 6 – implicit remoting sessions</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-6-implicit-remoting-sessions/</link>
      <pubDate>Wed, 03 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-6-implicit-remoting-sessions/</guid>
      <description>&lt;p&gt;In an earlier post on interactive remoting sessions, we looked at how we can enter a remote session and then execute commands as if they were local. However, if you’d observed it more closely, we were actually sitting in the remote session than local console. The change in PowerShell prompt indicates this fact clearly.&lt;/p&gt;
&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, we will look at a feature called implicit remoting which makes it possible to run the commands / scripts on the remote computer while in the local session.&lt;/p&gt;
&lt;p&gt;We use interactive remoting to overcome a few disadvantages of using Invoke-Command. This method too has its own drawbacks. Within interactive remoting, you explicitly enter/exit a remote session. This also means that you are connected only to one remote computer and you have access only to the cmdlets or modules available on that remote computer. What if you want to access different cmdlets available on different computers?&lt;/p&gt;
&lt;p&gt;For example, let us say you have two different computers one with Exchange 2010 and other with SharePoint 2010. Now, if you want to access cmdlets available to manage both these technologies from a “single computer” and in the “local session”. Take a note, “single computer” and “local session” is the key to understand the concept of implicit remoting. The important thing to understand is that we need to manage multiple computers / technologies without ever the need to go out of local PowerShell session.&lt;/p&gt;
&lt;p&gt;Using Invoke-Command is certainly not the choice because it involves setting up a session to the remote computer and then sending a script block to execute in that session. This is quite tedious. Although interactive remoting can eliminate the drawbacks of Invoke-Command, it is specific one remote session. So, if you are connected to the Exchange 2010 remote session, your SharePoint 2010 session is not available. This is where implicit remoting becomes important.&lt;/p&gt;
&lt;p&gt;Implicit remoting can be used to bring remote commands to a local session. In implicit remoting, once you import remote commands in to a local session, you don’t have to worry about the PS session details. You can import any number of remote sessions in to the local session making it possible to access cmdlets from different product technologies in the same local session. PowerShell will take care of that for you in the background.&lt;/p&gt;
&lt;p&gt;Now, we can connect do a different remote session and import cmdlets from that session also.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {Add-PSSnapin Microsoft.SharePoint.PowerShell}
Import-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, within the local session, we have access to AD cmdlets from one computer and SharePoint 2010 cmdlets from another machine. This makes it easy to manage both from the same computer and local session without worrying much about creating / destroying sessions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nice. So, how do we use implicit remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, we have to first create a persistent PS session using New-PSSession and then use that to import remote commands in to local session. You can do it as shown here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Import-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, Import-PSSession imports all commands except for commands that have the same names as commands in the current session. To import all the commands, use the AllowClobber parameter.&lt;/p&gt;
&lt;p&gt;If you import a command with the same name as a command in the current session, the imported command hides or replaces the original commands. Essentially, imported commands take precedence over the local commands with same name. Irrespective of whether those commands were loaded after importing a session or before. However, aliases are an exception. Original aliases in the local session take precedence over imported aliases.&lt;/p&gt;
&lt;p&gt;To know more about the command precedence, read&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347579.aspx&#34;&gt; about_Command_Precedence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we differentiate between local &amp;amp; remote commands or avoid name conflicts while importing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Import-PSSession provide -Prefix parameter which adds the specified prefix to the nouns in the names of imported commands. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-PSSession -Session $s -Prefix RS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will prefix RS to all the cmdlets imported from a remote computer. So, if Get-Command was imported using this method, the local session will have Get-RSCommand and when you use this cmdlet, PowerShell implicitly runs this command inside the remote session.&lt;/p&gt;
&lt;p&gt;As we discussed earlier in this post, PowerShell manages implicit remoting in the background. So, the behavior of Invoke-Command — creates/destroys a PS session every time we execute a remote command — exists with implicit remoting too. Hence, you will see that executing remote commands over this method a bit slow. To work around this, import-PSSession adds a -asJob parameter to all the commands imported in to the local session.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Import-PSSession -Session $s -Prefix RS            

Get-RSProcess -asJob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will run Get-Process on the remote computer as a background job. The original Get-Process has no -asJob parameter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we import modules or snap-ins in to local session?&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {Import-Module ActiveDirectory}
Import-PSSession -Session $s -Module ActiveDirectory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, we first create a PS session, import active directory module using Invoke-Command and then import the session in to the local session. This makes all the active directory cmdlets available in the local session.&lt;/p&gt;
&lt;p&gt;This is the end of part 6 of the remoting series. In the next post, I will talk about how we can save the imported session to hard disk.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 5 – interactive remoting sessions</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-5-interactive-remoting-sessions/</link>
      <pubDate>Tue, 02 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-5-interactive-remoting-sessions/</guid>
      <description>&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, I will talk about using Enter-PSSession and Exit-PSSession cmdlets to perform interactive remoting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why do you need interactive remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To understand the advantages of interactive remoting in PowerShell 2.0, let us first look at some gotchas with Invoke-Command. Take an example of a remote system where SharePoint 2010 is installed. SharePoint 2010 provides native PowerShell cmdlets and these cmdlets can be accesses only if you load Microsoft.SharePoint.PowerShell PS snap-in. So, to do this using Invoke-Command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE            

#load the PS Snap-in to enable SharePoint PS cmdlets
Invoke-Command -Session $s -ScriptBlock {Add-PSSnapin Microsoft.SharePoint.PowerShell}

#$s has the PowerShell cmdlets now
Invoke-Command -Session $s -ScriptBlock {Get-SPWeb http://sp2010-wfe:999}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look at the above code, we will have to use a persistent session so that we can use SharePoint cmdlets in subsequent Invoke-Command calls.&lt;/p&gt;
&lt;p&gt;Another caveat will be the unavailability of remote computer cmdlets in the local PowerShell session — in this case, the SharePoint 2010 cmdlets. This — essentially – means that we cannot use Get-Help or Get-Command cmdlets against the SharePoint 2010 cmdlets in the local session unless we pass that as a script block to Invoke-Command.&lt;/p&gt;
&lt;p&gt;One more disadvantage of using Invoke-Command is unavailability of command completion. Unless the cmdlet you are using inside the scriptblock is available locally, you cannot use tab completion. This can be a pain for many, including me.&lt;/p&gt;
&lt;p&gt;This where interactive remoting comes in to play.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do you start interactive remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enter-PSSession enables interactive sessions with remote computer. You can use this cmdlet the same way you’d use Invoke-Command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -ComputerName SP2010-WFE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting5-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As shown in the above screenshot, PowerShell prompt changes to reflect that you are in the remote session. Now, taking the above example of SharePoint 2010 cmdlets, you can load the PS Snap-in as if you were loading it locally without using Invoke-Command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Add-PSSnapin Microsoft.SharePoint.PowerShell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the snap-in loaded, you will have access to all the SharePoint 2010 cmdlets as if they are available on the local computer. You can verify that by using Get-Help against one of the SharePoint 2010 cmdlets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-Help Get-SPWeb -Full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enter-PSSession when used with -ComputerName parameter, creates a PSSession in the background and uses that throughout the life of a remote session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I exit a interactive session?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Exit-PSSession to come out of an interactive PS Session. This will close any temporary session created in the background. So, it means that any variables or data you created during the interactive session won’t be available once you exit the session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How about using persistent sessions in interative remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oh yes, that is a great idea. In fact, it will be advantageous to use persistent sessions. By using a persistent session, you can enter and exit the interactive session as many times as you like. All the data and variables you created in the remote session will persist until you remove the session. You can do it the same way you used persistent sessions with Invoke-Command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Enter-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Can I enter an existing PSSession?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes. You can use Get-PSSession cmdlet to see a list of all available/opened PS Sessions and then use Enter-PSSession as shown above to start interactive remoting. As you see here, I will pipe Get-PSSession output to Format-List cmdlet to get all session details.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting5-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;There are four ways to enter an existing PS Session for interactive remoting. I have highlighted the available options in the above screenshot. You can use which ever way is convenient.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -id 1
Enter-PSSession -InstanceId 55a417ed-f903-4265-a4dc-c892c2500e0d
Enter-PSSession -Name Session1            

$s = Get-PSSession -Id 1
Enter-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of the above options start interactive session using the persistent session “session1”. It is just more than one way to do the same thing.&lt;/p&gt;
&lt;p&gt;Alright. This brings us to the end of this part on Interactive remoting sessions. In this next part, I will talk about something called implicit remoting. Stay tuned..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 4 – Execute commands or scripts on a remote computer using Invoke-Command</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-4-execute-commands-or-scripts-on-a-remote-computer-using-invoke-command/</link>
      <pubDate>Mon, 01 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-4-execute-commands-or-scripts-on-a-remote-computer-using-invoke-command/</guid>
      <description>&lt;p&gt;In this part of PowerShell &lt;!-- raw HTML omitted --&gt;remoting series&lt;!-- raw HTML omitted --&gt;, I will discuss how to run commands or scripts on remote computer(s). Within remoting, there are couple of ways to run commands or scripts on a remote machine. This includes Invoke-Command cmdlet and interactive remoting sessions. These two methods deserve a separate post for each and hence I will discuss the Invoke-Command method in today&amp;rsquo;s post.&lt;/p&gt;
&lt;p&gt;Once you have &lt;!-- raw HTML omitted --&gt;enabled remoting&lt;!-- raw HTML omitted --&gt; on all your computers, you can use&lt;!-- raw HTML omitted --&gt; Invoke-Command&lt;!-- raw HTML omitted --&gt; cmdlet to run commands and scripts on local computer or on remote computer(s). There are many possible variations of this cmdlet. I will cover most of them here.&lt;/p&gt;
&lt;h4 id=&#34;invoke-command-to-run-commands-on-local-or-remote-computer&#34;&gt;Invoke-Command to run commands on local or remote computer&lt;/h4&gt;
&lt;p&gt;You can invoke a command on local or remote computer(s) using the below method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE -ScriptBlock { Get-Process }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The ScriptBlock parameter can be used to specify a list of commands you want to run on the remote computer.  ComputerName parameter is not required for running commands on the local machine. If you want to run the same command on multiple remote computers, you can supply the computer names as a comma separated list to ComputerName parameter or use a text file as shown in the example here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE,SP2010-DB -ScriptBlock{ Get-Process }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;All command names and variables in the ScriptBlock are evaluated on the remote computer. So, if you do something like -ScriptBlock {Get-Process -Name $procName}, PowerShell expects the remote computer session to have $procName defined. You can however pass variables on the local computer to a remote session when using Invoke-Command. This brings us to the next point in our discussion.&lt;/p&gt;
&lt;h4 id=&#34;passing-local-variables-as-arguments-to-remote-computer&#34;&gt;Passing local variables as arguments to remote computer&lt;/h4&gt;
&lt;p&gt;Taking the above example, we can pass the Name of the process you are looking for as a variable to the script block. ArgumentList parameter helps you achieve this. You can do this as shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$procName = &amp;#34;powerShell&amp;#34;
Invoke-Command -ComputerName (get-content c:\scripts\servers.txt) -ScriptBlock {param ($Name) Get-Process -Name $Name} -ArgumentList $procName
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example may be a simple one but it shows how to use -ArgumentList parameter to pass local variables to the remote session.&lt;/p&gt;
&lt;h4 id=&#34;invoke-command-to-execute-scripts-on-remote-computers&#34;&gt;Invoke-Command to execute scripts on remote computer(s)&lt;/h4&gt;
&lt;p&gt;Using ScriptBlock parameter can be quite tedious when you have to execute a bunch of PowerShell commands. This can be confusing when you have loops and conditional statements inside the scriptblock. Invoke-Command provides FilePath parameter to address this. You can use this parameter as shown below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE -FilePath C:\scripts\Test.PS1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make a note that the script you provide as FilePath must exist on the local machine or at a place accessible to the local machine.&lt;/p&gt;
&lt;h4 id=&#34;using--session-parameter-for-better-performance-and-sharing-data-between-commands&#34;&gt;Using -Session parameter for better performance and sharing data between commands&lt;/h4&gt;
&lt;p&gt;Whenever you run Invoke-Command with -ComputerName parameter, a temporary session gets established to execute the remote command. So, establishing a session every time you use this cmdlet can be time consuming. So, to avoid that we can use a persistent connection to the remote computer and that is what -Session uses. You can create a persistent connection to a remote computer by using New-PSSession cmdlet as shown here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, $s contains the session details for the persistent connection. We can use $s to invoke a command on the remote computer and the syntax for that will be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Commad -Session $s -ScriptBlock {get-Process}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$s contains all the variables you create / modify when you execute commands on the remote computer. So, subsequent command execution with $s as the session will have access to all of the variables created / updated on the remote computer. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = new-pssession -computername SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {$fileCount = (Get-ChildItem C:\ -Recurse).Count}
invoke-command -session $s -scriptblock {$fileCount}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could access $fileCount variable only because we used a persistent session to run the command. This would not have been possible if used -ComputerName to invoke the remote command.&lt;/p&gt;
&lt;h4 id=&#34;running-remote-command-as-a-background-job&#34;&gt;Running remote command as a background job&lt;/h4&gt;
&lt;p&gt;The example shown above — which gets the total file count on C:\ of a remote machine — can be quite time consuming based on how big is C:\ on the remote computer. In such case, you will have to wait for the remote command to complete execution. To avoid this, you can use -AsJob parameter to run the command as a background job on the remote computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE -ScriptBlock {(Get-ChildItem C:\ -Recurse).Count} -asJob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you run this, you will see the job details listed as shown here:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting4-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, you can use Get-Job and receive job cmdlets to see the output from the background job as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-Job -id 1 | Receive-Job
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A complete discussion on Background jobs deserves a series of posts. I will plan to do that next. If you don’t want to wait and learn about it right away, you can read about it @ &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315273.aspx&#34;&gt;http://technet.microsoft.com/en-us/library/dd315273.aspx&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;specifying-credentials-required-for-remoting&#34;&gt;Specifying credentials required for remoting&lt;/h4&gt;
&lt;p&gt;As we have seen the &lt;!-- raw HTML omitted --&gt;enable remoting post&lt;!-- raw HTML omitted --&gt;, you can use PowerShell remoting between computers in a workgroup environment too. All of the examples I showed above assume that you have access to remote computer as an administrator. This method works quite well in a domain environment where the logged on user has administrator credentials to access any computer in the domain. However, this will not work in a workgroup setup. Within a workgroup you need to pass the credentials along with Invoke-Command. To do that,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$cred = Get-Credential
Invoke-Command -ComputerName SP2010-WFE -ScriptBlock { Get-Process} -Credential $cred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, Get-Credential prompts for the credentials to access remote computer and uses the same while calling Invoke-Command cmdlet.&lt;/p&gt;
&lt;p&gt;This is the end of this article on Invoke-Command. Invoke-Command has many other parameters which are not discussed here. They are more advanced and used in specific scenarios. I will discuss those use cases as we proceed further in this series of posts on PowerShell 2.0 remoting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 3 – Enable remoting</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-3-enable-remoting/</link>
      <pubDate>Sun, 31 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-3-enable-remoting/</guid>
      <description>&lt;p&gt;In this part of the &lt;!-- raw HTML omitted --&gt;series of articles&lt;!-- raw HTML omitted --&gt; on PowerShell 2.0 &lt;!-- raw HTML omitted --&gt;remoting&lt;!-- raw HTML omitted --&gt;, we will look at how to enable remoting in different scenarios. This post assumes that you are running a supported operating system and you have installed all necesary &lt;!-- raw HTML omitted --&gt;pre-requisite&lt;!-- raw HTML omitted --&gt; software.&lt;/p&gt;
&lt;p&gt;So, how do you enable remoting?&lt;/p&gt;
&lt;p&gt;Remoting in PowerShell 2.0 can be enabled by just running the following cmdlet&lt;/p&gt;
&lt;h4 id=&#34;enable-psremoting&#34;&gt;Enable-PSRemoting&lt;/h4&gt;
&lt;p&gt;Note: You have to run this at a elevated PowerShell prompt. Also, all your active networks should be set to “Home” or “Work” network location. Setting firewall exceptions for remoting will fail if the network location is set to “Public”.&lt;/p&gt;
&lt;p&gt;Yes. That is it. You will be asked to respond to a couple of questions — based on OS architecture — as you see in the screenshot here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting3-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see above, Enable-PSRemoting internally uses Set-WSManQuickConfig and a few &lt;!-- raw HTML omitted --&gt;other cmdlets&lt;!-- raw HTML omitted --&gt;. The second prompt around Microsoft.PowerShell32 will appear only on x64 OS. However, you should always use the more comprehensive Enable-PSRemoting cmdlet. If you don’t want to see all these prompts and but want to enable remoting in a more slient manner, you can use the -force parameter along with the cmdlet. Other parameters to Enable-PSRemoting cmdlet include -confirm and -whatif. You can run this cmdlet on all machines where you want to be able to receive commands from other machines in the network.&lt;/p&gt;
&lt;p&gt;How can you verify if remoting is enabled or not? You can use the Enter-PSSession cmdlet to test if remoting is enabled on the local machine or not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -ComputerName localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If remoting is enabled and functional, you will see the prompt changing to something like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting3-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;h4 id=&#34;powershell-remoting-in-a-workgroup-environment&#34;&gt;PowerShell remoting in a workgroup environment&lt;/h4&gt;
&lt;p&gt;You will not be able to connect to a computer in workgroup just by running Enable-PSRemoting cmdlet. This is essentially because the security levels on a workgroup joined computer are more stringent than on a domain joined computer.&lt;/p&gt;
&lt;p&gt;On Windows XP systems, you need to make sure the local security policy to enable classic mode authentication for network logons. This cabe be done by opening “Local Security Policy” from Control Panel -&amp;gt; Administrative Tools. Over there, navigate to Local Policies -&amp;gt; Security Options and double click on “Network Access: Sharing and Security Model for local accounts” and set it to classic.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting3-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Once the above change is made, you can enable remoting using Enable-PSremoting and then run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;set-item&lt;/span&gt; wsman&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt;localhost\client\trustedhosts -value *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On Vista and later operating systems in workgroup model, you need to run the above cmdlet only. After these steps are performed, you should be able to send commands to a remote computer in a workgroup enviroment.&lt;/p&gt;
&lt;p&gt;To enable remoting for multiple computers in an enterprise or domain environment, you can use group policy. For more information on this, refer to the “HOW TO ENABLE REMOTING IN AN ENTERPRISE” section at &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347642.aspx&#34;&gt;http://technet.microsoft.com/en-us/library/dd347642.aspx&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;In the next set of posts, we will see how to execute commands on remote machines using various cmdlets available within PowerShell remoting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 2 – Overview of remoting cmdlets</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-2-overview-of-remoting-cmdlets/</link>
      <pubDate>Wed, 27 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-2-overview-of-remoting-cmdlets/</guid>
      <description>&lt;p&gt;In part 1 of this series I gave a quick introduction to PowerShell 2.0 remoting. Before we look at how to enable or configure a computer for remoting, let us take a quick look at PowerShell 2.0 remoting cmdlets. Here is a complete list of cmdlets with a brief overview.&lt;/p&gt;
&lt;p&gt;This list will also include cmdlets that are not directly used within remoting but help configure various aspects of remoting. The knowledge of these cmdlets such as WSMan, etc in this list is not mandatory for basic usage of PowerShell remoting. In this post, I will only discuss what each of these cmdlets are capable of and list any gotchas. A detailed usage of these cmdlets will be discussed later in the series.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable-PSRemoting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819498.aspx&#34;&gt;Enable-PSRemoting&lt;/a&gt; cmdlet configures the computer to receive Windows PowerShell remote commands that are sent by using the WS-Management technology. This cmdlet will be the first one to run if you want to use PowerShell 2.0 remoting features and needs to be run just once. This cmdlet internally calls &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819520.aspx&#34;&gt;Set-WSManQuickConfig&lt;/a&gt; to configure WinRM service, enable firewall exceptions for WS Management and finally enables all registered PowerShell configurations.&lt;/p&gt;
&lt;p&gt;BTW, you need to enable PowerShell remoting only if you want the computer receive commands from a remote machine. To only send commands to a remote machine, you don’t need to enable PowerShell remoting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable-PSRemoting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819522.aspx&#34;&gt;Disable-PSRemoting &lt;/a&gt;cmdlet disables all PowerShell session configurations on the local computer to prevent the computer from receiving any remote commands. You will have to manually stop the WinRM service if you don’t want the service to be running after you disable PowerShell remoting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Invoke-Command&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347578.aspx&#34;&gt;Invoke-Command &lt;/a&gt;cmdlet runs commands on a local or remote computer and returns all output from the commands, including errors. With a single Invoke-Command command, you can run commands on multiple computers. This cmdlet — in it’s default form — opens a session for running a command against a remote computer and closes it once the execution is complete. This method — to some extent — is slow and can be worked around by specifying pre-defined session information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New-PSSession&lt;/strong&gt;
Invoke-Command cmdlet supports specifying an existing session to enhance the speed of overall command execution. By specifying an existing session, we eliminate the need for creating/destroying the sessions on the fly. &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347668.aspx&#34;&gt;New-PSSession&lt;/a&gt; cmdlet can be used to create a persistent connection to a remote computer. By creating a persistent session, we will be able to share data, such as a function or the value of a variable between different commands executing within the PSSession.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter-PSSession&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In part 1, I briefly touched upon interactive remote sessions feature. The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315384.aspx&#34;&gt;Enter-PSSession&lt;/a&gt; cmdlet starts an interactive session with a single remote computer. During the session, the commands that you type run on the remote computer, just as though you were typing directly on the remote computer. You can have only one interactive session at a time. You can specify the PSSession you created using New-PSSession as a parameter to this cmdlet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exit-PSSesstion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315322.aspx&#34;&gt;Exit-PSSession&lt;/a&gt; exits an interactive PS Session created using Enter-PSSession cmdlet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get-PSSession&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347584.aspx&#34;&gt;Get-PSSession&lt;/a&gt; cmdlet gets the Windows PowerShell sessions (PSSessions) that were created in the current session. This cmdlet gets all the PSSessions returns all the PSSessions in to a variable when no parameters are specified. You can then use the session information with other cmdlets such as Invoke-Command, Enter-PSSession, Remove-PSSession, etc&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remove-PSSession&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315404.aspx&#34;&gt;Remove-PSSession &lt;/a&gt;cmdlet closes PS session(s). It stops any commands that are running in the PSSessions, ends the PSSession, and releases the resources that the PSSession was using. If the PSSession is connected to a remote computer, Remove-PSSession also closes the connection between the local and remote computers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Import-PSSession&lt;/strong&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347575.aspx&#34;&gt;
Import-PSSession&lt;/a&gt; cmdlet uses the implicit remoting feature of PowerShell 2.0. Implicit remoting enables you to import commands from a local/remote computer in to an existing PS session and run those commands as if they were local to the session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Export-PSSession&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315322.aspx&#34;&gt;Export-PSSession&lt;/a&gt; cmdlet gets cmdlets, functions, aliases, and other command types from another PSSession on a local or remote computer and saves them to local disk as a Windows PowerShell module. We can now use the &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819454.aspx&#34;&gt;Import-Module&lt;/a&gt; cmdlet to add the commands from the saved module to a PS Session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Register-PSSessionConfiguration&lt;/strong&gt;
Any PS session created using Invoke-Command or New-PSSession or any other PowerShell remoting cmdlet for that matter uses the default PS Session configuration as specified in the $PSSessionConfigurationName variable. PS Session configuration determines which commands are available in the session, and it can include settings that protect the computer, such as those that limit the amount of data that the session can receive remotely in a single object or command. So, you can use the &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819496.aspx&#34;&gt;Register-PSSessionConfiguration&lt;/a&gt; cmdlet creates and registers a new session configuration on the local computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unregister-PSSessionConfiguration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819455.aspx&#34;&gt;Unregister-PSSessionConfiguration&lt;/a&gt; cmdlet deletes registered session configurations from the computer. It is possible to delete the default PSSession configurations (Microsoft.PowerShell or Microsoft.PowerShell32) using this cmdlet. In such a case, you can use Enable-PSRemoting cmdlet to re-create and register the default PS Session configurations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable-PSSessionConfiguration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819437.aspx&#34;&gt;Disable-PSSessionConfiguration&lt;/a&gt; disables a registered PS Session configuration. Remember, this only disables the configuration but not un-register or delete the information from local computer. These disabled session configurations cannot be used to establish a remoting session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable-PSSessionConfiguration&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819495.aspx&#34;&gt;Enable-PSSessionConfiguration&lt;/a&gt; cmdlet re-enables registered session configurations that have been disabled by using the &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819437.aspx&#34;&gt;Disable-PSSessionConfiguration&lt;/a&gt; cmdlet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get-PSSessionConfiguration&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819447.aspx&#34;&gt;Get-PSSessionConfiguration&lt;/a&gt; cmdlet gets the session configurations that have been registered on the local computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Set-PSSessionConfiguration&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819440.aspx&#34;&gt;Set-PSSessionConfiguration&lt;/a&gt; cmdlet changes the properties of the registered session configurations on the local computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test-WSMan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PowerShell remoting requires WinRM service to be running on the remote machines. You can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819488.aspx&#34;&gt;Test-WSMan&lt;/a&gt; cmdlet to quickly check if you can establish a remoting session with other computers. If WinRM is not enabled on remote machine, you can safely assume that PowerShell remoting is not enabled. However, you can assume that PowerShell remoting is enabled just by verifying that WinRM service is running. Remember, this checks only for WinRM service and remoting requires many other components to function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable-WSManCredSSP&lt;/strong&gt;
PowerShell remoting supports CredSSP authentication and the same can be enabled by using &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819517.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt; cmdlet. The Enable-WSManCredSPP cmdlet enables CredSSP authentication on a client or on a server computer. When CredSSP authentication is used, the user’s credentials are passed to a remote computer to be authenticated. This type of authentication is designed for commands that create a remote session from within another remote session. For example, you use this type of authentication if you want to run a background job on a remote computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable-WSManCredSSP&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Disable-WSManCredSPP&lt;/a&gt; cmdlet disables CredSSP authentication on a client or on a server computer.&lt;/p&gt;
&lt;p&gt;There are other WSMan cmdlets introduced in PowerShell 2.0 such as &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819453.aspx&#34;&gt;Connect-WSMan&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819486.aspx&#34;&gt;Disconnect-WSMan&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819521.aspx&#34;&gt;Get-WSManInstance&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819516.aspx&#34;&gt;New-WSManInstance&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819512.aspx&#34;&gt;New-WSManSessionOption&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819463.aspx&#34;&gt;Remove-WSManInstance&lt;/a&gt; and &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819503.aspx&#34;&gt;Set-WSManInstance&lt;/a&gt;. These cmdlets are not really meant for PowerShell remoting but we will discuss them as required.&lt;/p&gt;
&lt;p&gt;This brings us to the end of part 2 and in the next set of posts we will look at how to enable/configure computer(s) for remoting and do some cool things. Do leave your feedback on this article. Let me know if I missed something or need to correct something.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 1 – The basics</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-1-the-basics/</link>
      <pubDate>Fri, 22 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-1-the-basics/</guid>
      <description>&lt;p&gt;I am starting a series of articles on remoting feature of PowerShell 2.0. This is one of the best features of PowerShell 2.0 and my favorite feature for sure. The number of very cool things one can achieve using this feature is just un-imaginable. I have started digging deep in to this feature as I start writing a network file browser powerpack as a part of hands-on. I hope it is worth sharing what I learn by writing about it here. So, this is the first in that series of posts. In this post, we will look at absolute basics to start using PowerShell remoting.&lt;/p&gt;
&lt;h3 id=&#34;what-is-powershell-remoting&#34;&gt;What is PowerShell remoting?&lt;/h3&gt;
&lt;p&gt;This is a new feature in PowerShell 2.0 that enables remote management of computers from a central location. Remoting uses WS-Management to invoke scripts and cmdlets on remote machine(s). This feature also enables what is known as “&lt;!-- raw HTML omitted --&gt;Universal Code Execution Model&lt;!-- raw HTML omitted --&gt;” in Windows PowerShell v2. UCEM means that whatever runs locally should run anywhere. PowerShell remoting lets you import remote commands in to a local session — a feature known as&lt;!-- raw HTML omitted --&gt; implicit remoting &lt;!-- raw HTML omitted --&gt;and also enables you to save or &lt;!-- raw HTML omitted --&gt;export&lt;!-- raw HTML omitted --&gt; these imported commands to local disk as a module for later use. There are bunch of other features such as&lt;!-- raw HTML omitted --&gt; interactive &lt;!-- raw HTML omitted --&gt;sessions, etc. We will look in to all these features but one thing at a time.&lt;/p&gt;
&lt;p&gt;PowerShell remoting allows for multiple ways of connecting. These ways include interactive (1:1), fan-out (1:many), and fan-in (many:1 by using the IIS hosting model, Ex: &lt;!-- raw HTML omitted --&gt;MobileShell&lt;!-- raw HTML omitted --&gt; ). We will look at each of these methods in this series of articles on remoting.&lt;/p&gt;
&lt;h4 id=&#34;remoting-requirements&#34;&gt;Remoting requirements&lt;/h4&gt;
&lt;p&gt;To enable PowerShell remoting, all computers participating in remote management should have the following software.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;PowerShell 2.0 and WinRM 2.0 are included as a part of &lt;!-- raw HTML omitted --&gt;Windows Management Framework &lt;!-- raw HTML omitted --&gt;download and hence is available for Windows XP, Windows Server 2003, Windows Vista and Windows Server 2008. WinRM 2.0 and PowerShell 2.0 can be installed on the following supported operating systems:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;To be able run scripts and commands on remote computers, the user performing remote script execution must be a member of the administrators group on the remote machine or should be able to provide administrator credentials at the time of remote execution. Also, on client versions of Windows such as Windows Vista and Windows 7, network location must be set either to Home or Work. WS-Management may not function properly if the network location is set to Public.&lt;/p&gt;
&lt;p&gt;Here is the setup I have to experiment with PowerShell remoting. I will use these virtual machines and the Windows Server 2008 R2 OS to write my file browser PowerPack using PowerShell remoting. This will help me get a good coverage of all supported operating system families.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Jonathan Medd&lt;!-- raw HTML omitted --&gt; is currently writing a PowerShell cmdlet series in which he is talking about remoting cmdlets also. What I am going to write here is not a repeat of that. In the &lt;!-- raw HTML omitted --&gt;next pos&lt;!-- raw HTML omitted --&gt;t, we will look &lt;!-- raw HTML omitted --&gt;at how to configure the available systems to enable&lt;!-- raw HTML omitted --&gt; at an overview of PowerShell remoting  cmdlets. I will also talk about various methods to enable PowerShell remoting. So, stay tuned..!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
