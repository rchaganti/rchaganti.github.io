<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/categories/hugo/</link>
    <description>Recent content in Hugo on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding visitor counter to statically generated web pages</title>
      <link>https://ravichaganti.com/blog/adding-visitor-counter-to-statically-generated-web-pages/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/adding-visitor-counter-to-statically-generated-web-pages/</guid>
      <description>&lt;p&gt;One of the to-do list items I had for this static blog site was to figure out a way to add page views counter to every article. This is especially important for PowerShell Magazine articles as we move that to a static site as well. I tried looking for a few solutions but found mostly things that would require playing with JavaScript.&lt;/p&gt;
&lt;p&gt;While looking at different GitHub profile pages this morning, I came across a visitor counter on &lt;a href=&#34;https://github.com/TylerLeonhardt&#34;&gt;Tyler&amp;rsquo;s page&lt;/a&gt;. This piqued my interest and looked at how he was generating it. It was made possible through a service hosted on &lt;a href=&#34;https://visitor-badge.glitch.me/&#34;&gt;glitch.me&lt;/a&gt;. There is a &lt;a href=&#34;https://github.com/jwenjian/visitor-badge&#34;&gt;GitHub repo&lt;/a&gt; that contains the source for this. At first, it seemed like a thing only for GitHub readme markdown but looking at the docs, I realized that I can embed that in simple webpages too.&lt;/p&gt;
&lt;p&gt;So, I updated single.html in my Hugo theme to add the following code. Single.html is the template for the article content in Hugo.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=visitorbadge&#34;&gt;&lt;/script&gt;

&lt;p&gt;With Hugo framework, this becomes relatively easy since the variables provided within the page context while building the static pages will help us build the necessary URL for tracking the visitors to the page. Depending on what static page generator framework you use, you may have to change the code above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My custom Hugo shortcode collection</title>
      <link>https://ravichaganti.com/blog/my-custom-hugo-shortcode-collection/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/my-custom-hugo-shortcode-collection/</guid>
      <description>&lt;p&gt;In the past I wrote here about the &lt;a href=&#34;https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/&#34;&gt;Az Deploy button shortcode&lt;/a&gt; and the &lt;a href=&#34;https://ravichaganti.com/blog/embedding-channel9-videos-in-hugo-static-pages/&#34;&gt;channel9 video embed shortcode&lt;/a&gt; for Hugo generated static pages. I have been creating some simple shortcodes for my own use on this blog as I start writing on different technologies again. A couple of more shortcodes I added recently are for the ARM template visualize button and launching Azure Cloud Shell.&lt;/p&gt;
&lt;p&gt;Today I decided to publish these &lt;a href=&#34;https://github.com/rchaganti/hugo-shortcodes&#34;&gt;shortcodes as a collection on GitHub&lt;/a&gt;. Instead of writing about each and every shortcode &amp;ndash; unless it has significant value to others as well &amp;ndash; this article will get updated every time I publish a new shortcode.&lt;/p&gt;
&lt;h2 id=&#34;azdeploy&#34;&gt;AzDeploy&lt;/h2&gt;
&lt;p&gt;If you ever read the Microsoft documentation around ARM templates or visited the &lt;a href=&#34;https://github.com/Azure/azure-quickstart-templates&#34;&gt;ARM templates quickstart repository&lt;/a&gt;, you might have noticed a &lt;em&gt;deploy to Azure&lt;/em&gt; button. Clicking on the button will take you to the Azure Portal to a page that provides a blade to input parameter values to deploy the ARM template. This shortcode enables the same functionality on a statically generated page. Here is how you use it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeployuse&#34;&gt;&lt;/script&gt;

&lt;p&gt;The link to JSON file should be a publicly accessible raw URL. The above shortcode when gets compiled to a static page will generate a button as shown below.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2f101-storage-account-create%2fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h2 id=&#34;armvisualize&#34;&gt;ArmVisualize&lt;/h2&gt;
&lt;p&gt;Along with the deploy to Azure button, you may have also seen a Visualize button that will show a visual representation of the ARM template. This shortcode helps implement the same functionality in a Hugo generated static page. Here is how you use it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=armvisualize&#34;&gt;&lt;/script&gt;

&lt;p&gt;The link to JSON file should be a publicly accessible raw URL.&lt;/p&gt;
&lt;p&gt;This shortcode displays a button as shown below.&lt;/p&gt;

    &lt;a href=&#34;http://armviz.io/#/?load=https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2f101-1vm-2nics-2subnets-1vnet%2fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/visualizebutton.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h2 id=&#34;azcloudshell&#34;&gt;AzCloudShell&lt;/h2&gt;
&lt;p&gt;Many Azure related documents have a button that is used to launch Azure cloud shell in a browser. This shortcode can be used to add the same functionality in a static web page.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azcloudshell&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can specify to open Bash or PowerShell by specifying that as the target argument. If you skip target parameter, the last opened shell will be launched. Here is how the Launch cloud shell button will appear.&lt;/p&gt;

    &lt;a href=&#34;https://shell.azure.com/bash&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://shell.azure.com/images/launchcloudshell.png&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;h2 id=&#34;channel9&#34;&gt;Channel9&lt;/h2&gt;
&lt;p&gt;Hugo has built-in shortcodes for YouTube and Vimeo. However, I refer to a few channel9 videos that I want to embed in my articles. So, I decided to write a shortcode that helps me embed Channel 9 videos. Here is how you use it.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=channel9use&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here is how the embed will appear.&lt;/p&gt;

    &lt;center&gt;
        &lt;iframe
            src=&#34;https://channel9.msdn.com/Events/Build/2020/KEY01/player&#34;
            width=&#34;640&#34;
            height=&#34;360&#34;
            frameBorder=&#34;0&#34;
            allowfullscreen=&#34;true&#34;&gt;
        &lt;/iframe&gt;
    &lt;/center&gt;
    &lt;br /&gt;


</description>
    </item>
    
    <item>
      <title>GitHub workflow for streamlined publishing of static pages</title>
      <link>https://ravichaganti.com/blog/github-workflow-for-streamlined-publishing-of-static-pages/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/github-workflow-for-streamlined-publishing-of-static-pages/</guid>
      <description>&lt;p&gt;Ever since I moved to this site/blog to static pages using Hugo and GitHub pages, I have been finding ways to optimize the publishing experience. If you ever used Wordpress, the plugins that are available to customize the site look and feel and functionality will spoil you. They make your life easy by extending base functionality and you can achieve pretty much anything you want as long as there is a plugin for that and you will always find one. Moving from such an environment to a static page generator makes you feel that you have to do all the heavy lifting.&lt;/p&gt;
&lt;p&gt;For example, tweeting an article once it is published is super simple when using Wordpress. You can simply integrate with Jetpack or use an external plugin to do that job for you. However, with static pages hosted on GitHub pages, your options are limited. If your static site generator generates an RSS feed, you can use a service like &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt; to retrieve changes to the feed and then send out a tweet announcing a new article. In the absence of an RSS feed, you must manually tweet the article.&lt;/p&gt;
&lt;p&gt;As a part of this move to Hugo and GitHub pages, I wanted more control over publishing articles on this blog. I started writing a couple of longer series of articles. These articles will be written in advance but published one after another. So, I will have a lot of articles in draft state until the time I want to publish them. Now, you may say that I may be over engineering this but this becomes an important aspect as I move &lt;a href=&#34;https://www.powershellmagazine.com/&#34;&gt;PowerShell Magazine&lt;/a&gt; to a static site as well. PowerShell Magazine has multiple authors contributing and we need a way to ensure that the content submitted by these contributors is reviewed and allowed to publish only after the review and subsequent updates are complete. We cannot let anyone commit to a master or a live branch. So, figuring out these details before PowerShell Magazine goes live as a static site will help on-board other contributors quickly. Essentially, my site is a playground for all that! :)&lt;/p&gt;
&lt;p&gt;So, here is the GitHub flow that I implemented as of today. I am going to optimize this further based on what I need for PowerShell Magazine.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/gitflow.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;blockquote&gt;
&lt;p&gt;You will need &lt;a href=&#34;https://cli.github.com/&#34;&gt;GitHub CLI&lt;/a&gt; try out commands in this article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To implement this flow, I have two different GitHub repositories &amp;ndash; blog and rchaganti.github.io. Blog repository is a private repository that contains all the markdown files for the articles on this blog and rchaganti.github.io is a public repository to which the generated static pages will be pushed to.&lt;/p&gt;
&lt;p&gt;Blog repository has two branches &amp;ndash; draft and live. Draft branch is where I author all the articles and keep them ready for publishing. Live branch has the content that should be live on the public website. Whenever there is content that needs to be pushed into the live branch, I submit a pull request.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=ghcreatepull.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;I use the blog article title as the argument to &lt;code&gt;--title&lt;/code&gt; parameter and the permalink to the new article as the argument to &lt;code&gt;--body&lt;/code&gt; parameter. I use these values specifically since I want to be able to send a tweet once the static page is generated and public site is updated. You will see how it gets used in the workflow file.&lt;/p&gt;
&lt;p&gt;Here is how (example from an earlier test) the created pull request will appear.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/ghpull.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;At this point in time, since I am the only author on my site, I can simply merge the pull request. In case of a multi-author blog or external contributions, we can go through the review workflow after the PR is submitted.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=ghprmerge.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above command will merge the PR. Now, at this point, we can trigger a GitHub workflow to use Hugo to generate the static pages, push to an external public repository, and finally tweet that change. Here is the workflow YAML from my repository.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=workflow.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above workflow gets triggered only when a pull request is associated with the live branch and the PR is closed. I have chosen a ubuntu runner to ensure all actions that I specified can run. And, this is a multi-step workflow.&lt;/p&gt;
&lt;p&gt;In the first step, live branch of the blog repository gets checked out. In step 2, I am using &lt;a href=&#34;peaceiris/actions-hugo@v2&#34;&gt;peaceiris/actions-hugo@v2&lt;/a&gt; action from the marketplace to setup Hugo and I am using extended version (specified using &lt;code&gt;extended: true&lt;/code&gt;) since I have custom CSS that needs to be compiled.&lt;/p&gt;
&lt;p&gt;Step 3 builds the static pages using Hugo command and step 4 publishes those static pages to an external public repository. This step uses &lt;a href=&#34;peaceiris/actions-gh-pages@v3&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/a&gt; from the actions marketplace. This action a few options. If you do not specify an external repository, it will simply create a new branch in the same repository that was checked out earlier and publish your static pages there. It will also auto-configure the cname based on what is configured in the static pages. I did not want this behavior since my Blog repository is a private repository and do not want a public facing site in that repository. For this action to be able to access the external repository and commit the new build of static pages, it needs the &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token#:~:text=Personal%20access%20tokens%20%28PATs%29%20are%20an%20alternative%20to,uses%20SAML%20SSO%2C%20you%20must%20authorize%20the%20PAT.&#34;&gt;GitHub personal token&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the last step sends out a tweet using the &lt;a href=&#34;ethomson/send-tweet-action@v1&#34;&gt;ethomson/send-tweet-action@v1&lt;/a&gt; action. This action requires Twitter API token and secrets. You can create your own app on &lt;a href=&#34;https://developer.twitter.com/en/apps&#34;&gt;Twitter developer portal&lt;/a&gt;. If everything else goes fine, this last step will send the tweet out using the pull request title and body arguments you have seen earlier.&lt;/p&gt;
&lt;p&gt;Here is a test tweet that was sent out at the end of an earlier test run.&lt;/p&gt;
&lt;p&gt;tweet 1279720259801530368&lt;/p&gt;
&lt;p&gt;Now, there is one thing I still need to implement is the conditional execution of the GitHub action. For example, I may update an already published article for whatever reasons but may not want a tweet to go out after this update. I can implement this based on the pull request labels. And, I want to be able to schedule article publishing which may be possible using cron syntax within the workflows. More on these later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embedding Channel9 Videos in Hugo Static Pages</title>
      <link>https://ravichaganti.com/blog/embedding-channel9-videos-in-hugo-static-pages/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/embedding-channel9-videos-in-hugo-static-pages/</guid>
      <description>&lt;p&gt;I have been trying a few things with my new blogging platform here and in the preparation for a new series of articles, I wanted the ability to embed &lt;a href=&#34;https://channel9.msdn.com/&#34;&gt;Channel9&lt;/a&gt; videos. This is Hugo platform! So, it was not a big deal. I just had to create another &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcode&lt;/a&gt; like the one I created for &lt;a href=&#34;https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/&#34;&gt;Deploy to Azure button&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the code for the shortcode.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=channel9.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can save this as channel9.html under the layouts/shortcode folder of your site content. And, then use this shortcode as shown here.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=channel9use&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can use either of the methods shown above. The first one uses an named parameter while the second one avoids named parameter specification. Here is how the embed appears on the static page.&lt;/p&gt;

    &lt;center&gt;
        &lt;iframe
            src=&#34;https://channel9.msdn.com/Events/Build/2020/KEY01/player&#34;
            width=&#34;640&#34;
            height=&#34;360&#34;
            frameBorder=&#34;0&#34;
            allowfullscreen=&#34;true&#34;&gt;
        &lt;/iframe&gt;
    &lt;/center&gt;
    &lt;br /&gt;


&lt;p&gt;It is good to be writing here again! Can&amp;rsquo;t wait to start publishing the new series of articles that I am writing now. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo shortcode for Deploy to Azure Button in a Static Page</title>
      <link>https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/adding-azdeploy-button-in-static-pages-using-hugo/</guid>
      <description>&lt;p&gt;As I moved to this new implementation of the blog using Hugo and GitHub pages, I decided to move older article &lt;a href=&#34;https://ravichaganti.com/series/arm-templates/&#34;&gt;series around authoring Azure Resource Manager templates&lt;/a&gt;. This series was one of the most visited ones on this blog. This series provided an incremental way to learn how to author ARM templates and deploy these ARM templates. In each of these articles, I added a &amp;ldquo;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-to-azure-button&#34;&gt;Deploy to Azure Button&lt;/a&gt;&amp;rdquo; that you could just click and open the template directly in Azure Portal ready for deployment. The code behind this button usually looks like this.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeployurl&#34;&gt;&lt;/script&gt;

&lt;p&gt;As I moved to static page generation using Hugo, I looked around to see if there was an easy way to generate the above HTML snippet. I came across the feature called &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcodes in Hugo&lt;/a&gt;. This allows you to embed shortcodes for YouTube videos, images, and so on. Several articles that I moved to this new site use shortcodes. And, it is not too difficult to &lt;a href=&#34;https://gohugo.io/templates/shortcode-templates/&#34;&gt;write your own shortcode&lt;/a&gt;. So, I decided to write one for AzDeploy button.&lt;/p&gt;
&lt;p&gt;First, you need a shortcode template.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeploy.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;I will spare an explanation of this and you can read the documentation of custom shortcodes. But, this is no rocket science. The way you use this shortcode in markdown is simple. You can use either of the methods shown below.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=azdeployuse&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is it really. If you put that above code in the markdown and generate the static page, you will see the Deploy to Azure button appear like this.&lt;/p&gt;

    &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2f101-storage-account-create%2fazuredeploy.json&#34; target=&#34;_blank&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true&#34; alt=&#34;&#34;&gt;
    &lt;/a&gt;
    &lt;br /&gt;

&lt;p&gt;Simple and straightforward. I really fell in love with Hugo and static site generation. This has a lot of ways to customize and way faster than any other framework I used so far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moved Blog to a Static Site Using Hugo and GitHub Pages</title>
      <link>https://ravichaganti.com/blog/moved-to-static-site-using-hugo-and-github-pages/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/moved-to-static-site-using-hugo-and-github-pages/</guid>
      <description>
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://ravichaganti.com/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://ravichaganti.com/images/welcome.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://ravichaganti.com/images/welcome.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;It has been a while since I wrote something here. I was using a Digital Ocean droplet to run this blog using self-hosted version of Wordpress. Overall, it was good experience but there are issues with Wordpress installs. While it allows greater levels of customization, when all you need is just sharing your ideas, it becomes rather heavy. Also, the recent vulnerabilities made me think about it again. While I was having this thought process, I came across a few sites hosted on GitHub pages using Jekyll and simple static pages. I really wanted to move but moving from Wordpress to static site isn&amp;rsquo;t an easy option. There are Wordpress &lt;a href=&#34;https://ma.ttias.be/step-by-step-guide-migrating-wordpress-to-hugo/&#34;&gt;plugins available to export&lt;/a&gt; to markdown format and then host the same on GitHub pages. This is done using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. While, on paper, it looks very easy job, it is actually not. The exported markdown files won&amp;rsquo;t be compatible with your selected &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo theme&lt;/a&gt;. As I was wondering about this whole process, &lt;a href=&#34;https://twitter.com/ChendrayanV&#34;&gt;Chen&lt;/a&gt; came to the rescue and gave me a head start. After reviewing what he sent and doing some more research, I decided to build the site from scratch.&lt;/p&gt;
&lt;p&gt;So, welcome to the new home. In the process of migrating to Hugo+GitHub Pages, I decided to drop some old content from the blog and export what was most visited through last few years. I have moved three most important series of articles I wrote here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/arm-templates/&#34;&gt;Authoring Azure Resource Manager Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/powershell-remoting/&#34;&gt;PowerShell Remoting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/wql-via-powershell/&#34;&gt;WMI Query Language (WQL) via PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have archived most of the other content and will try to bring it in slowly when I get some free time. Believe me. It is a lot of work bringing in old content into the markdown format. The images need to be moved, links need to be corrected, and code needs to be formatted again based on what type of syntax highlighter you were using.&lt;/p&gt;
&lt;p&gt;Anyway, I just fell in love with this new look and the way it makes my life easy. I have been writing in markdown for a while and I feel so comfortable doing it. I hope this move helps me write more and share my thoughts.&lt;/p&gt;
&lt;p&gt;I am also in the process of moving PowerShell Magazine to a static site but that is much more complex than a simple blog like mine. But, yes, I certainly want to make it easy for our contributing authors.&lt;/p&gt;
&lt;p&gt;Are you using a static site as well? What is your experience?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
