<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/categories/go/</link>
    <description>Recent content in Go on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get set Go - Slices in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-slices-in-go-language/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-slices-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you learned about arrays in Go language. As you have learned, arrays have a fixed size and therefore you cannot resize (grow or shrink) arrays. This limitation can be overcome using &lt;a href=&#34;https://golang.org/ref/spec#Slice_types&#34;&gt;slices&lt;/a&gt; in Go language. In this part, you will learn about slices and how to use this data type in your Go programs.&lt;/p&gt;
&lt;h2 id=&#34;slices&#34;&gt;Slices&lt;/h2&gt;
&lt;p&gt;A slice in Go language is a slice of an underlying array! Yes, no pun intended. 😊&lt;/p&gt;
&lt;p&gt;Here is how the Go language specification describes slices. &lt;em&gt;A slice is a descriptor for a contiguous segment of an underlying array and provides access to a numbered sequence of elements from that array.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are different ways to declaring and initializing slices in Go language.&lt;/p&gt;
&lt;h3 id=&#34;slice-literal&#34;&gt;Slice literal&lt;/h3&gt;
&lt;p&gt;The syntax for declaring a variable as a slice is &lt;code&gt;var s1 = []int{1,2}&lt;/code&gt;. This declare a slice of integers and initializes with two elements. This is similar to how you declared array variables. The only difference is that there is no size specification. You can avoid any values in the declaration to create an empty slice of integers. For example,  &lt;code&gt;var s2 = []int{}&lt;/code&gt;. However, you cannot add elements (to an empty slice or at an index that is out of bound) using the indexer syntax. For example, specifying &lt;code&gt;s2[0]= 100&lt;/code&gt; will result in an error. The indexer method works only when updating an existing element at a specific index in the slice. To add elements to an empty slice, you need use the built-in &lt;code&gt;append()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Here is a quick example that shows both these methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s1 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;}
	s1[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	fmt.Println(s1)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s2 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{}
	s2 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;)
	s2 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;200&lt;/span&gt;)
	fmt.Println(s2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With slices, unlike arrays, you can append elements. This essentially changes the size of the slice. You can use the &lt;code&gt;len()&lt;/code&gt; built-in function to find the current number of elements and the &lt;code&gt;cap()&lt;/code&gt; function to find the maximum capacity of the slice. Review the below example to understand the difference between length and capacity in-depth.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s1 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Initial len and cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 3rd element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 4th element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 5th element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this, you will see the following output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;PS C:&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\G&lt;/span&gt;itHub&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\G&lt;/span&gt;etSetGo&amp;gt; go run .&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\s&lt;/span&gt;lices.go
Initial len and cap &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
len and cap after adding 3rd element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;
len and cap after adding 4th element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;
len and cap after adding 5th element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you observe the above output, the initial length and capacity of the slice is what you initialized it to &amp;ndash; with two elements. After adding a third element, the capacity changed to 4 and stayed as 4 even after the adding the 4th element. However, the moment the 5th element gets added, the capacity of the slice jumps to 8. So, what is happening here?&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;append&lt;/code&gt; function, whenever you add an element, if the length exceeds the current capacity of the slice, Go simply doubles the capacity. So, when we added the 3rd element, the capacity doubled to 4 and then we added the 5th element, it doubled to 8.&lt;/p&gt;
&lt;h3 id=&#34;using-make&#34;&gt;Using Make&lt;/h3&gt;
&lt;p&gt;Slices can also be declared and initialized using the &lt;code&gt;make&lt;/code&gt; built-in function. The syntax for using make to create a slice is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; name = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;(slice-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;, slice-length, slice-capacity)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is an example that uses &lt;code&gt;make&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s3 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;)
	s3[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	s3[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	s3 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s3, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;)

	fmt.Println(s3, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s3), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s3))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the last integer value that is used to specify the capacity of the slice is optional. By default, the capacity will be same as length. The code in the above example creates a slice with length of 2 and capacity of 4. And, observe how the 3rd element is added. You have to use the append function since adding the 3rd element exceeds the length specified when using &lt;code&gt;make&lt;/code&gt; function. This behavior is different from what you seen above with append method on a slice created using slice literal syntax.&lt;/p&gt;
&lt;h3 id=&#34;slicing-arrays&#34;&gt;Slicing arrays&lt;/h3&gt;
&lt;p&gt;Yet another method of creating a slice is to slice an existing array! Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; languages = [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Elements in the string array are&amp;#34;&lt;/span&gt;, languages)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; langSlice = languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the derived slice are&amp;#34;&lt;/span&gt;, langSlice)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nSlicing without a start index is similar to using start index 0&amp;#34;&lt;/span&gt;, languages[:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;])
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nSlicing without an end index gets all elements from start_index till end of the array&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;:])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the &lt;code&gt;languages&lt;/code&gt; array has six elements. A slice of these elements &amp;ndash; from index 0 to 2 &amp;ndash; is assigned to the variable &lt;code&gt;langSlice&lt;/code&gt;. This variable is of slice data type. In the variable assignment, you have specified the the slice as start_index:end_index in square brackets. In this specification,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The end_index in excluded. So, when the indexes specified are 0 and 2, the resulting slice will have elements from index 0 and 1 but not 2.&lt;/li&gt;
&lt;li&gt;Both start_index and end_index are optional. So, for example, if you specify [:3], the first three elements from the array. If you specify [4:], elements from index 4 till the end of the array get assigned to the slice. Finally, skipping both &amp;ndash; [:] &amp;ndash; will simply return all elements from the array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You learned in an earlier part of this series that slices are reference types. This means that when you update an element in the slice the element in the underlying array gets updated as well.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; languages = [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Elements in the string array are&amp;#34;&lt;/span&gt;, languages)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; langSlice = languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the derived slice are&amp;#34;&lt;/span&gt;, langSlice)

	langSlice[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the updated slice are&amp;#34;&lt;/span&gt;, langSlice)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the underlying array are&amp;#34;&lt;/span&gt;, languages)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this above example, you will see output similar to what is shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;slices.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
Elements in the &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; array are [Go Python Rust Java C&lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; PowerShell]

Elements in the derived slice are [Go Python]

Elements in the updated slice are [Go C++]

Elements in the underlying array are [Go C++ Rust Java C&lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; PowerShell]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, once you update an element in the derived slice, the underlying array also gets updated. This brings us to the discussion around pointers in Go language which is the subject of next part in this series.&lt;/p&gt;
&lt;p&gt;Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Arrays in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-arrays-in-go-language/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-arrays-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the earlier part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you looked at types in Go language and learned about the basic data types &amp;ndash; int, float, and strings. You also learned about other categories of data types such as aggregate types, reference types, and interface types. In the next subsequent parts, you will dive into each of these different types.&lt;/p&gt;
&lt;h2 id=&#34;aggregate-types&#34;&gt;Aggregate Types&lt;/h2&gt;
&lt;p&gt;Aggregate types in Go language include &lt;a href=&#34;https://golang.org/ref/spec#Array_types&#34;&gt;arrays&lt;/a&gt; and &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34;&gt;structs&lt;/a&gt;. These data types are formed by combining basic data types. Learning structs will require knowledge of a few more things about Go language and Go types. You will learn about that soon. In today&amp;rsquo;s part, you will learn about arrays.&lt;/p&gt;
&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;
&lt;p&gt;An array in Go language is a &lt;strong&gt;fixed-length&lt;/strong&gt; sequence of &lt;strong&gt;homogeneous&lt;/strong&gt; elements in the memory. There is emphasis on two words in the previous sentence &amp;ndash; fixed-length and homogeneous. The length of the array is decided at the time of declaration. You cannot change it runtime and therefore fixed-length. And, an array can only be used store elements of the same data type and that is the homogeneous part in the definition. The number of elements in the array is called the length of the array and it will be an integer that is either zero or more than zero.&lt;/p&gt;
&lt;p&gt;The method to define/declare an array in Go is similar to that of a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt;variable_name&amp;gt; [SIZE] &amp;lt;variable_type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the above syntax, size is a part of the array declaration. So, for example, &lt;code&gt;var names [4] string&lt;/code&gt; will declare an array of fixed-length 4 to store values of string data type. The size must be an integer greater than zero. You can access the array elements using the index operator and the index always starts at zero and goes up to index of last element - 1. The built-in &lt;code&gt;len&lt;/code&gt; function can be used to find the length of the array. Therefore, the index of the last element can be derived using &lt;code&gt;len(arrayName) - 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; names [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// elements get initialized to a zero value based on type
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// set a value at an index
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(names)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of names array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, names[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As shown in the above example, using the index operator gives you the value at that index and you can assign / update a value at a given array index. Using this method of assigning values can be tedious and error-prone if you have a larger array. You can initialize arrays in a way similar to how variables of basic types are initialized during declaration or using shorthand form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; variable_name = [SIZE]&amp;lt;variable_type&amp;gt;{item1, item2, item3, ...itemN}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;var names = [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt; will declare and initialize the names array. The number of values you specify within the curly brackets should be equal to the size of the array specified within square brackets. You can avoid specifying the size of the array too &amp;ndash; &lt;code&gt;var languages = [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt;. The number of values specified in the initialization will be used to set the size of the array.&lt;/p&gt;
&lt;p&gt;And, finally, within a function, you can always use the shorthand declaration. For example, &lt;code&gt;languages := [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	languages := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;}
    fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;All elements in the array are&amp;#34;&lt;/span&gt;, languages)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(languages)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of languages array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, languages[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whatever you have seen so far are single-dimension arrays. You can create multi-dimension arrays too in Go language. The syntax for that is not too different from what you have already tried. You just have to add multiple size values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt;variable-name&amp;gt; = [SIZE1][SIZE2][SIZEn]&amp;lt;variable-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;&amp;gt;{{values1},{values2},{valuesn}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for example, &lt;code&gt;var languages = [2][2]string{{&amp;quot;Go&amp;quot;,&amp;quot;PowerShell&amp;quot;},{&amp;quot;English&amp;quot;, &amp;quot;Spanish&amp;quot;}}&lt;/code&gt; will declare a two-dimensional array. Notice the curly brackets around the value specification in the array declaration. You can access the array elements in a multi-dimensional array by specifying multiple indices. For example, &lt;code&gt;languages[0][0]&lt;/code&gt; will result in the value Go retrieved from the array. If you specify only one index, Go will present the entire set of elements at the dimension that matches the index.&lt;/p&gt;
&lt;p&gt;Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	languages := [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;}, {&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(languages)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of languages array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, languages[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the length of the languages array is 2. It is the number of dimensions and not the total number of elements.&lt;/p&gt;
&lt;p&gt;So far, you have learned about arrays in Go language. To summarize,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrays in Go are fixed-length and can contain elements of the same data type&lt;/li&gt;
&lt;li&gt;Arrays in Go can either be single or multi dimensional.&lt;/li&gt;
&lt;li&gt;Arrays in Go can neither be resized nor a sub-array can be retrieved&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point can be addressed using slices in Go language. And, that is the next part of this series.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Types in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-types-in-go-language/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-types-in-go-language/</guid>
      <description>&lt;p&gt;After looking at variables in the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-variables-in-go-language/&#34;&gt;previous part&lt;/a&gt; of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you have a fair understanding of using different types of variable declarations and using the variable values in your program. Each of these variables you created and used have an associated type. The type of a variable dictates what that variable is allowed store. So, what are different data types in Go language? You will learn that today!&lt;/p&gt;
&lt;h2 id=&#34;data-types-in-golang&#34;&gt;Data types in Golang&lt;/h2&gt;
&lt;p&gt;Go language has several built-in data types and these types can be classified into three different categories &amp;ndash; basic data types, aggregate data types, reference types, and interface types.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Included types&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Basic data types&lt;/td&gt;
&lt;td&gt;Numerals, Strings, and Booleans&lt;/td&gt;
&lt;td&gt;Data types that form the basis or included in other data types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aggregate data types&lt;/td&gt;
&lt;td&gt;Arrays and Structs&lt;/td&gt;
&lt;td&gt;Formed by combining the basic and simple data types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reference types&lt;/td&gt;
&lt;td&gt;Slices, Functions, Pointers, and Channels&lt;/td&gt;
&lt;td&gt;Refer indirectly to state or program variables&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interface types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Abstractions around behavior of other types&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this part, you will learn about basic data types and you will learn about other types as you proceed in this series.&lt;/p&gt;
&lt;h2 id=&#34;basic-data-types&#34;&gt;Basic data types&lt;/h2&gt;
&lt;p&gt;In the last chapter, some of the examples used variables of &lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;boolean&lt;/code&gt; data types. To recap, &lt;code&gt;var &amp;lt;variable-name&amp;gt; &amp;lt;data-type&amp;gt; = &amp;lt;value | expression&amp;gt;&lt;/code&gt; is how you declare variables. You learned that the variable declaration can either use static type declaration or the type can be determined based on the value assigned to the variable. The three types mentioned here fall in the category of basic data types. The following sections dive into each of these basic data types.&lt;/p&gt;
&lt;h3 id=&#34;numerals&#34;&gt;Numerals&lt;/h3&gt;
&lt;p&gt;Go language supports &lt;a href=&#34;https://golang.org/ref/spec#Numeric_types&#34;&gt;different types to represent numbers&lt;/a&gt;. You can at a high-level categorize these into integers, floating point numbers, and complex numbers. Each of these types represent the size of the value that can be stored within a variable of that type. And, these types can be both signed and unsigned.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Possible values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;unsigned  8-bit integers&lt;/td&gt;
&lt;td&gt;0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint16&lt;/td&gt;
&lt;td&gt;unsigned 16-bit integers&lt;/td&gt;
&lt;td&gt;0 to 65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;td&gt;unsigned 32-bit integers&lt;/td&gt;
&lt;td&gt;0 to 4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint64&lt;/td&gt;
&lt;td&gt;unsigned 64-bit integers&lt;/td&gt;
&lt;td&gt;0 to 18446744073709551615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;signed 8-bit integers&lt;/td&gt;
&lt;td&gt;-128 to 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int16&lt;/td&gt;
&lt;td&gt;signed 16-bit integers&lt;/td&gt;
&lt;td&gt;-32768 to 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;td&gt;signed 32-bit integers&lt;/td&gt;
&lt;td&gt;-2147483648 to 2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;signed 64-bit integers&lt;/td&gt;
&lt;td&gt;-9223372036854775808 to 9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float32&lt;/td&gt;
&lt;td&gt;32-bit floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float64&lt;/td&gt;
&lt;td&gt;64-bit floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex64&lt;/td&gt;
&lt;td&gt;complex numbers with float32 real and imaginary parts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex128&lt;/td&gt;
&lt;td&gt;complex numbers with float64 real and imaginary parts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;alias for uint8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rune&lt;/td&gt;
&lt;td&gt;alias for int32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Well, this is a huge list and what you choose to use in your program really depends on your need. Within integers, unsigned integers (uint) contain only the positive numbers while signed (int) contains both positive and negative numbers. Integers come in different sizes &amp;ndash; 8, 16, 32, and 64 bits. &lt;code&gt;int&lt;/code&gt; is probably the most commonly used numeric type.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;byte&lt;/code&gt; type is same as &lt;code&gt;unit8&lt;/code&gt;. You will see a good number of examples using &lt;code&gt;byte&lt;/code&gt; type in this series of articles. The type &lt;code&gt;rune&lt;/code&gt; is same as &lt;code&gt;int32&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Floating point numbers contain a decimal component. For example 3.14 is a floating point number. Floating point numbers come in 32 and 64 bit sizes. The &lt;code&gt;complex64&lt;/code&gt; and &lt;code&gt;complex128&lt;/code&gt; are essentially floating point types with the imaginary part.&lt;/p&gt;
&lt;p&gt;Like every other programming language, Go too supports a wide array of arithmetic operators to work with different data types. For example, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt;. The first four operators apply to all types if numerals while the last one &amp;ndash; remainder operator (&lt;code&gt;%&lt;/code&gt;) &amp;ndash; applies only to integers.&lt;/p&gt;
&lt;p&gt;Here is an example that sh ows all these numeric data types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; + &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2.0&lt;/span&gt; * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3.3&lt;/span&gt; / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3.1&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; - &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; % &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using complex numbers in Go language is a bit different from how you initialize and use ints and floats.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// using constructor to create a comples number
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	c1 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;complex&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// gets real part
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	realPart := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;real&lt;/span&gt;(c1)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// gets imaginary part
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	imgPart := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;imag&lt;/span&gt;(c1)

	fmt.Println(c1)
	fmt.Println(realPart)
	fmt.Println(imgPart)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// second method to creating complex numbers
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	c2 := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; + &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6i&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;real&lt;/span&gt;(c2))
	fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;imag&lt;/span&gt;(c2))

	&lt;span style=&#34;color:#007f7f&#34;&gt;//complex number arithmetic
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(c1 + c2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the constructor function &lt;code&gt;complex()&lt;/code&gt; creates a complex number. The two arguments to this function are the real and imaginary parts of the number. The &lt;code&gt;real()&lt;/code&gt; function gets the real part of a complex number while the imaginary part can be retrieved using &lt;code&gt;imag()&lt;/code&gt; function. Finally, the last line shows the complex number arithmetic.&lt;/p&gt;
&lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;
&lt;p&gt;Strings are sequences of characters. Each character is represented by a byte value. Go language supports unicode characters as well as a part of the strings. So, one of the examples you saw earlier &amp;ndash; &amp;ldquo;I ❤ Golang!&amp;rdquo; &amp;ndash; is a totally valid string in Golang. String literals should always be enclosed either in double-quotes or back ticks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;I ❤ Golang!&amp;#34;&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`Go language is simple to learn!`&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other languages &amp;ndash; if you are familiar with PowerShell like I do &amp;ndash; you might have used single-quotes as well to represent strings. While single-quotes are not permitted, using back ticks is in a way similar to single-quotes. For example, in Go, the escape sequences such as &lt;code&gt;/n&lt;/code&gt; (newline) and &lt;code&gt;/t&lt;/code&gt; (tab) have no meaning when the string is enclosed in back ticks. Update the example above to add one of these escape sequences and try out the program again.   Do you see something similar where the escape sequence at the end of string enclosed in back ticks does not get replaced to its meaning?&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d4-strings-01.png&#34; width=&#34;500&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As mentioned earlier, strings are sequence of characters and get indexed from 0. So, for example, &lt;code&gt;&amp;quot;Golang&amp;quot;[3]&lt;/code&gt; refers to byte representation of character &amp;ldquo;a&amp;rdquo;. So, if you use &lt;code&gt;fmt.Println(&amp;quot;Golang&amp;quot;[3])&lt;/code&gt;, you will see 97 printed on the console.   So, how can you print the character &amp;ldquo;a&amp;rdquo; instead of its byte representation? For this, you use format verbs. You will learn more about string formatting in a later article but if you are keen on trying this, you can use the following statement to print the character instead of its byte value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%q&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang&amp;#34;&lt;/span&gt;[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that in the above example, &lt;code&gt;Printf&lt;/code&gt; function is used instead of the &lt;code&gt;Println&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The length of a string is equivalent to the number of bytes in the string. You can derive the length of a string in Go using the predeclared function called &lt;code&gt;len&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, you can concatenate strings using the &lt;code&gt;+&lt;/code&gt; operator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;I &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;❤ &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang!&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;booleans&#34;&gt;Booleans&lt;/h3&gt;
&lt;p&gt;Booleans represent a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value. true and false are predeclared constants in Go and represent the boolean truth values. The predeclared boolean type is &lt;code&gt;bool&lt;/code&gt;. Booleans are represented using special one bit integer values. With boolean values, you use logical operators such as &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and), &lt;code&gt;||&lt;/code&gt; (or), and &lt;code&gt;!&lt;/code&gt; (not).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// using constructor to create a comples number
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; isTypeNum &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;

	isTypeNum = (reflect.TypeOf(a).String() == &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Is variable a of type int?:&amp;#34;&lt;/span&gt;, isTypeNum)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The statement &lt;code&gt;var isTypeNum bool&lt;/code&gt; creates a variable named &lt;code&gt;isTypeNum&lt;/code&gt; of type boolean. The expression &lt;code&gt;(reflect.TypeOf(a).String() == &amp;quot;int&amp;quot;)&lt;/code&gt; uses the &lt;code&gt;TypeOf()&lt;/code&gt; function in the &lt;code&gt;reflect&lt;/code&gt; package to retrieve the type of variable a, convert it to string and then compare it to the string &amp;ldquo;int&amp;rdquo; using the &lt;code&gt;==&lt;/code&gt; operator. This comparison (you will learn about comparison operators when looking at control flow statements) results in a boolean value &amp;ndash; true or false and that gets assigned to the variable &lt;code&gt;isTypeNum&lt;/code&gt; as value.&lt;/p&gt;
&lt;p&gt;This is quick overview of basic data types in Go language. It is time to practice what you learned today.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a program that declares two variables &amp;ndash; an integer and a floating pointing type. Perform multiplication of these values and print the result using &lt;code&gt;Println&lt;/code&gt; function. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/687707e99bb63cb59bdc37bf9e8f7b79&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a program that uses shorthand declaration to declare variables of types &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;bool&lt;/code&gt; and assigns the values 10, &amp;lsquo;hello&amp;rsquo;, and true respectively. What happens when you use the statement &lt;code&gt;fmt.Println(i == s)&lt;/code&gt;. Publish your answer &lt;a href=&#34;https://gist.github.com/rchaganti/b15475bb628b88cd3e905564427cf531&#34;&gt;here&lt;/a&gt;. What did you learn from this exercise?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Variables in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-variables-in-go-language/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-variables-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-first-program/&#34;&gt;last part&lt;/a&gt; of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you looked at writing your first program and understood the program structure and understood the keywords such as &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;func&lt;/code&gt;. It was a good start. In this part, you will learn how to declare and use variables in Go programs.&lt;/p&gt;
&lt;h2 id=&#34;naming-convention-in-go&#34;&gt;Naming convention in Go&lt;/h2&gt;
&lt;p&gt;Before you start looking at variables in Golang, you must first understand some rules for naming different program entities &amp;ndash; variables, types, statements, packages, and constants &amp;ndash; in Go.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Names or identifiers for any of these entities must start either with a letter or an underscore. You can use Unicode letters as well.&lt;/li&gt;
&lt;li&gt;These names or identifiers can have any number of additional letters or underscores or digits.&lt;/li&gt;
&lt;li&gt;The case of a name matters in Go language. For example, firstName is different from Firstname or FirstName.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You learned in the last part that &lt;a href=&#34;https://golang.org/ref/spec#Keywords&#34;&gt;Go language has 25 keywords&lt;/a&gt;. These keyword names are reserved and may not be used as names or identifiers for any of the program entities. There are also a &lt;a href=&#34;https://golang.org/ref/spec#Predeclared_identifiers&#34;&gt;few predeclared identifiers&lt;/a&gt; in Go language. You may use the names of predeclared identifiers for your program entities but make sure you do not confuse yourself or create confusion for others reading your code.&lt;/p&gt;
&lt;p&gt;While there is no limit on the number of characters in a name or an identifier, &lt;a href=&#34;https://www.reddit.com/r/golang/comments/3aporh/why_so_many_gophers_use_single_letter_variables/&#34;&gt;Gophers tend to use shorter names&lt;/a&gt; for program entities. It may sound strange for people coming from other programming language background but many Go programmers use single letter names and it is &lt;a href=&#34;http://doc.cat-v.org/bell_labs/pikestyle&#34;&gt;highly recommended&lt;/a&gt;. The recommendation here is to use shorter names or identifiers for local scope and longer names for names or identifiers that have a larger visibility. You will learn more about scopes in a different part of this article.&lt;/p&gt;
&lt;p&gt;Finally, names or identifiers starting with an uppercase letter are used only when you want to make the program entity visible outside the current package. For example, if you revisit the code of your first program, the function that we used to print text on the console was &lt;code&gt;Println&lt;/code&gt; in the &lt;code&gt;fmt&lt;/code&gt; package. Otherwise, the general recommendation is to begin the name or identifier with a lowercase letter or underscore.&lt;/p&gt;
&lt;p&gt;Alright, with this background, you can now get started with variables.&lt;/p&gt;
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;A variable is essentially a storage location in memory to store a specific value of a given type. Variable declaration names the storage location for easier identification. The general syntax for declaring variables in Go language is as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; name_of_variable &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; = value_or_expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, &lt;code&gt;var s string&lt;/code&gt; declares an identifier &lt;code&gt;s&lt;/code&gt; to store a value of type string. This declaration also allocates the storage needed for storing the value. Assigning type or assigning a value at the time of variable declaration is optional. In Go language, there is no concept of uninitialized variables. When no value is assigned during declaration, the variable gets initialized to a default or zero value based on the type. For string type, it will be an empty string. The zero value assignment ensures that a variable always hold a valid value of the type specified.&lt;/p&gt;
&lt;p&gt;When you specify the type during declaration, it defines the static type of the variable. If a type name is not specified during the declaration, a dynamic type gets determined based on the value assigned.&lt;/p&gt;
&lt;p&gt;You cannot skip both type and value assignment during variable declaration.&lt;/p&gt;
&lt;p&gt;Let us see this in action.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// declare a string variable without assigning a value
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// print variable value
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of variable s is&amp;#34;&lt;/span&gt;, s)

	&lt;span style=&#34;color:#007f7f&#34;&gt;//declare a variable without type
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; fName = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;type of variable fName is&amp;#34;&lt;/span&gt;, reflect.TypeOf(fName))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this Go program, you will see the following output.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d3-variable-01.png&#34; width=&#34;300&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As seen in the output, the dynamic type of variable &lt;code&gt;fName&lt;/code&gt; is set to &lt;code&gt;string&lt;/code&gt;. After this, within this program, you cannot assign a value of another type to &lt;code&gt;fName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go language allows you to declare multiple variables at the same time and these variable can be of different types as well. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#007f7f&#34;&gt;// multiple variables initialized to zero values
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; n1, n2, n3, n4 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// muliple variables with no type declaration but initializer values
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; n, s, f, b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;golang&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;3.14&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above examples, the first one declares multiple integer type variables. In the second declaration, the values get on the right-hand side get assigned to the variables in the order specified. Also, you must match the number of values provided on the right to number of identifiers specified on the left. The variable initializers (on the right) can be literal values like what is specified above or can be expressions as well.&lt;/p&gt;
&lt;p&gt;You can, similar to the import statement, wrap variable declaration in (). For example, the above two declarations can be changed to use the following syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; (
		n1, n2, n3, n4 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		n, s, f, b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;golang&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;3.14&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;
	)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is yet another way and usage depends on the readability requirements and preferences in your code.&lt;/p&gt;
&lt;h3 id=&#34;short-variable-declaration&#34;&gt;Short variable declaration&lt;/h3&gt;
&lt;p&gt;Within Go functions, you can use a short variable declaration and syntax for that is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;variable-name := value-or-expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that this can be used only within functions as non-declaration statements are not allowed at the package level. Here is a quick example of using short variable declaration method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;//simple short variable declaration
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	s := &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of variable S is&amp;#34;&lt;/span&gt;, s)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Type of variable s is&amp;#34;&lt;/span&gt;, reflect.TypeOf(s))

	&lt;span style=&#34;color:#007f7f&#34;&gt;//short variable declaration for multiple variables
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	n, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Values of n and b are&amp;#34;&lt;/span&gt;, n, b)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike &lt;code&gt;=&lt;/code&gt; (assignment operator), &lt;code&gt;:=&lt;/code&gt; is a declaration. Even in this case too, the initializer can either be a literal value or an expression such as a function call. You will see several examples this method of variable declaration as you go forward in this series.&lt;/p&gt;
&lt;p&gt;Alright, that is a quick overview of declaring and using variables in Go language. It is time to practice what you learned.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In the first exercise, update the hello world program you create in the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-first-program/&#34;&gt;last part&lt;/a&gt; to add a variable &lt;code&gt;fName&lt;/code&gt; and initialize it with your name as the value. Finally, print the statement Hello, fName to the screen. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/daa5741378a401935ee08102652ad278&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a program that declares two integer variables i and j and assigns values 10 and 30. Print the values of these variables. Add an expression to swap the values of the variables using assignment operator. Finally, print the values of the variable values after swapping. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/33b2cbf4fc121999d38c6ead7911eecd&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - First program</title>
      <link>https://ravichaganti.com/blog/get-set-go-first-program/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-first-program/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With the background provided in the introduction part of this series, you must now be equipped with the necessary tools for the job &amp;ndash; learning Go! So, in this part, you will write your first program in Go language. You will not only learn about the very minimal structure needed for a Go program but you will also learn about organizing your Go programs and why it matters. Get set Go!&lt;/p&gt;
&lt;h2 id=&#34;your-first-program&#34;&gt;Your first program&lt;/h2&gt;
&lt;p&gt;The most popular first program among many programmers or programming languages is the &lt;em&gt;hello world&lt;/em&gt; program. Here is how you can write a hello world program in Go language.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/023b2d3ad10b4c53e997d58387d1ee2d.js?file=d2-helloworld.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is it. The above code presents the basic structure of Go programs.&lt;/p&gt;
&lt;p&gt;All Go programs are packages and therefore every Go program starts with a package declaration. A Go package can be equated to a library or a module in other languages such as C or Python. In this example, [line1] the package name is &lt;code&gt;main&lt;/code&gt;. main package in Go is a special package since any Go program execution starts with &lt;code&gt;main&lt;/code&gt; function of the &lt;code&gt;main&lt;/code&gt; package. You will learn more about using and building packages in-depth in a later part of this series.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; keyword follows [line 7] the package declaration. This keyword is used to import other packages to use within the current package. In this example, you are importing the &lt;code&gt;fmt&lt;/code&gt; package. Note that the &lt;code&gt;fmt&lt;/code&gt; string is enclosed within double-quotes and it should be double-quotes only. If you are coming from other programming languages, you may start using single-quotes for representing strings but that is not valid in Go programming. The method of importing packages shown in the example works only for a single package. You can add multiple such import statements one after another or use a better method as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go does not let you import packages that you are not using within the current program. If you add an import statement for a package but do not use it in your code, you will receive an error during compile time that a package has been imported but not used. This is by design.&lt;/p&gt;
&lt;p&gt;Next thing that you see in the example is the &lt;code&gt;func&lt;/code&gt; keyword to declare the &lt;code&gt;main&lt;/code&gt; function. Like many other programming languages, functions in Go are the basic building blocks and the name of the function identifies a sequence of steps that you want to perform. In this example, you just have one step that is to print a message using &lt;code&gt;Println&lt;/code&gt; function within the &lt;code&gt;fmt&lt;/code&gt; package. You access functions from imported packages using the &lt;code&gt;&amp;lt;packageName&amp;gt;.&amp;lt;functionName&amp;gt;&lt;/code&gt; syntax and therefore the example above uses &lt;code&gt;fmt.Println()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go functions, similar to other languages, have input (arguments) and output (return values). However, &lt;code&gt;main&lt;/code&gt; function in Go uses neither &amp;ndash; it neither takes any arguments nor returns any values. The &lt;code&gt;Println&lt;/code&gt; function in the &lt;code&gt;fmt&lt;/code&gt; package takes a string argument and prints the same to the console when executed. You will learn more about the functions in-depth in a later part of this series.&lt;/p&gt;
&lt;p&gt;Also, notice that the opening and closing curly brackets in the function declaration. In Go programs, for any code block, the opening bracket has to be on the same line as the the keyword or code block identifier &amp;ndash; in this case the &lt;code&gt;func&lt;/code&gt; keyword and the name of the function. There is no choice in the function declaration since a new line character is treated as the end of a statement. On a lighter note, this totally eliminates any &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/2715/should-curly-braces-appear-on-their-own-line&#34;&gt;my-bracket-style-is-better-than-yours&lt;/a&gt; kind of discussion.&lt;/p&gt;
&lt;p&gt;Finally, to the other semantics I skipped. The &lt;code&gt;/* */&lt;/code&gt; [line 3-5] and &lt;code&gt;//&lt;/code&gt; [line 9 and end of line 10] indicate comments in Go language. No surprises there. The first method &amp;ndash; &lt;code&gt;/* */&lt;/code&gt; &amp;ndash; is a multi-line or block comment where as the second one using &lt;code&gt;//&lt;/code&gt; is a single line comment. Anything that you enclose within comments will be ignored at compile time.&lt;/p&gt;
&lt;h3 id=&#34;executing-go-programs&#34;&gt;Executing Go programs&lt;/h3&gt;
&lt;p&gt;You can execute your Go programs using the &lt;code&gt;go run&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go run helloworld.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d2-output.png&#34; width=&#34;260&#34; /&gt;
        
        &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;Figure 1 - Command Output&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;p&gt;When working with Go language, &lt;code&gt;go&lt;/code&gt; and it&amp;rsquo;s subcommands is all you need to compile your programs. In the above example, you are using the &lt;code&gt;run&lt;/code&gt; subcommand. When this command is executed, the Go program code gets compiled and translated to machine code which then runs and prints the message that we specified as an argument to the &lt;code&gt;Println&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;What if you want to just build the binary and not run it? You can use the &lt;code&gt;go build&lt;/code&gt; subcommand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; build hellworld.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command generates helloworld.exe in the current working directory. You can now execute the generated binary to see the output from the program.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;go build&lt;/code&gt; subcommand, it is optional to specify the .go filename. If you don&amp;rsquo;t specify a file name, go will try to find the Go source code package with main function and build it.&lt;/p&gt;
&lt;p&gt;If you look at the screen capture (Figure 1 - Command Output) of program output above, the &lt;code&gt;go run&lt;/code&gt; command did not use the full file name &amp;ndash; &lt;code&gt;helloworld.go&lt;/code&gt;. Instead, it was just &lt;code&gt;helloworld&lt;/code&gt;. It still worked! But, how? If you too thought about it, the answer follows. Read on.&lt;/p&gt;
&lt;h2 id=&#34;go-workspaces&#34;&gt;Go workspaces&lt;/h2&gt;
&lt;p&gt;The command shown in the above output worked because the helloworld source code exists in a known Go workspace. In the introduction, you have learned about the &lt;code&gt;go env&lt;/code&gt; command. In the output of this command, you see an environment variable called &lt;code&gt;GOPATH&lt;/code&gt;. This variable represents the path where your Go program source code is. By default, this will be set to &lt;code&gt;%USERPROFILE%\go&lt;/code&gt; on Windows and &lt;code&gt;$HOME/go&lt;/code&gt; on Linux. You can change this path using the &lt;code&gt;go env&lt;/code&gt; subcommand with &lt;code&gt;-w&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; env -w GOPATH=C:/GitHub/GetSetGo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go workspace is essentially a location on your disk. The workspace folder should contain a folder named &lt;code&gt;src&lt;/code&gt; for all your Go program source code. The other folder that gets created automatically is the &lt;code&gt;bin&lt;/code&gt; folder for storing all binary files generated using &lt;code&gt;go install&lt;/code&gt; subcommand. Here is how the folder structure looks like on my system.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d2-gopath.png&#34; width=&#34;260&#34; /&gt;
        
        &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;Figure 2 - Go workspace structure&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;p&gt;With this folder structure, when you run &lt;code&gt;go build helloworld&lt;/code&gt; or &lt;code&gt;go run helloworld&lt;/code&gt; or &lt;code&gt;go install helloworld&lt;/code&gt; command, go will try to find if there is a match that exists at a path specified by either &lt;code&gt;GOROOT&lt;/code&gt; or &lt;code&gt;GOPATH&lt;/code&gt; environment variables. A typical Go workspace contains many source control repositories &amp;ndash; one for each package you are working on. So, in the example above, you can consider the folder &lt;em&gt;helloworld&lt;/em&gt; under &lt;code&gt;src&lt;/code&gt; to be a source control repository. It is a best practice among Go programmers to use single workspace for all their Go source code.&lt;/p&gt;
&lt;p&gt;The Go workspace is the folder structure that gets used when you use the &lt;code&gt;go get&lt;/code&gt; subcommand to download Go packages. For example, if you are using VS Code with the Go extension to develop your Go programs, you might have seen VS Code prompting you to install necessary Go tools to enable the VS Code editor features such as Intellisense, linting, formatting, and so on. So, if you have used the Go: Install/Update Tools in VS Code, all tools get downloaded to &lt;code&gt;pkg&lt;/code&gt; folder within the Go workspace and then the packages get compiled to binaries which get installed to the &lt;code&gt;bin&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;For now, it is not mandatory (but good) to use a Go workspace to try out the examples in this or the next few upcoming parts. You will revisit this in a later part discussing Go packages. In the next part of this series, you will get introduced to variables and types in Go language.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Now that you have got introduced to basic Go program syntax, write a program that prints &amp;ldquo;I ❤ Golang!&amp;rdquo;. You don&amp;rsquo;t have to use anything more than what you learned today. Post your solution to this @ &lt;a href=&#34;https://gist.github.com/rchaganti/725cc041a30ee90e19d4713a1514b432&#34;&gt;https://gist.github.com/rchaganti/725cc041a30ee90e19d4713a1514b432&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Update the GOPATH environment variable to a different location than the default path and create folder structure similar to what is shown in Figure 2. Try &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, and &lt;code&gt;go install&lt;/code&gt; commands and understand the difference.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Introduction to Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-introduction-to-go-lang/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-introduction-to-go-lang/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go programming language&lt;/a&gt; isn&amp;rsquo;t new. It existed for more than 13 years now. The idea of Go language was first conceived in 2007 at Google by Ken Thompson, Robert Griesemer, and Rob Pike. Go was developed in response to some of the challenges the development teams at Google were facing internally. Some of these issues included ridiculously longer build times, baggage that legacy languages imposed on modern infrastructure / systems development, and uncontrolled dependencies among many other pain points. Go was designed to make it easy and efficient to program modern multicore systems, web service backends, and command line tools. The design considerations such as rigorous dependency management and efficiency at scale make Go one of the best modern programming languages.&lt;/p&gt;
&lt;p&gt;Go was publicly announced in 2009. Version 1.0 of Go language was released in &lt;a href=&#34;https://golang.org/doc/go1&#34;&gt;March 2012&lt;/a&gt; and the current version (at this time of writing) is &lt;a href=&#34;https://golang.org/doc/go1.14&#34;&gt;1.14&lt;/a&gt;. Today, Go is a part of many major online services and infrastructure tools that you use every day! Google, of course! &lt;a href=&#34;https://github.com/docker&#34;&gt;Docker&lt;/a&gt; &amp;ndash; the most popular container technology &amp;ndash; is written in Go. The most recent entrant in the CLI game, the &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt;, is written in Go. Every tool that &lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;Hashicorp&lt;/a&gt; developed so far was in Go. Blockchain platform like &lt;a href=&#34;https://ethereum.org/en/&#34;&gt;Ethereum&lt;/a&gt; uses Go. This static page that you are reading right now was generated using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; which is written in Go. I can &lt;em&gt;Go&lt;/em&gt; (pun intended) on with this list and &lt;a href=&#34;https://github.com/golang/go/wiki/GoUsers&#34;&gt;there are many more very well known names&lt;/a&gt; that use Go as their primary language for all their product development. So, what is Go?&lt;/p&gt;
&lt;h2 id=&#34;what-is-go&#34;&gt;What is Go?&lt;/h2&gt;
&lt;p&gt;Go is an &lt;a href=&#34;https://github.com/golang/go&#34;&gt;open source&lt;/a&gt;, general-purpose, and modern programming language with its roots in systems programming. If you are familiar with C programing language, you will find a few similarities between Go and C. Apart from C, Go language design was inspired from Pascal, Smalltalk, Modula, Oberon, and Algol. Go is a modern language and offers features such as garbage collection and better memory management.&lt;/p&gt;
&lt;p&gt;Go is a &lt;strong&gt;compiled&lt;/strong&gt; language. Unlike other compiled languages, Go programs can be compiled directly to machine code and compile very fast. Faster compiler times are a part of Go&amp;rsquo;s design. Go programs can be compiled for cross-platform execution which includes Windows, Linux, OS X, Solaris, Plan9 and many other operating systems. Go programs get compiled to a single executable which eliminates the dependency nightmares from other languages.&lt;/p&gt;
&lt;p&gt;Go is &lt;strong&gt;statically typed strong language&lt;/strong&gt;. Go does not allow type coercion unlike weakly typed languages such as JavaScript. Like other statically typed languages, Go types are checked before run-time. This allows any errors related  to types surface right during compile time itself.&lt;/p&gt;
&lt;p&gt;Go&amp;rsquo;s &lt;strong&gt;package system&lt;/strong&gt; combines the best of libraries, namespaces, and modules. Every Go file is a package. The package system is designed to identify the package import using the package path than the name. There is no need to make package names unique in the Go package system.&lt;/p&gt;
&lt;p&gt;Go has a &lt;strong&gt;simple and clean syntax&lt;/strong&gt;. Go&amp;rsquo;s grammar is modest in size compared to other languages such as C, C++, and Java. There are just 25 keywords in Go.&lt;/p&gt;
&lt;p&gt;Go offers &lt;strong&gt;concurrency&lt;/strong&gt; that is important and well suited for developing modern computing application that run on multicore systems. Go implements a variant of &lt;a href=&#34;https://en.wikipedia.org/wiki/Communicating_sequential_processes&#34;&gt;Communicating Sequential Processes&lt;/a&gt; (CSP) to enable support for concurrency that is simple and robust.&lt;/p&gt;
&lt;p&gt;Overall, Go is powerful, simple to learn and use and that is what makes you productive. Now, you may ask, this is all good but why learn go?&lt;/p&gt;
&lt;h2 id=&#34;why-learn-go&#34;&gt;Why Learn Go?&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/FTl0tl9BGdc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This interview is 8 years old and Go language has progressed quite a bit and that is evident not only from the investments that big companies are making in Go but also from the developer surveys such as the surveys done by &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020&#34;&gt;Stack Overflow&lt;/a&gt; and &lt;a href=&#34;https://research.hackerrank.com/developer-skills/2020&#34;&gt;HackerRank&lt;/a&gt;. In the Stack Overflow survey, Go stood as 5th &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved&#34;&gt;most loved language and 3rd most wanted language&lt;/a&gt; to develop new applications. Go featured as the &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-what-languages-are-associated-with-the-highest-salaries-worldwide&#34;&gt;3rd most highest paid programming skill&lt;/a&gt;. In the HackerRank survey, Go &amp;ndash; for 3 consecutive years &amp;ndash; was at the top of the list of new languages developers want to learn.&lt;/p&gt;
&lt;p&gt;Apart from all this, Go is fun. I started learning this really as yet another programming language in my skillset but got hooked to this as I progressed in my journey. I started looking at some of the most popular tools implemented in Go and it was amazing to see how clean the code is and how readable it is. When compared to languages like C, C++, and Java, navigating Go code is so simple. The learning curve to get started with Go and do anything productive is very small.&lt;/p&gt;
&lt;p&gt;Go language is the most popular choice for building web services and command line tools. This is where my interest as well and therefore learning Go is really paying off.&lt;/p&gt;
&lt;p&gt;So, what are YOU waiting for? Start here and start today.&lt;/p&gt;
&lt;h2 id=&#34;get-started-with-go&#34;&gt;Get started with Go&lt;/h2&gt;
&lt;p&gt;To get started with Go, you need not install anything on your system. Really. You can just use the &lt;a href=&#34;https://play.golang.org/&#34;&gt;Go Playground&lt;/a&gt; to start with the basics.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goPlayground.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With Go playground, you can write basic Go programs, execute, and see the output. You can also share the code that you write in the playground by clicking on the share button. This generates a unique link to access and share your code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by example&lt;/a&gt; &amp;ndash; an online Go language tutorial site &amp;ndash; has examples that you can open in Go playground and try out. As you get started, this is certainly one place that you don&amp;rsquo;t want to miss.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goByExample.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;For those of you who prefer having Go installed locally for all learning, you need to download and install the latest release of Go language from &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt; and follow the &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;install instructions&lt;/a&gt; to prepare the environment for getting started with Go.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I am writing these articles on my Windows 10 system and therefore you will see references to Windows paths and configuration. Otherwise, the content and examples can be used on any supported platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On Windows, you can either get the &lt;a href=&#34;https://golang.org/dl/go1.14.6.windows-amd64.zip&#34;&gt;zip archive&lt;/a&gt; of a Go language release, extract it to location of your choice on the local disk, and set up the required environment variables. At a minimum, you must configure the system PATH variable to include path to the bin folder. In the second but preferred method, you can download the &lt;a href=&#34;https://golang.org/dl/go1.14.6.windows-amd64.msi&#34;&gt;MSI file&lt;/a&gt; which installs, by default, at &lt;em&gt;C:\Go&lt;/em&gt; and configures needed environment variables for you.&lt;/p&gt;
&lt;p&gt;You can verify your Go binary installation and environment variable configuration by executing the &lt;code&gt;go env&lt;/code&gt; or &lt;code&gt;go version&lt;/code&gt; commands. You will have to re-open the command console before running this command.&lt;/p&gt;
&lt;p&gt;You should see output similar to what is shown below.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goenv.png&#34; width=&#34;460&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You can install and run multiple versions of Go language binaries side by side. The &lt;code&gt;go get&lt;/code&gt; command, which you learn later in this series, can help get different versions of Go binaries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go get golang.org/dl/go1.15rc1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command downloads unstable (under development) version of Go. Once this is installed, you can use &lt;code&gt;go1.15rc1&lt;/code&gt; instead of &lt;code&gt;go&lt;/code&gt; to explore the new features that are still in development or verify bug fixes.&lt;/p&gt;
&lt;p&gt;For writing Go programs, a simple notepad would be good enough but that won&amp;rsquo;t make you productive. A good Integrated Development Environment (IDE) is needed for developing Go code with ease. There are many editors such as Visual Studio &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Code&lt;/a&gt;, JetBrains &lt;a href=&#34;https://www.jetbrains.com/go/&#34;&gt;GoLand&lt;/a&gt;, Eclipse with &lt;a href=&#34;https://goclipse.github.io/&#34;&gt;GoClipse&lt;/a&gt; plugin, and many others. So far, I have used Visual Studio Code only and therefore it is my only preference. The &lt;a href=&#34;https://code.visualstudio.com/docs/languages/go&#34;&gt;Go language extension&lt;/a&gt; for VS code is a must. With this extension, VS Code gets support for IntelliSense, signature help, formatting, linting, build, and more importantly debugging features. As you proceed in this series, you will see mention different VS Code Go extension features and how those features can make you more productive when writing Go programs.&lt;/p&gt;
&lt;p&gt;Ok. Enough talk. What are some resources that you can use to get started with Go language?&lt;/p&gt;
&lt;h2 id=&#34;learning-resources&#34;&gt;Learning resources&lt;/h2&gt;
&lt;p&gt;There are many existing resources online for learning Go language. The following is a list of resources I used or often refer to. Depending what mode of learning you like, here are my recommendations. The Go language specification is not for an end-to-end reading but acts more like a reference. You will see references to the language specification throughout this series of articles.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Go language documentation&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://golang.org/doc/&#34;&gt;https://golang.org/doc/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go language specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;https://golang.org/ref/spec&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go by example&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;https://gobyexample.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Online tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exercism&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://exercism.io/tracks/go&#34;&gt;https://exercism.io/tracks/go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Code practice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Go Programming Language&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/Ydfkm9w&#34;&gt;https://cutt.ly/Ydfkm9w&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Introducing Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/VdfkoPp&#34;&gt;https://cutt.ly/VdfkoPp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go In Action&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/Mdfj8Bs&#34;&gt;https://cutt.ly/Mdfj8Bs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Learn How To Code: Google&amp;rsquo;s Go (golang) Programming Language (Udemy)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.udemy.com/course/learn-how-to-code/&#34;&gt;https://www.udemy.com/course/learn-how-to-code/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Core Language (Pluralsight path)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pluralsight.com/paths/go-core-language&#34;&gt;https://www.pluralsight.com/paths/go-core-language&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Fundamentals (Nigel Poulton)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/go-fundamentals&#34;&gt;https://www.pluralsight.com/courses/go-fundamentals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Programming Language (Reddit)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.reddit.com/r/golang/&#34;&gt;https://www.reddit.com/r/golang/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Community Forum / Discussions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are a lot of companies that use Go language and there are quite a few of them in &lt;a href=&#34;https://github.com/trending/go?spoken_language_code=en&#34;&gt;open source&lt;/a&gt;. Looking at the Go code in these open source repositories is another great exercise and gives you insights into how the language is used in the real-world. As a part of this series, you will see references to code from some of these open source projects while explaining a few concepts.&lt;/p&gt;
&lt;p&gt;Finally, I am no expert in Go language and therefore these are the notes from a novice. These notes are how I learned (or still learning) Go language. At this point in time, I don&amp;rsquo;t have a definite number of articles that I want to publish as a part of this series. I will go right from very basics to applied Go language. The applied Go language part of this series will deal with some sample utilities that I developed to strengthen my understanding of Go and walk-through how I went about developing those utilities and what I learned from that exercise. At the end of each part, starting next one, I will post a few exercises that you may want to try out and share your code with the others. Each of these exercises will be available as a &lt;a href=&#34;https://gist.github.com/&#34;&gt;Gist&lt;/a&gt; and you can comment there to share your solution to the exercise with other readers of this series.&lt;/p&gt;
&lt;p&gt;Join me in this journey. Let us learn together. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
