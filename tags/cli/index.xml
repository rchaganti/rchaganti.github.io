<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CLI on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/tags/cli/</link>
    <description>Recent content in CLI on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/tags/cli/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub Hub CLI - An extension to git command-line</title>
      <link>https://ravichaganti.com/blog/github-hub-cli-an-extension-to-git-command-line/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/github-hub-cli-an-extension-to-git-command-line/</guid>
      <description>&lt;p&gt;As I started writing more in markdown and using GitHub pages, my work with git and GitHub increased quite a bit. At times, I find myself fighting with git conflicts and merges. I am not an expert in git command-line and in a complex scenario, I figure my way out looking for some help.&lt;/p&gt;
&lt;p&gt;You may have already seen in my articles that I use &lt;a href=&#34;https://cli.github.com/&#34;&gt;GitHub CLI&lt;/a&gt; a lot to work with my GitHub repositories, pull requests, and issues. I recently started using another CLI tool from GitHub called &lt;a href=&#34;https://hub.github.com/&#34;&gt;hub&lt;/a&gt;. Hub is an extension to git command-line and makes working with GitHub from the command-line a breeze.&lt;/p&gt;
&lt;h2 id=&#34;install-hub-cli&#34;&gt;Install Hub CLI&lt;/h2&gt;
&lt;p&gt;You can download Hub CLI from &lt;a href=&#34;https://github.com/github/hub/releases/&#34;&gt;https://github.com/github/hub/releases/&lt;/a&gt;. I am using Windows OS and therefore I downloaded the 64-bit zip archive package for Windows. Once the download is complete, extract it to a temporary location and run install.bat at the command prompt. If the install is successful, you will see a message that hub.exe installed successfully.&lt;/p&gt;
&lt;p&gt;The hub.exe binary gets copied to &lt;code&gt;%LOCALAPPDATA%\GitHubCLI\Bin&lt;/code&gt;. This gets added to the user &lt;code&gt;path&lt;/code&gt; variable and if you close and reopen the console, you should be able to start using &lt;code&gt;hub&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-repositories&#34;&gt;Create repositories&lt;/h2&gt;
&lt;p&gt;The first thing you may want to do is to indicate https for all hub communication with GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git config --global hub.protocol https
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is done, you can create a GitHub repository.&lt;/p&gt;
&lt;h3 id=&#34;from-an-empty-folder&#34;&gt;From an empty folder&lt;/h3&gt;
&lt;p&gt;You can either create a GitHub repository from an empty folder or from folder that already has your files. Let us look at the first method now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir TestRepo
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cd&lt;/span&gt; TestRepo/
hub init
hub create -poc -d &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Test repository for hub.exe demo&amp;#39;&lt;/span&gt; -h &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;https://www.ravichaganti.com&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;hub init&lt;/code&gt; command is same as &lt;code&gt;git init&lt;/code&gt;. It will initialize a git repository in the empty folder. The &lt;code&gt;hub create&lt;/code&gt; command will create the GitHub repository from the local git repo. The &lt;code&gt;-p&lt;/code&gt; flag indicates that you want to create a private repository, &lt;code&gt;-o&lt;/code&gt; indicates that the newly create repository URL be opened in a browser, and &lt;code&gt;-c&lt;/code&gt; indicates that the created repository URL be copied to clipboard. The &lt;code&gt;-d&lt;/code&gt; and &lt;code&gt;-h&lt;/code&gt; flags should be self-explanatory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hub create&lt;/code&gt; will prompt for your GitHub credentials. A personal access token gets created and will be given limited scopes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once this repository is created, you can add the files to this folder and push upstream to GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;#This is a test repository&amp;#34;&lt;/span&gt; &amp;gt; README
hub add .
hub commit -m &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;initial commit&amp;#34;&lt;/span&gt;
hub push -u origin HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;from-an-existing-folder&#34;&gt;From an existing folder&lt;/h3&gt;
&lt;p&gt;To create a repository from folder from that contains your code, you need to set the location to that folder and run the following commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cd&lt;/span&gt; TestRepo/
hub init
hub add .
hub commit -m &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;New repository from an existing folder&amp;#39;&lt;/span&gt;
hub create
hub push -u origin HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above commands will create a new GitHub repository from an existing folder. The name of the folder gets used as the name of the repository.&lt;/p&gt;
&lt;h2 id=&#34;delete-repositories&#34;&gt;Delete repositories&lt;/h2&gt;
&lt;p&gt;The personal access token that gets created when you first authenticate using the hub CLI. However, this token will not be given the &lt;code&gt;delete_repo&lt;/code&gt; scope permission. Therefore, to be able to delete a repository using hub CLI, you need to &lt;a href=&#34;https://github.com/settings/tokens/&#34;&gt;enable&lt;/a&gt; the &lt;code&gt;delete_repo&lt;/code&gt; scope for the personal access token.&lt;/p&gt;
&lt;p&gt;Once you enable the required scope, you can use the &lt;code&gt;hub delete &amp;lt;repoName&amp;gt;&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag command with this command will skip the prompt.&lt;/p&gt;
&lt;h2 id=&#34;working-with-gists&#34;&gt;Working with gists&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;hub gist&lt;/code&gt; subcommand to work with gists. This command supports listing gists, getting contents of a gist and, creating new gists.&lt;/p&gt;
&lt;h3 id=&#34;show-gists&#34;&gt;Show gists&lt;/h3&gt;
&lt;p&gt;To list gists from your account, you can use the hub gist show command. This requires a mandatory ID parameter which you can obtain from the gist URL from &lt;a href=&#34;https://gists.github.com&#34;&gt;gists.github.com&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hub gist show 54ccde11aa58f7ecd443e6ff3d1cf319
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/hubgistshow.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You can get the contents of a gist by specifying the filename.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hub gist show 54ccde11aa58f7ecd443e6ff3d1cf319 arrays.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/hubgistshowfile.png&#34; width=&#34;560&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;h3 id=&#34;create-gists&#34;&gt;Create gists&lt;/h3&gt;
&lt;p&gt;Creating gists can be done using the &lt;code&gt;hub gist create&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;echo Write-Host&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;This is a test gist&amp;#39;&lt;/span&gt; | hub gist create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates a secret gist and the URL gets shown in the output. In this method, the gist gets created as a .txt file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hub gist create test1.ps1 test2.ps1 -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will create the gist and add the files test1.ps1 and test2.ps1 from the local folder. the &lt;code&gt;-c&lt;/code&gt; flag will copy the created gist URL to clipboard.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/hubgistcreate.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You can use the &lt;code&gt;--public&lt;/code&gt; flag to create a public gist and &lt;code&gt;-o&lt;/code&gt; flag to open the newly create gist in a browser.&lt;/p&gt;
&lt;p&gt;This is it for today. In a future article, we will revisit some more hub CLI commands.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
