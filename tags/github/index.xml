<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitHub on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/tags/github/</link>
    <description>Recent content in GitHub on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShell commands to generate Git.io shorturls</title>
      <link>https://ravichaganti.com/blog/powershell-commands-to-generate-git-io-shorturls/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-commands-to-generate-git-io-shorturls/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/gitio.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://git.io&#34;&gt;Git.io&lt;/a&gt; &amp;ndash; service by GitHub &amp;ndash; can be used generate the short URLs for any GitHub.com based URL. You can navigate to Git.io and paste a GitHub URL into the input box and generate a short URL. Note that this works only with GitHub.com URLs.&lt;/p&gt;
&lt;p&gt;I have been using &lt;a href=&#34;http://gist.github.com/&#34;&gt;gists&lt;/a&gt; a lot lately and the URL to gists is usually very long and includes guids. For these gist URLs, I have been using the git.io service and wrapped that in a quick PowerShell module to help me generate these URLs. Today, I published it on &lt;a href=&#34;https://github.com/rchaganti/psgitio&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.powershellgallery.com/packages/psgitio/1.0.0.0&#34;&gt;PowerShell Gallery&lt;/a&gt; for you to use it as well.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;It is straightforward to use this module. There are only two commands.&lt;/p&gt;
&lt;h3 id=&#34;get-gitioshorturl&#34;&gt;Get-GitIoShortUrl&lt;/h3&gt;
&lt;p&gt;This command is used to get the expanded URL from the short URL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Get-GitIoShortUrl -ShortUrl &#39;https://git.io/psdev&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;new-gitioshorturl&#34;&gt;New-GitIoShortUrl&lt;/h3&gt;
&lt;p&gt;This command can create a new short URL for any GitHub URL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;New-GitIoShortUrl -Url &#39;https://github.com/rchaganti/DSCResources&#39; -Code &#39;psdsc&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the above example, &lt;code&gt;-Code&lt;/code&gt; specifies an optional shortcode to be used for create the short URL. So, if the shortcode is not already taken the generated short URL will be &lt;a href=&#34;https://git.io/psdsc&#34;&gt;https://git.io/psdsc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the absence of &lt;code&gt;-Code&lt;/code&gt; parameter, a random shortcode gets generated.&lt;/p&gt;
&lt;p&gt;If you generated a short URL for a given GitHub URL without &lt;code&gt;-Code&lt;/code&gt;, trying this command again with the same URL and with &lt;code&gt;-Code&lt;/code&gt; will not have any impact. Once a short URL gets generated, the git.io service will always return the same short URL.&lt;/p&gt;
&lt;p&gt;BTW, if you are using GistPad VS Code extension, you may want to &lt;a href=&#34;https://github.com/vsls-contrib/gistpad/issues/168&#34;&gt;upvote this feature request&lt;/a&gt; to add an option to copy the GitHub shorturl for the gists.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub workflow for streamlined publishing of static pages</title>
      <link>https://ravichaganti.com/blog/github-workflow-for-streamlined-publishing-of-static-pages/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/github-workflow-for-streamlined-publishing-of-static-pages/</guid>
      <description>&lt;p&gt;Ever since I moved to this site/blog to static pages using Hugo and GitHub pages, I have been finding ways to optimize the publishing experience. If you ever used Wordpress, the plugins that are available to customize the site look and feel and functionality will spoil you. They make your life easy by extending base functionality and you can achieve pretty much anything you want as long as there is a plugin for that and you will always find one. Moving from such an environment to a static page generator makes you feel that you have to do all the heavy lifting.&lt;/p&gt;
&lt;p&gt;For example, tweeting an article once it is published is super simple when using Wordpress. You can simply integrate with Jetpack or use an external plugin to do that job for you. However, with static pages hosted on GitHub pages, your options are limited. If your static site generator generates an RSS feed, you can use a service like &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt; to retrieve changes to the feed and then send out a tweet announcing a new article. In the absence of an RSS feed, you must manually tweet the article.&lt;/p&gt;
&lt;p&gt;As a part of this move to Hugo and GitHub pages, I wanted more control over publishing articles on this blog. I started writing a couple of longer series of articles. These articles will be written in advance but published one after another. So, I will have a lot of articles in draft state until the time I want to publish them. Now, you may say that I may be over engineering this but this becomes an important aspect as I move &lt;a href=&#34;https://www.powershellmagazine.com/&#34;&gt;PowerShell Magazine&lt;/a&gt; to a static site as well. PowerShell Magazine has multiple authors contributing and we need a way to ensure that the content submitted by these contributors is reviewed and allowed to publish only after the review and subsequent updates are complete. We cannot let anyone commit to a master or a live branch. So, figuring out these details before PowerShell Magazine goes live as a static site will help on-board other contributors quickly. Essentially, my site is a playground for all that! :)&lt;/p&gt;
&lt;p&gt;So, here is the GitHub flow that I implemented as of today. I am going to optimize this further based on what I need for PowerShell Magazine.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/gitflow.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;blockquote&gt;
&lt;p&gt;You will need &lt;a href=&#34;https://cli.github.com/&#34;&gt;GitHub CLI&lt;/a&gt; try out commands in this article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To implement this flow, I have two different GitHub repositories &amp;ndash; blog and rchaganti.github.io. Blog repository is a private repository that contains all the markdown files for the articles on this blog and rchaganti.github.io is a public repository to which the generated static pages will be pushed to.&lt;/p&gt;
&lt;p&gt;Blog repository has two branches &amp;ndash; draft and live. Draft branch is where I author all the articles and keep them ready for publishing. Live branch has the content that should be live on the public website. Whenever there is content that needs to be pushed into the live branch, I submit a pull request.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=ghcreatepull.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;I use the blog article title as the argument to &lt;code&gt;--title&lt;/code&gt; parameter and the permalink to the new article as the argument to &lt;code&gt;--body&lt;/code&gt; parameter. I use these values specifically since I want to be able to send a tweet once the static page is generated and public site is updated. You will see how it gets used in the workflow file.&lt;/p&gt;
&lt;p&gt;Here is how (example from an earlier test) the created pull request will appear.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/ghpull.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;At this point in time, since I am the only author on my site, I can simply merge the pull request. In case of a multi-author blog or external contributions, we can go through the review workflow after the PR is submitted.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=ghprmerge.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above command will merge the PR. Now, at this point, we can trigger a GitHub workflow to use Hugo to generate the static pages, push to an external public repository, and finally tweet that change. Here is the workflow YAML from my repository.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=workflow.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;The above workflow gets triggered only when a pull request is associated with the live branch and the PR is closed. I have chosen a ubuntu runner to ensure all actions that I specified can run. And, this is a multi-step workflow.&lt;/p&gt;
&lt;p&gt;In the first step, live branch of the blog repository gets checked out. In step 2, I am using &lt;a href=&#34;peaceiris/actions-hugo@v2&#34;&gt;peaceiris/actions-hugo@v2&lt;/a&gt; action from the marketplace to setup Hugo and I am using extended version (specified using &lt;code&gt;extended: true&lt;/code&gt;) since I have custom CSS that needs to be compiled.&lt;/p&gt;
&lt;p&gt;Step 3 builds the static pages using Hugo command and step 4 publishes those static pages to an external public repository. This step uses &lt;a href=&#34;peaceiris/actions-gh-pages@v3&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/a&gt; from the actions marketplace. This action a few options. If you do not specify an external repository, it will simply create a new branch in the same repository that was checked out earlier and publish your static pages there. It will also auto-configure the cname based on what is configured in the static pages. I did not want this behavior since my Blog repository is a private repository and do not want a public facing site in that repository. For this action to be able to access the external repository and commit the new build of static pages, it needs the &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token#:~:text=Personal%20access%20tokens%20%28PATs%29%20are%20an%20alternative%20to,uses%20SAML%20SSO%2C%20you%20must%20authorize%20the%20PAT.&#34;&gt;GitHub personal token&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the last step sends out a tweet using the &lt;a href=&#34;ethomson/send-tweet-action@v1&#34;&gt;ethomson/send-tweet-action@v1&lt;/a&gt; action. This action requires Twitter API token and secrets. You can create your own app on &lt;a href=&#34;https://developer.twitter.com/en/apps&#34;&gt;Twitter developer portal&lt;/a&gt;. If everything else goes fine, this last step will send the tweet out using the pull request title and body arguments you have seen earlier.&lt;/p&gt;
&lt;p&gt;Here is a test tweet that was sent out at the end of an earlier test run.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just a test from GitHub Actions &lt;a href=&#34;https://t.co/QOZFo0kPeh&#34;&gt;https://t.co/QOZFo0kPeh&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ravikanth Chaganti (@ravikanth) &lt;a href=&#34;https://twitter.com/ravikanth/status/1279720259801530368?ref_src=twsrc%5Etfw&#34;&gt;July 5, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now, there is one thing I still need to implement is the conditional execution of the GitHub action. For example, I may update an already published article for whatever reasons but may not want a tweet to go out after this update. I can implement this based on the pull request labels. And, I want to be able to schedule article publishing which may be possible using cron syntax within the workflows. More on these later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I use GitHub Gists to store and display code snippets in blog posts</title>
      <link>https://ravichaganti.com/blog/how-i-use-gists-to-store-and-display-code-snippets-in-blog-posts/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/how-i-use-gists-to-store-and-display-code-snippets-in-blog-posts/</guid>
      <description>&lt;p&gt;After I moved to a static site hosted on GitHub Pages, I was looking at different options to share the code snippets in a better way. With the Hugo generated static pages, there are a few options for code sharing in an article.&lt;/p&gt;
&lt;p&gt;You can use the simple pre-formatted text in markdown. This is usually done by enclosing code snippet in ```. This appears (in Hugo Coder theme I am using) as a big black block and has no way to choose the right syntax highlighting based on what programming language the snippet is written in. There are no line numbers or no highlighting of lines in a code snippet and so on.&lt;/p&gt;
&lt;p&gt;The second method involves Hugo&amp;rsquo;s default &lt;a href=&#34;https://gohugo.io/content-management/syntax-highlighting/&#34;&gt;Highlight shortcode&lt;/a&gt;. This is a good method that supports line numbers, language type, and line highlights. But, the only shortcoming is that I have to now store the code snippet locally in the same static page. So, if I need to update the code snippet, I end up updating the static page itself.&lt;/p&gt;
&lt;p&gt;So, wanted to explore something better and then I found the &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/#gist&#34;&gt;Gist shortcode&lt;/a&gt; in Hugo. Using this shortcode, you can embed a GitHub Gist on a static page. This seemed like a good fit for me since I get the line numbers, language based syntax highlighting, and nothing saved locally in the static page. However, for adding the code snippets as Gists, I first need to upload the Gist and then use it in my article. For this, I need to navigate to the GitHub site and then return once I am done uploading Gists. This is where I found &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs&#34;&gt;GistPad VS Code extension&lt;/a&gt; quite helpful. With this extension in place, I can now create/update/delete Gists right inside VS Code where I am writing all the markdown content for the articles. So, I never have to leave VS Code. Here is how it appears in VS Code.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/vscodegist.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the screenshot, I can group all Gists that belong a specific article or category and then simply use them here in an article. With this integration, I simply write all code as a Gist and then use the following syntax to make it appear here.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/056a02f289d7d5415c17d27082ee753b.js?file=gistshortcode&#34;&gt;&lt;/script&gt;

&lt;p&gt;Simple. I will be using this method of sharing code snippets within an upcoming article series. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moved Blog to a Static Site Using Hugo and GitHub Pages</title>
      <link>https://ravichaganti.com/blog/moved-to-static-site-using-hugo-and-github-pages/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/moved-to-static-site-using-hugo-and-github-pages/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/welcome.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;It has been a while since I wrote something here. I was using a Digital Ocean droplet to run this blog using self-hosted version of Wordpress. Overall, it was good experience but there are issues with Wordpress installs. While it allows greater levels of customization, when all you need is just sharing your ideas, it becomes rather heavy. Also, the recent vulnerabilities made me think about it again. While I was having this thought process, I came across a few sites hosted on GitHub pages using Jekyll and simple static pages. I really wanted to move but moving from Wordpress to static site isn&amp;rsquo;t an easy option. There are Wordpress &lt;a href=&#34;https://ma.ttias.be/step-by-step-guide-migrating-wordpress-to-hugo/&#34;&gt;plugins available to export&lt;/a&gt; to markdown format and then host the same on GitHub pages. This is done using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. While, on paper, it looks very easy job, it is actually not. The exported markdown files won&amp;rsquo;t be compatible with your selected &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo theme&lt;/a&gt;. As I was wondering about this whole process, &lt;a href=&#34;https://twitter.com/ChendrayanV&#34;&gt;Chen&lt;/a&gt; came to the rescue and gave me a head start. After reviewing what he sent and doing some more research, I decided to build the site from scratch.&lt;/p&gt;
&lt;p&gt;So, welcome to the new home. In the process of migrating to Hugo+GitHub Pages, I decided to drop some old content from the blog and export what was most visited through last few years. I have moved three most important series of articles I wrote here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/arm-templates/&#34;&gt;Authoring Azure Resource Manager Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/powershell-remoting/&#34;&gt;PowerShell Remoting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ravichaganti.com/series/wql-via-powershell/&#34;&gt;WMI Query Language (WQL) via PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have archived most of the other content and will try to bring it in slowly when I get some free time. Believe me. It is a lot of work bringing in old content into the markdown format. The images need to be moved, links need to be corrected, and code needs to be formatted again based on what type of syntax highlighter you were using.&lt;/p&gt;
&lt;p&gt;Anyway, I just fell in love with this new look and the way it makes my life easy. I have been writing in markdown for a while and I feel so comfortable doing it. I hope this move helps me write more and share my thoughts.&lt;/p&gt;
&lt;p&gt;I am also in the process of moving PowerShell Magazine to a static site but that is much more complex than a simple blog like mine. But, yes, I certainly want to make it easy for our contributing authors.&lt;/p&gt;
&lt;p&gt;Are you using a static site as well? What is your experience?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
