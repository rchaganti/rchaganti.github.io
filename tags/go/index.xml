<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/tags/go/</link>
    <description>Recent content in Go on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 12 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get set Go - Functions in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-functions-in-go-language/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-functions-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Alright. In this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt; so far, you learned about some basics of programming in Go language, about data types, conditions, and loops. In all the examples in the earlier parts of the series, there was just the &lt;code&gt;main&lt;/code&gt; function which is the entry point into a Go program. All execution of a Go program starts at the &lt;code&gt;main&lt;/code&gt; function. The idea of a function in any language is to basically group together a set of instructions and these instructions can now be used repeatedly as needed. As you learned, the &lt;code&gt;main&lt;/code&gt; function is a bit special though. Functions promote reusability and readability of your code. In this part of the series, you shall learn about functions in Go language.&lt;/p&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;A function in go, like any other language, is a block of code that takes input, performs a specific task, and generates some output. The general syntax for declaring functions in Go language is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;-name(param1-name param1-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;, param2-name param2-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt;-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; {  
 	&lt;span style=&#34;color:#007f7f&#34;&gt;//statements that perform a specific task
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;func&lt;/code&gt; keyword, you have already seen this with the main function, is used to declare the function type in Go followed by a name given to the function. Within the parenthesis, you specify any parameters that are needed for the function to perform its task followed by function return type(s). Both parameters and return type are optional. Like the main function, the function body needs to be enclosed in a pair of curly brackets with the open bracket on the same line as the &lt;code&gt;func&lt;/code&gt; declaration. The parameters in the function declaration are always in the format of parameter name followed by its type. You can have any number of parameters. Similarly, you can specify a comma separated list of return types as well. However, if you have more than one return type, you must enclose them in ().&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c := add(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
    sum := x + y
    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, this is a super trivial elementary type example but you get the point. In the &lt;code&gt;main&lt;/code&gt; function, there are two variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. These variables are declared and initialized with some integer values. Now, another variable named &lt;code&gt;c&lt;/code&gt; is declared and initialized to the return value from the function &lt;code&gt;add&lt;/code&gt;. This is yet another way to initialize variables in Go language. Observe how the function is called. We just use the name of the function with all parameter values enclosed in () &amp;ndash; like &lt;code&gt;add(a, b)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; function is declared with two input parameters &amp;ndash; &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; &amp;ndash; of integer type. Since the variable &lt;code&gt;c&lt;/code&gt; in function &lt;code&gt;main&lt;/code&gt; gets its value from the &lt;code&gt;add&lt;/code&gt; function, this function has an integer return type. Within the function body, the &lt;code&gt;sum&lt;/code&gt; variable is declared and initialized to store the value of &lt;code&gt;x+y&lt;/code&gt;. And, finally, the &lt;code&gt;return sum&lt;/code&gt; statement&lt;/p&gt;
&lt;p&gt;Since both parameters of this function are of integer types, we can simplify the function declaration as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;named-return-values&#34;&gt;Named return values&lt;/h2&gt;
&lt;p&gt;Go functions support named return values. First, see the below example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c := add(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) (sum &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) {
	sum = x + y
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example which is more or less same as the first one, all that is modified is the &lt;code&gt;add&lt;/code&gt; function. For the function return value, there is both name and type enclosed in parenthesis. And, within the function body, you don&amp;rsquo;t have to declare the variable &lt;code&gt;sum&lt;/code&gt; anymore since it is already declared as a part of the return value declaration. And, finally, observe the &lt;code&gt;return&lt;/code&gt; statement. You don&amp;rsquo;t have specify the name of the variable that you want to return. Instead, simply use the return statement. This tells Go to return values of variables declared as a part of the function declaration. So, what happens if you don&amp;rsquo;t have a variable named sum in the function body? Does Go through an error? Not really. It simply returns a zero value for the type mentioned in the function return value declaration.&lt;/p&gt;
&lt;p&gt;See this example and the program output to understand this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c := add(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) (sum &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) {
	sum1 := x + y
	fmt.Println(sum1)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this modified example, &lt;code&gt;sum&lt;/code&gt; is declared as the return value from function &lt;code&gt;add&lt;/code&gt;. However, there is no value assigned to sum within the function body. So, the &lt;code&gt;return&lt;/code&gt; statement returns the zero value of integer variable &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And, here is the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;function.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;   
&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;
Sum of a and b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;        
PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the program output, there is no error and the return value from the &lt;code&gt;add&lt;/code&gt; function is 0 which gets assigned to variable &lt;code&gt;c&lt;/code&gt; in the main function.&lt;/p&gt;
&lt;h2 id=&#34;multiple-return-values&#34;&gt;Multiple return values&lt;/h2&gt;
&lt;p&gt;In Go, a function can return multiple values. The way you can declare such as function is shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	c, d := math(a, b)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Difference if a and b is&amp;#34;&lt;/span&gt;, d)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; math(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) (sum, diff &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) {
	sum = x + y
	diff = x - y
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the &lt;code&gt;add&lt;/code&gt; function is renamed to &lt;code&gt;math&lt;/code&gt; and one more return value called &lt;code&gt;diff&lt;/code&gt; has been added. With this, you have two integer return values on the function. Similar the function parameters, you can specify the type of return values just once if you have more than one value of the same type. Once again, this example uses named return values to so there is no need to specify the variable names along with the return statement.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;main&lt;/code&gt; function, variables &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; get their values from the &lt;code&gt;math&lt;/code&gt; function. Since sum is declared first in the return values of the function, variable &lt;code&gt;c&lt;/code&gt; gets the value of &lt;code&gt;sum&lt;/code&gt; and variable &lt;code&gt;d&lt;/code&gt; gets the value of &lt;code&gt;diff&lt;/code&gt; assigned respectively. If you are interested only in one value returning from the function, you can use the blank identifier (&lt;code&gt;_&lt;/code&gt;) you learned in an earlier part of this series.&lt;/p&gt;
&lt;h2 id=&#34;variadic-functions&#34;&gt;Variadic functions&lt;/h2&gt;
&lt;p&gt;In the example above, function &lt;code&gt;add&lt;/code&gt; takes exactly two values and adds them up and returns the result to &lt;code&gt;main&lt;/code&gt; function. Is there a way you can pass it an arbitrary number of values to get the sum of those values? This is where variadic functions play a role.&lt;/p&gt;
&lt;p&gt;First, take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	c := add(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(values ...&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	sum := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, i := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; values {
		sum = sum + i
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the add function&amp;rsquo;s parameter definition is different from what you have seen so far. In the parameter definition &amp;ndash; &lt;code&gt;values ...int&lt;/code&gt; &amp;ndash; &lt;code&gt;values&lt;/code&gt; is the name of the parameter and &lt;code&gt;int&lt;/code&gt; is the data type of that parameter. The three dots &lt;code&gt;...&lt;/code&gt; (Ellipsis) indicate that the parameter &lt;code&gt;values&lt;/code&gt; must be rolled into a slice type. Observe that there is no space between the Ellipsis and the data type of the parameter. Essentially, you prefix Ellipsis to the data type of the parameter.&lt;/p&gt;
&lt;p&gt;Within the add function, once the parameters values are received and rolled into a slice, the rest of the logic using the &lt;code&gt;for&lt;/code&gt; loop is similar to what you have learned in an earlier part of the series. When you use Ellipsis in a function parameter definition, the function becomes a variadic function. With this change, it does not matter how many values of the same data type you specify.&lt;/p&gt;
&lt;p&gt;Now, what if you have to pass some more values (as parameters) to this variadic function? This can be done but the Ellipsis can be used only with the final parameter of the function.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;}
	c := add(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, num...)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Sum of a and b is&amp;#34;&lt;/span&gt;, c)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; add(x &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, values ...&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; {
	sum := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, i := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; values {
		sum = sum + i + x
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example,the add function is updated to add one more integer parameter called &lt;code&gt;x&lt;/code&gt;. As you can see in the function parameter definition, the add function has two parameters &amp;ndash; &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt;. Within &lt;code&gt;main&lt;/code&gt; function, you now have a slice called &lt;code&gt;num&lt;/code&gt;. And, the way &lt;code&gt;add&lt;/code&gt; function invoked is also a bit different. Instead of passing the slice directly, Ellipsis is postfixed to the variable name &amp;ndash; &lt;code&gt;num...&lt;/code&gt; &amp;ndash; to unroll the slice values into a bunch of integers. These values get rolled into a slice again within the add function.&lt;/p&gt;
&lt;p&gt;There are several use cases for variadic function. First and foremost, when you do not know in advance how many values you may have to pass to a function. Secondly, using variadic functions, you can avoid creating a temporary slice to just pass a bunch of values to a function.&lt;/p&gt;
&lt;h2 id=&#34;passing-by-value-vs-passing-by-reference&#34;&gt;Passing by value vs passing by reference&lt;/h2&gt;
&lt;p&gt;Like many other programming languages, Go language too supports pointers which form the basis of passing values to a function by reference. First, take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; person &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	firstName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	lastName  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	age       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	p1 := person{
		firstName: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Ravikanth&amp;#34;&lt;/span&gt;,
		lastName:  &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Chaganti&amp;#34;&lt;/span&gt;,
		age:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#007f7f&#34;&gt;//print p1
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(p1)
	&lt;span style=&#34;color:#007f7f&#34;&gt;//increment age
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	incrementAge(p1)
	&lt;span style=&#34;color:#007f7f&#34;&gt;//print p1 again
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(p1)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; incrementAge(p1 person) {
	p1.age++
	fmt.Println(p1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the struct &lt;code&gt;person&lt;/code&gt; is a custom type which has three elements &amp;ndash; &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt;, and &lt;code&gt;age&lt;/code&gt;. Age is an integer can be incremented using the &lt;code&gt;increment()&lt;/code&gt; function. In the main function, &lt;code&gt;p1&lt;/code&gt; is declared and initialized.&lt;/p&gt;
&lt;p&gt;Here is how the output will be when you run this program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;function.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
{Ravikanth Chaganti &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;}
{Ravikanth Chaganti &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;}
{Ravikanth Chaganti &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;}
PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, the changes done to the age element within &lt;code&gt;p1&lt;/code&gt; are not visible within the &lt;code&gt;main&lt;/code&gt; function. The reason is, by default, when you pass a value to a function in Go, a copy of that variable gets created within the function scope. So, essentially, the &lt;code&gt;increment()&lt;/code&gt; function gets copy of the &lt;code&gt;p1&lt;/code&gt; struct and then it modifies the age element within that copy which is certainly not visible to the &lt;code&gt;main&lt;/code&gt; function. So, how do we pass values by reference so that the calling function sees the changes in values? We need to use pointers. Here is an updated example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; person &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	firstName &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	lastName  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
	age       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	p1 := &amp;amp;person{
		firstName: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Ravikanth&amp;#34;&lt;/span&gt;,
		lastName:  &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Chaganti&amp;#34;&lt;/span&gt;,
		age:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;39&lt;/span&gt;,
	}

	fmt.Println(*p1)

	incrementAge(p1)

	fmt.Println(*p1)
}

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; incrementAge(p1 *person) {
	p1.age++
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this updated example, &lt;code&gt;p1&lt;/code&gt; is a reference to the &lt;code&gt;person&lt;/code&gt; struct and by passing this pointer to the &lt;code&gt;incrementAge()&lt;/code&gt; function, the value of &lt;code&gt;age&lt;/code&gt; element gets incremented and becomes available to the main function. Observe how the &lt;code&gt;incrementAge()&lt;/code&gt; function parameter definition is updated to receive the pointer to &lt;code&gt;person&lt;/code&gt; struct. And, within the function, you simply reference the &lt;code&gt;age&lt;/code&gt; element and increment it.&lt;/p&gt;
&lt;p&gt;Wow! This has been a long post. This is a good overview of function basics in Go. In the next part, you will learn about anonymous functions in Go language. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Labels in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-labels-in-go-language/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-labels-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the two previous parts of the series, you learned how to use if, switch, and for loop in Go language. You also learned about using break and continue statements in Go language to alter the control flow. What you have seen in the examples with these statements was an unlabeled way to break or continue the iteration. Go language supports labels that let you transfer control to the place in the (same function) code where the label is defined. There are different ways to use labeled statements.&lt;/p&gt;
&lt;h2 id=&#34;goto&#34;&gt;Goto&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;, the &lt;code&gt;[goto](https://golang.org/ref/spec#Goto_statements)&lt;/code&gt; statement in Go language transfers the control to the place in the code where a specific label is defined within the same function. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

jumpTo:
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			num++
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;goto&lt;/span&gt; jumpTo
		}
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n num has value set to %d&amp;#34;&lt;/span&gt;, num)
		num++
	}

	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nFinal value of num is %d&amp;#34;&lt;/span&gt;, num)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example&amp;rsquo;s purpose is to print all odd numbers between 1 and 10. In this, the &lt;code&gt;goto&lt;/code&gt; statement is used to jump to the start of the loop again. Note the way the label &amp;ndash; &lt;code&gt;jumpTo&lt;/code&gt; &amp;ndash; is defined. The general syntax for defining a label in a Go program is &lt;code&gt;identifier:&lt;/code&gt; and then with the &lt;code&gt;goto&lt;/code&gt; statement, you just use the identifier &amp;ndash; &lt;code&gt;goto jumpTo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the output from this program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt; 
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; 
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt; 
 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt; 
Final value of num is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The scope of a label is the function where it is defined. With the &lt;code&gt;goto&lt;/code&gt; statement, it does not matter where the label is defined within the function. For example, the following program works as well. Of course, without printing all the odd number values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			num++
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;goto&lt;/span&gt; jumpTo
		}
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n num has value set to %d&amp;#34;&lt;/span&gt;, num)
		num++
	}

jumpTo:
	fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nFinal value of num is %d&amp;#34;&lt;/span&gt;, num)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This produces output as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

 num has value set to &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
Final value of num is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function scope of a label also means that you cannot have the same label identifier declared multiple times even within different code blocks within the same function. Also, using &lt;code&gt;goto&lt;/code&gt; has a couple of caveats.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since &lt;code&gt;goto&lt;/code&gt; can be used to jump forward in the program flow, you cannot jump over a variable declaration.&lt;/li&gt;
&lt;li&gt;You cannot jump into a new code block.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;continue-and-break-with-labels&#34;&gt;Continue and Break with labels&lt;/h2&gt;
&lt;p&gt;If you look at the &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; statement syntax from the &lt;a href=&#34;https://golang.org/ref/spec#Continue_statements&#34;&gt;Go language specification&lt;/a&gt;, you will notice that these statements have an optional label.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;BreakStmt = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;break&amp;#34;&lt;/span&gt; [ Label ] .
ContinueStmt = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;continue&amp;#34;&lt;/span&gt; [ Label ] .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Break&lt;/code&gt; statement works only within a &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;select&lt;/code&gt; statement while &lt;code&gt;continue&lt;/code&gt; works only in a loop. You have already seen examples of &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; within a &lt;code&gt;for&lt;/code&gt; loop. Similar to the &lt;code&gt;goto&lt;/code&gt; statement, you just need to suffix the label identifier to &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;Continue statement without a label, it skips the current iteration of the innermost loop. First, take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	s1 := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; i++ {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n\ni is %d&amp;#34;&lt;/span&gt;, i)

		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, j := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; s1 {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; j%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;continue&lt;/span&gt;
			}
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nj is %d&amp;#34;&lt;/span&gt;, j)

		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is straightforward. Within the inner loop, if you encounter an even number, you simply go to the next iteration using &lt;code&gt;continue&lt;/code&gt;. Here is the output from this program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, imagine based on the condition being checked in the inner loop, you may want to simply start again from the outer loop. You can achieve this with a simple change of adding the label to the continue statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	s1 := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}

jumpTo:
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; i++ {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n\ni is %d&amp;#34;&lt;/span&gt;, i)

		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, j := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; s1 {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; j%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;continue&lt;/span&gt; jumpTo
			}
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nj is %d&amp;#34;&lt;/span&gt;, j)

		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only change here is that a label &amp;ndash; called &lt;code&gt;jumpTo&lt;/code&gt; &amp;ndash; is added right before the outer &lt;code&gt;for&lt;/code&gt; loop. And, the same identifier is added to &lt;code&gt;continue&lt;/code&gt; statement inside the innermost loop. You can clearly see the difference in the control flow when you run this program. Here is what you will see.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;


i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
      
i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
      
i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the innermost loop reinitializes every time it is reached during execution, you will never go beyond the second element in the slice. The labeled &lt;code&gt;continue&lt;/code&gt; becomes very useful in case of nested loops where exiting the current scope based on a condition is needed.&lt;/p&gt;
&lt;p&gt;Similarly, labels can be used with &lt;code&gt;break&lt;/code&gt; statement as well. For this, just replace &lt;code&gt;continue&lt;/code&gt; with &lt;code&gt;break&lt;/code&gt; in the above example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	s1 := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}

jumpTo:
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; i++ {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n\ni is %d&amp;#34;&lt;/span&gt;, i)

		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, j := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; s1 {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; j%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;break&lt;/span&gt; jumpTo
			}
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nj is %d&amp;#34;&lt;/span&gt;, j)

		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following snippet shows the output both with and without the label to illustrate the difference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

&lt;span style=&#34;color:#007f7f&#34;&gt;//without break label
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;

i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;

&lt;span style=&#34;color:#007f7f&#34;&gt;//with break label
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;i is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;
j is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is it about using labeled statements in Go. When you write some &amp;ldquo;real&amp;rdquo; Go code other than these trivial examples, you will understand the advantages of these labeled statements in control flow. In this next part, you will learn about functions in Go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Loops in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-loops-in-go-language/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-loops-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With what you learned about basic data types and structs in this series so far, you are now ready to look at the looping construct in Go language. Go language is simple and to that extent Go has just one looping construct &amp;ndash; &lt;code&gt;For&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id=&#34;for-loop&#34;&gt;For loop&lt;/h2&gt;
&lt;p&gt;A few programming languages that you may have used in the past may have more than one looping construct &amp;ndash; &lt;code&gt;do - while&lt;/code&gt;, &lt;code&gt;do - until&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, and &lt;code&gt;foreach&lt;/code&gt; and so on. You use a specific construct based on what you need to achieve and type of conditions that need to be tested. However, Go language has just one looping construct &amp;ndash; the &lt;code&gt;for&lt;/code&gt; loop. Although there is just one looping construct, go supports multiple variations of this construct for different use cases.&lt;/p&gt;
&lt;p&gt;The general syntax of writing a for loop is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; &amp;lt;initialization&amp;gt;; &amp;lt;condition&amp;gt;; &amp;lt;post&amp;gt; {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this general syntax, the three different components are given a specific purpose. Initialization is used initialize any variables needed. This runs only once. The condition in the middle gets checked in every iteration and the loop runs until this condition evaluates to false. The post statement gets executed after the iteration executes successfully. After every successful iteration, the condition gets evaluated again and the loop body will continue to execute. All these components are totally optional. This leads into the different for loop variations.&lt;/p&gt;
&lt;h2 id=&#34;infinite-loop&#34;&gt;Infinite loop&lt;/h2&gt;
&lt;p&gt;As you learned earlier, all components within the for loop syntax are optional. So, if you remove all the components mentioned earlier, it results in an infinite loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;This is an infinite loop. You need to break the execution.&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above will continue to run until you interrupt it (CTRL+C on Windows). Infinite loops always need a way to break out of the loop. Here is a better example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; {
		num := rand.Intn(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100000&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num % &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;break&lt;/span&gt;
		}

		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nGenerated random number &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, num)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, within the loop body, the &lt;code&gt;rand.Intn&lt;/code&gt; function is used to generate a non-negative random integer between 0 and n and n here is set to 100000. In the next statement, the &lt;code&gt;if&lt;/code&gt; condition is used to evaluate if the generated random number is an even number and if so, the loop breaks and exits. if the generate number is an odd number, the number gets printed and the loop continues execution.&lt;/p&gt;
&lt;h3 id=&#34;break&#34;&gt;Break&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;break&lt;/code&gt; statement in a loop is used to break out of the based on a condition like what you have seen in the previous example. Once the loop exits, the program control goes to the next line in the program, if any.&lt;/p&gt;
&lt;p&gt;The next variant of &lt;code&gt;for&lt;/code&gt; loop is the that uses a &lt;code&gt;boolean&lt;/code&gt; expression.&lt;/p&gt;
&lt;h2 id=&#34;for-loop-with-boolean-expression&#34;&gt;For loop with Boolean expression&lt;/h2&gt;
&lt;p&gt;In the general syntax of a for loop that you learned in the beginning of this part, there were three components &amp;ndash; initializer, condition, and post statement. In the absence of these three components, you get to define an infinite loop. You can add only the condition component and still create a for loop. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, num)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, num)
		}
		num++
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, for loop is using a &lt;code&gt;boolean&lt;/code&gt; expression to determine the number of iterations. In this case, the loop iterates until the variable &lt;code&gt;num&lt;/code&gt; is less than or equal to 10. Within the loop body, the post increment of variable &lt;code&gt;num&lt;/code&gt; ensures that its value gets incremented. Without this, you will end up with an infinite loop again.&lt;/p&gt;
&lt;p&gt;While what you have seen so far &amp;ndash; infinite loop and the loop with &lt;code&gt;boolean&lt;/code&gt; expression &amp;ndash; indirectly used all three components you saw in the general for loop syntax. So, why not put all of them together and see another example.&lt;/p&gt;
&lt;h2 id=&#34;for-loop-with-an-initializer-condition-and-post-statement&#34;&gt;For loop with an initializer, condition, and post statement&lt;/h2&gt;
&lt;p&gt;Here is an example of what you have seen in the general syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; num := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;; num &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;; num++ {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; num%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, num)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, num)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the above example, using all components essentially eliminates the need for a separate initialization and post increment. But, the result is same as the earlier example with just &lt;code&gt;boolean&lt;/code&gt; expression as a part of &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;h2 id=&#34;for-loop-over-a-range&#34;&gt;For loop over a range&lt;/h2&gt;
&lt;p&gt;The final variant of for loop is iterate over a range of values. You may have an array or slice of integers or even a map of key value pairs. If you need to iterate over those values, you can use this variant of the &lt;code&gt;for&lt;/code&gt; loop in Go language.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; i, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; v%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; at index &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, v, i)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; at index &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, v, i)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the for loop used shorthand declaration to initialize two values &amp;ndash; &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;. But, you may ask. Isn&amp;rsquo;t that a simple array? Yes, it is. But, when you iterate over an array using range, it returns two values &amp;ndash; index of the element and the value at that index. Therefore, the above example uses two variables &amp;ndash; &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;. Since Go does not allow you to declare a variable and not use it, the print statements in the subsequent code refer to both these variables. But, what if you want to ignore the index value? Simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; v%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an even number&amp;#34;&lt;/span&gt;, v)
		} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n &amp;#39;%d&amp;#39; is an odd number.&amp;#34;&lt;/span&gt;, v)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, instead using two variables, the for loop used an underscore character (_) to ignore the value of index coming from &lt;code&gt;range&lt;/code&gt;. This is called a blank identifier in Go.&lt;/p&gt;
&lt;p&gt;You can use the above method to iterate over a slice or even string as well.&lt;/p&gt;
&lt;p&gt;Here is an example that shows how to iterate over a map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; k, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n%d ==&amp;gt; %s&amp;#34;&lt;/span&gt;, k, v)
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case of a map value, instead of index, you get the key and value. In the above example, the variables &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; represent key and value coming from the map.&lt;/p&gt;
&lt;h2 id=&#34;continue&#34;&gt;Continue&lt;/h2&gt;
&lt;p&gt;In one of the previous examples, you looked at how to break out of a loop based on a condition. But, what if you just want to skip to the next iteration instead? This is where the &lt;code&gt;continue&lt;/code&gt; keyword is helpful. In the following example, the loop simply continues to the next element in the array on encountering an even number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;}
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;range&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; v%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;continue&lt;/span&gt;
		}

		fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\n%d is an odd number.&amp;#34;&lt;/span&gt;, v)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this code, whenever &lt;code&gt;v&lt;/code&gt; is an even number, you will see that the print statement gets skipped and the execution goes to the next element in the iteration and therefore printing only odd numbers between 1 and 10. So, whenever execution reaches to the &lt;code&gt;continue&lt;/code&gt; statement, the rest of the statements in the loop body get skipped and loop continues to the next iteration.&lt;/p&gt;
&lt;h2 id=&#34;nested-loops&#34;&gt;Nested loops&lt;/h2&gt;
&lt;p&gt;Similar to nested &lt;code&gt;if&lt;/code&gt; statements, you can nest &lt;code&gt;for&lt;/code&gt; loops too in Go language. Here is a very example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;//OuterLoop:
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; x := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; x++ {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; y := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; y &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;; y++ {
			fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;x=%v, y=%v\n&amp;#34;&lt;/span&gt;, x, y)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can nest any variants of &lt;code&gt;for&lt;/code&gt; loop seen in the above examples.&lt;/p&gt;
&lt;p&gt;This is it for this part of the series. In the next part, you will learn about labels in Go language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Condition statements in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-condition-statements-in-go-language/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-condition-statements-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With what you learned about basic data types and structs in this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series so far&lt;/a&gt;, you are now ready to look at the branching constructs in Go language. You may have used branching constructs such as &lt;code&gt;if..else if..else&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt; statements in other languages. Go language too offers these constructs.&lt;/p&gt;
&lt;h2 id=&#34;if--else-if--else&#34;&gt;If .. else if .. else&lt;/h2&gt;
&lt;p&gt;If construct in any programming language is a branching construct and moves the execution from one place in the code to another based on a condition. Go language is no exception.&lt;/p&gt;
&lt;p&gt;The general syntax of if statement in Go language is as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; condition {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// code	
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; condition {
    &lt;span style=&#34;color:#007f7f&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#007f7f&#34;&gt;// code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the code in the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt; blocks to execute, the condition must evaluate to &lt;code&gt;true&lt;/code&gt;. If none of the conditions in the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt; do not evaluate to true, the code in &lt;code&gt;else&lt;/code&gt; gets executed. The &lt;code&gt;else if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks are optional. As with other types of command blocks in Go, all opening brackets must be on the same line as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a is greater than 10&amp;#34;&lt;/span&gt;)
	} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a is less than 10&amp;#34;&lt;/span&gt;)
	} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a is equal to 10&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, the &lt;code&gt;Println&lt;/code&gt; statement in the &lt;code&gt;else&lt;/code&gt; block will execute since the variable &lt;code&gt;a&lt;/code&gt; is initialized to a value 10. The first and second conditions will evaluate to &lt;code&gt;false&lt;/code&gt; and therefore the control goes into the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;
&lt;h2 id=&#34;assignment-in-a-comparison&#34;&gt;Assignment in a comparison&lt;/h2&gt;
&lt;p&gt;As a part of the if construct you can perform variable declaration and initialization as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;; a%&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10 is an even number&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What you have seen in the above example, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;==&lt;/code&gt;, are just two of the available comparison operators in Go language.&lt;/p&gt;
&lt;h2 id=&#34;comparison-operators&#34;&gt;Comparison Operators&lt;/h2&gt;
&lt;p&gt;There are different comparison operators you can in use in Go language. These operators compare two operands and return a boolean value &amp;ndash; &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. While using any comparison operator, both operands must be of the same type. For example, you can compare an integer to a float without explicitly casting one of the operand.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;td&gt;Equality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;td&gt;Equality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;Less than or equal to&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;Greater than or equal to&lt;/td&gt;
&lt;td&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The equality operators from the above table apply to types that are comparable. Booleans, integers, strings, arrays, structs, complex numbers, and floating point values are all comparable in addition to a few more types such as channels and interfaces that you will learn in the future. Slices and maps are not comparable types.&lt;/p&gt;
&lt;p&gt;The second type of operators, ordering operators, can be used only with types that can be ordered. Ordering operators cannot be used with structs, pointers, arrays, complex numbers, booleans, interfaces, and channels. So, that essentially leaves you with integers, strings, and floating point values.&lt;/p&gt;
&lt;p&gt;Go language allows chaining different comparisons using logical operators.&lt;/p&gt;
&lt;h2 id=&#34;logical-operators&#34;&gt;Logical Operators&lt;/h2&gt;
&lt;p&gt;With the logical operators the operands are always boolean values and return a boolean result.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp; (AND)&lt;/td&gt;
&lt;td&gt;if a &amp;amp;&amp;amp; b {}&lt;/td&gt;
&lt;td&gt;Evaluates to true only if both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|| (OR)&lt;/td&gt;
&lt;td&gt;if a || b {}&lt;/td&gt;
&lt;td&gt;Evaluates to true if any of operands &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;! (NOT)&lt;/td&gt;
&lt;td&gt;if !a&lt;/td&gt;
&lt;td&gt;Evaluates to true if a is false.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Take a look at this example that uses the logical operators along with &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value between 2 and 9&amp;#34;&lt;/span&gt;)
	} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; a &amp;gt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt; {
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value greater than or equal to 10 and less than or equal to 20&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you have multiple conditions to evaluate and take an action, the typical if construct may become too long. This is where many programming languages, including Go, provide the &lt;code&gt;switch&lt;/code&gt; construct.&lt;/p&gt;
&lt;h2 id=&#34;switch&#34;&gt;Switch&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; statement evaluates an expression and compares the result against a few possible matches defined within the &lt;code&gt;switch&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;The general syntax for writing a switch construct is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; &amp;lt;expression&amp;gt; {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;expr1&amp;gt;: 
        &lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &amp;lt;expr2&amp;gt;:
        &lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
        &lt;span style=&#34;color:#007f7f&#34;&gt;//code
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the above syntax, the &lt;code&gt;switch&lt;/code&gt; statement is followed by an expression. This can be a simple variable or an expression that evaluates to a value that can be looked up in the possible matches in a &lt;code&gt;switch&lt;/code&gt; block. You can have any number of cases to match. These cases must all be unique. The &lt;code&gt;default&lt;/code&gt; block gets executed when no other cases match. Default is optional.&lt;/p&gt;
&lt;p&gt;Here is a full example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; a {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a is 20&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;30&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a is 30&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a is 10&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
			fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of a did not match any cases above&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, the third case gets evaluated and &amp;ldquo;Value of a is 10&amp;rdquo; gets printed. The case statement can have multiple expressions as well. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	string1 := &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; string1 {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;u&amp;#34;&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Supplied string is an vowel&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Supplied string is not an vowel&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike other languages, Go does not allow an automatic fall through. If you need a fall through execution of all subsequent case blocks, you need to explicitly specify that using the &lt;code&gt;fallthrough&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;56&lt;/span&gt;; {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 50&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;fallthrough&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 100&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;fallthrough&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;150&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 150&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;fallthrough&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;200&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;a is less than 200&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this program, variable &lt;code&gt;a&lt;/code&gt; is getting declared and initialized as a part of the &lt;code&gt;switch&lt;/code&gt; statement expression. In the &lt;code&gt;case&lt;/code&gt; statements, there are checks to see if the value if less than 50, 100, 150, and 200. If the value of variable &lt;code&gt;a&lt;/code&gt; is less than 50, all other cases will evaluate to &lt;code&gt;true&lt;/code&gt;. In such a scenario, all other case statements will have to be executed as well. This is where &lt;code&gt;fallthrough&lt;/code&gt; keyword plays a role.&lt;/p&gt;
&lt;p&gt;When you execute the above program, you will see the following output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
a is less than &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;
a is less than &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;150&lt;/span&gt;
a is less than &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you may ask about how the one of the examples that demonstrated the &lt;code&gt;if&lt;/code&gt; statement can be translated to use &lt;code&gt;switch&lt;/code&gt; construct. One way is what you already seen in the above example. An alternate way is to use expressionless &lt;code&gt;switch&lt;/code&gt; construct. Here is how it is done.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;21&lt;/span&gt;
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;switch&lt;/span&gt; {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value between 2 and 9&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;case&lt;/span&gt; a &amp;gt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; &amp;amp;&amp;amp; a &amp;lt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Varible a has a value greater than or equal to 10 and less than or equal to 20&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;default&lt;/span&gt;:
		fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Variable a is greater than 20&amp;#34;&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, there is no expression associated with the &lt;code&gt;switch&lt;/code&gt; statement. Instead, we have expressions matching at the &lt;code&gt;case&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;This brings this part to an end. In the next part of this series, you will learn about loops in Go language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Structs in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-structs-in-go-language/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-structs-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;So far in this series, you learned about different built-in data types such as integers, strings, floats, arrays, slices, maps, and pointers. All of these allow only one type of data. All elements in the array have to of the same time. All keys and values have to be of the same type. What if you have need to combine multiple types and create a custom type for your programs? This is where structs play a role in Go language.&lt;/p&gt;
&lt;h2 id=&#34;structs&#34;&gt;Structs&lt;/h2&gt;
&lt;p&gt;A struct in Go language is a user-defined data type which is essentially a collection of different types. For example, when describing information about a computer in a data structure, you will describes the properties of a computer such as Model, serial number, amount of physical memory, number of processor cores, size of the hard drive and so on. When you have to create a such a data structure, other programming languages that implement true object oriented programming (OOP) concepts have classes. However, Go is not a true OOP language. Instead, Go offers something closer with the help structs. What an OOP language supports &amp;ndash; such as inheritance and polymorphism &amp;ndash; out of the box can be done in Go by working around a few things but it still won&amp;rsquo;t be true object oriented.&lt;/p&gt;
&lt;p&gt;The syntax to declare struct user-defined data type is as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; &amp;lt;name-of-custom-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		field1-Name field1-Type
		field2-Name field2-Type
		...
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take a look at this example to understand how you can implement a custom data type using the above syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	cmp1 := computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example, declared a struct named &lt;code&gt;computer&lt;/code&gt; and added five fields to it. Then, we created a struct &lt;code&gt;cmp1&lt;/code&gt; of the type &lt;code&gt;computer&lt;/code&gt; by specifying each field name and an associated value separated by a colon (:). If you prefer, you can totally eliminate specifying the field names. For example, &lt;code&gt;cmp1 := {&amp;quot;SuperComputer10&amp;quot;, &amp;quot;SCOMP123&amp;quot;, 96, 8, 5}&lt;/code&gt; is totally valid as well but does not have convey how the values are associated to field names except the order in which they are specified.&lt;/p&gt;
&lt;p&gt;Finally, when you print a struct, it just prints the values you specified while creating the struct. You can retrieve a specific field value buy using the reference (.) operator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	cmp1 := computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(cmp1.model)
    fmt.Println(cmp1.memoryInGB)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While it is always possible to assign values to all fields while creating the struct, it is not mandatory. You can always create zero valued struct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; cmp1 computer
	fmt.Println(cmp1)

	cmp1.model = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;
	cmp1.serialNumber = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;
	cmp1.memoryInGB = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;
	cmp1.numProcCores = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;
	cmp1.diskCapacityInTB = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run the above program, the first &lt;code&gt;Println&lt;/code&gt; will print the zero values of fields in the struct based on their data types. The second &lt;code&gt;Println&lt;/code&gt; will print the assigned values.&lt;/p&gt;
&lt;h3 id=&#34;anonymous-structs&#34;&gt;Anonymous structs&lt;/h3&gt;
&lt;p&gt;In the examples so far, we declared a user-defined data type and have given it a name. We then used it to create a struct and initialized it with field values. However, it is possible to create structs without a name defined. Here is how you do that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	cmp1 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What you defined above as a struct, &lt;code&gt;cmp1&lt;/code&gt;, is called an anonymous struct variable. And, similar to this, you can defined anonymous struct fields also.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	cmp1 := computer{
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;:    &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the user-defined type &lt;code&gt;computer&lt;/code&gt; has only two fields &amp;ndash; &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt;. Unlike our earlier example that has named fields, you have multiple fields of the same data type when using anonymous fields in a struct.&lt;/p&gt;
&lt;h2 id=&#34;nested-structs&#34;&gt;Nested Structs&lt;/h2&gt;
&lt;p&gt;Go allows adding user-defined struct data types as a field within another struct. Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; os &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		version &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		build   &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		operatingSystem os
	}

	cmp1 := computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;,
		opeatingSystem: os{
			version: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Windows 10&amp;#34;&lt;/span&gt;,
			build:   &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2009&lt;/span&gt;,
		},
	}

	fmt.Println(cmp1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the struct named &lt;code&gt;os&lt;/code&gt; declares a user-defined data type containing version and build as the fields. In the computer type declaration, you can simply added a new field called &lt;code&gt;operatingSystem&lt;/code&gt; and assigned it the type &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The nested fields from the struct can be accessed by following the complete field path. For example, &lt;code&gt;cmp1.operatingSystem.version&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;struct-pointers&#34;&gt;Struct Pointers&lt;/h2&gt;
&lt;p&gt;In a previous part of this series, you learned about pointers where you have only seen integer and string pointers. You can create struct pointers as well. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; os &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		version &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		build   &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	}

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; computer &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
		model            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		serialNumber     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;
		memoryInGB       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		numProcCores     &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		diskCapacityInTB &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		operatingSystem  os
	}

	cmp1 := &amp;amp;computer{
		model:            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SuperComputer10&amp;#34;&lt;/span&gt;,
		serialNumber:     &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;SCOMP123&amp;#34;&lt;/span&gt;,
		memoryInGB:       &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;96&lt;/span&gt;,
		numProcCores:     &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;,
		diskCapacityInTB: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;,
		operatingSystem: os{
			version: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Windows 10&amp;#34;&lt;/span&gt;,
			build:   &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2009&lt;/span&gt;,
		},
	}

	fmt.Println(*cmp1)
	fmt.Println((*cmp1).operatingSystem.version)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The process of creating a pointer to a struct is similar to the other data types. The only difference is in how you dereference the value of a struct. You can see that in the &lt;code&gt;Println&lt;/code&gt; statements towards the end of the program.&lt;/p&gt;
&lt;p&gt;This is it for today. You will learn more about adding methods to structs and using structs in a more meaningful way than these trivial examples. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Maps in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-maps-in-go-language/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-maps-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you learned about pointers in Go language. In this part, you will learn about maps in Go language. Maps are another built-in data type in Go and maps store key-value pairs. This is like dictionaries in other programming languages.&lt;/p&gt;
&lt;h2 id=&#34;maps&#34;&gt;Maps&lt;/h2&gt;
&lt;p&gt;First, look at the below example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; m1 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
	fmt.Println(m1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, variable m1 is of map data type and declares an empty map. When you run this, all you will see is &lt;code&gt;map[]&lt;/code&gt;. The zero value of map keys will be &lt;code&gt;nil&lt;/code&gt; and therefore this will be called a nil map. Maps store key-value pairs. So, if we generalize the syntax from the above example, it will be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var &amp;lt;variable-name&amp;gt; map[&amp;lt;key-data-type&amp;gt;]&amp;lt;value-data-type&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Keys in a map can be of any comparable type &amp;ndash; Boolean, integer, float, string, complex, and so on.&lt;/p&gt;
&lt;p&gt;In the key-value pairs that you want to store, all keys have to be of the same data type and all values should also be. In the example above, all keys will have to of &lt;code&gt;string&lt;/code&gt; type and all values should be of &lt;code&gt;int&lt;/code&gt; type. Also, keys should be unique within a map.&lt;/p&gt;
&lt;p&gt;Now, since you have just created a nil map, how do you add key-value pairs or elements to this map?&lt;/p&gt;
&lt;h3 id=&#34;adding-key-values&#34;&gt;Adding Key Values&lt;/h3&gt;
&lt;p&gt;When you create a map using the example above, it creates a nil map which is equivalent to empty map but no elements can be added to it. If you indeed attempt something like &lt;code&gt;m1[&amp;quot;Go&amp;quot;] = 1&lt;/code&gt; you will see a panic. The following example shows how to initialize an empty map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;)

	m2[&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;
	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the example here, you need to use the built-in &lt;code&gt;make&lt;/code&gt; function to declare and initialize the map. Once this is done, you can use the simple assignment syntax to add elements to the map.&lt;/p&gt;
&lt;p&gt;Updating elements in a map is again same as how you added the element using assignment. So, by using &lt;code&gt;m2[&amp;quot;Go Language&amp;quot;] = 10&lt;/code&gt;, you will update the value associated with that key.&lt;/p&gt;
&lt;p&gt;What if you have lot of items to add to a map? Do you need to perform assignment for each item? No, there is a better way to initialize the map like arrays and slices.&lt;/p&gt;
&lt;h3 id=&#34;initialize-during-declaration&#34;&gt;Initialize during declaration&lt;/h3&gt;
&lt;p&gt;You can add values to a map while declaring the map. Here is the generic syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;variable-name&amp;gt; := map[&amp;lt;key-type&amp;gt;]&amp;lt;value-type&amp;gt;{ &amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;, &amp;quot;key&amp;quot; : &amp;quot;value&amp;quot;}&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;length of map&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(m2))
	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple. Observe the trailing comma after the last item. This is needed since Go treats newline as end of statement. As shown in the example, you can use the built-in &lt;code&gt;len()&lt;/code&gt; function to retrieve the length or number of elements in a map.&lt;/p&gt;
&lt;p&gt;If you want to retrieve a single element value from the map, you can do that simply by referencing the correct key name.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;m2[&amp;quot;PowerShell&amp;quot;]&lt;/code&gt; will return it&amp;rsquo;s value 2. When you reference a non-existing key, you will simply get the zero value based on the type of the value specified during declaration. So, in this example, if you try &lt;code&gt;m2[&amp;quot;Rust&amp;quot;]&lt;/code&gt;, you will get 0 as the value. This is not always desired as the subsequent statements in the program might assume that 0 is a real value.&lt;/p&gt;
&lt;p&gt;So, how do you check if a key exists in the map or not?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}

	value, exists := m2[&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;]
	fmt.Println(value, exists)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;when you query for a non-existing key within a map, it will return both associated value and a Boolean value representing whether the key exists or not. Therefore, when you want to check if a key exists in a map or not, you should always use the method shown above. If you are only interested in verifying the key existence, you can ignore the value returned by using syntax as shown below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_, exists := m2[&amp;quot;Rust&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;delete-items&#34;&gt;Delete items&lt;/h3&gt;
&lt;p&gt;You can use the built-in &lt;code&gt;delete()&lt;/code&gt; function to delete items from a map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}

	fmt.Println(m2)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;delete&lt;/span&gt;(m2, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;)
	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;item-ordering&#34;&gt;Item ordering&lt;/h3&gt;
&lt;p&gt;You need to understand that maps in Go language are unordered. So, the order in which you add or initialize elements may not be the same when you retrieve or iterate over items in the map. Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;:        &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;:         &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;,
	}

	fmt.Println(m2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, the order of items printed towards the end may not be same as the order in which they were initialized or added to the map.&lt;/p&gt;
&lt;p&gt;Similar to slices, maps are also reference types. Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	m2 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;,
		&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
	}

	m3 := m2

	m3[&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Map m2&amp;#34;&lt;/span&gt;, m2)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Map m3&amp;#34;&lt;/span&gt;, m3)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this program, you will see the same number of items printed for both maps. This is because maps are reference types. When you assign one map to another, all changes done to one map will be made in the other map as well.&lt;/p&gt;
&lt;p&gt;Alright. This is all about basics of maps in Go language. You will learn more about using maps later in this series. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Pointers in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-pointers-in-go-language/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-pointers-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you learned about slices in Go language. Slices, unlike arrays, allow flexibility and certainly are the most used compared to arrays in Go language. Towards the end of the article on slices, you learned that slices are essentially references to an underlying array and any changes made to the slice will reflect in the underlying array as well. In this article, you shall learn about another reference type called pointers in Go language.&lt;/p&gt;
&lt;h2 id=&#34;pointers&#34;&gt;Pointers&lt;/h2&gt;
&lt;p&gt;Pointers in Go, like other languages, hold the memory address of a value. First, an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	b := &amp;amp;a

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of a is&amp;#34;&lt;/span&gt;, a)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of b is&amp;#34;&lt;/span&gt;, b)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at b is&amp;#34;&lt;/span&gt;, *b)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first variable declaration and initialization in the above example is already known. It is a simple integer. The line where variable b is declared is special. On the right-hand side, using &amp;amp; prefix tells Go that you want to store the memory location of the value represented by variable a. &amp;amp; is called the addressOf operator. So, variable b gets the memory address of variable a. In the last line, the asterisk (*) dereferences the value at variable b and therefore it is called the dereferencing operator.&lt;/p&gt;
&lt;p&gt;This should be clear if you run this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;pointers.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
value of a is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
value of b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0xc000012090&lt;/span&gt;
value at b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second output shows the value stored in variable b which is the memory address of variable a. And, the last line in the output shows the value at the memory address represented by variable b which is the value of variable a &amp;ndash; 10.&lt;/p&gt;
&lt;p&gt;Since variable b is the address of value represented variable a, you cannot assign another integer value to b directly. Instead, you dereference and then assign a value which changes the value of variable a.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	b := &amp;amp;a

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of a is&amp;#34;&lt;/span&gt;, a)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of b is&amp;#34;&lt;/span&gt;, b)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at b is&amp;#34;&lt;/span&gt;, *b)

	*b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of b is&amp;#34;&lt;/span&gt;, b)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value of a is&amp;#34;&lt;/span&gt;, a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this above example, you will see output similar to what is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;pointers.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
value of a is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
value of b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0xc000012090&lt;/span&gt;
value at b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
value of b is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0xc000012090&lt;/span&gt;
value of a is &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you observe the output, the memory address stored in variable b itself does not change but the value assigned to variable gets updated to 20. This is good but are there other methods we can declare pointers in Go language?&lt;/p&gt;
&lt;p&gt;The regular variable declaration syntax works for variables as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var b *int = &amp;amp;a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above method is just an expanded form of what you learned in the first example. In this expanded form, there is explicit declaration of pointer type which is &lt;code&gt;*int&lt;/code&gt; in this case or you can call it an integer pointer. You can skip the initialization part and just declare an integer pointer. In such as case the zero value of a pointer will be set to &lt;code&gt;nil&lt;/code&gt; and you cannot dereference until you assign a value.&lt;/p&gt;
&lt;h3 id=&#34;using-new-function&#34;&gt;Using new function&lt;/h3&gt;
&lt;p&gt;When you use the built-in &lt;code&gt;new&lt;/code&gt; function to declare and initialize a variable, you get a pointer to its memory address. Take a look at the below example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	a := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;println&lt;/span&gt;(a)
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;println&lt;/span&gt;(*a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this, the first &lt;code&gt;println&lt;/code&gt; will print the memory address and when you dereference it&amp;rsquo;s value, you will see a zero value.&lt;/p&gt;
&lt;p&gt;This is just an introduction to pointers in Go language and you will learn more about the use cases of pointers when we discuss functions and other advanced concepts. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Slices in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-slices-in-go-language/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-slices-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you learned about arrays in Go language. As you have learned, arrays have a fixed size and therefore you cannot resize (grow or shrink) arrays. This limitation can be overcome using &lt;a href=&#34;https://golang.org/ref/spec#Slice_types&#34;&gt;slices&lt;/a&gt; in Go language. In this part, you will learn about slices and how to use this data type in your Go programs.&lt;/p&gt;
&lt;h2 id=&#34;slices&#34;&gt;Slices&lt;/h2&gt;
&lt;p&gt;A slice in Go language is a slice of an underlying array! Yes, no pun intended. 😊&lt;/p&gt;
&lt;p&gt;Here is how the Go language specification describes slices. &lt;em&gt;A slice is a descriptor for a contiguous segment of an underlying array and provides access to a numbered sequence of elements from that array.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are different ways to declaring and initializing slices in Go language.&lt;/p&gt;
&lt;h3 id=&#34;slice-literal&#34;&gt;Slice literal&lt;/h3&gt;
&lt;p&gt;The syntax for declaring a variable as a slice is &lt;code&gt;var s1 = []int{1,2}&lt;/code&gt;. This declare a slice of integers and initializes with two elements. This is similar to how you declared array variables. The only difference is that there is no size specification. You can avoid any values in the declaration to create an empty slice of integers. For example,  &lt;code&gt;var s2 = []int{}&lt;/code&gt;. However, you cannot add elements (to an empty slice or at an index that is out of bound) using the indexer syntax. For example, specifying &lt;code&gt;s2[0]= 100&lt;/code&gt; will result in an error. The indexer method works only when updating an existing element at a specific index in the slice. To add elements to an empty slice, you need use the built-in &lt;code&gt;append()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Here is a quick example that shows both these methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s1 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;}
	s1[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	fmt.Println(s1)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s2 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{}
	s2 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;)
	s2 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s2, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;200&lt;/span&gt;)
	fmt.Println(s2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With slices, unlike arrays, you can append elements. This essentially changes the size of the slice. You can use the &lt;code&gt;len()&lt;/code&gt; built-in function to find the current number of elements and the &lt;code&gt;cap()&lt;/code&gt; function to find the maximum capacity of the slice. Review the below example to understand the difference between length and capacity in-depth.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s1 = []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Initial len and cap&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 3rd element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 4th element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))

	s1 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s1, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;len and cap after adding 5th element&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s1), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s1))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this, you will see the following output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;PS C:&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\G&lt;/span&gt;itHub&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\G&lt;/span&gt;etSetGo&amp;gt; go run .&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\s&lt;/span&gt;lices.go
Initial len and cap &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;
len and cap after adding 3rd element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;
len and cap after adding 4th element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;
len and cap after adding 5th element &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you observe the above output, the initial length and capacity of the slice is what you initialized it to &amp;ndash; with two elements. After adding a third element, the capacity changed to 4 and stayed as 4 even after the adding the 4th element. However, the moment the 5th element gets added, the capacity of the slice jumps to 8. So, what is happening here?&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;append&lt;/code&gt; function, whenever you add an element, if the length exceeds the current capacity of the slice, Go simply doubles the capacity. So, when we added the 3rd element, the capacity doubled to 4 and then we added the 5th element, it doubled to 8.&lt;/p&gt;
&lt;h3 id=&#34;using-make&#34;&gt;Using Make&lt;/h3&gt;
&lt;p&gt;Slices can also be declared and initialized using the &lt;code&gt;make&lt;/code&gt; built-in function. The syntax for using make to create a slice is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; name = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;(slice-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;, slice-length, slice-capacity)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is an example that uses &lt;code&gt;make&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s3 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;)
	s3[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;
	s3[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;
	s3 = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;append&lt;/span&gt;(s3, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;)

	fmt.Println(s3, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(s3), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cap&lt;/span&gt;(s3))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the last integer value that is used to specify the capacity of the slice is optional. By default, the capacity will be same as length. The code in the above example creates a slice with length of 2 and capacity of 4. And, observe how the 3rd element is added. You have to use the append function since adding the 3rd element exceeds the length specified when using &lt;code&gt;make&lt;/code&gt; function. This behavior is different from what you seen above with append method on a slice created using slice literal syntax.&lt;/p&gt;
&lt;h3 id=&#34;slicing-arrays&#34;&gt;Slicing arrays&lt;/h3&gt;
&lt;p&gt;Yet another method of creating a slice is to slice an existing array! Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; languages = [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Elements in the string array are&amp;#34;&lt;/span&gt;, languages)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; langSlice = languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the derived slice are&amp;#34;&lt;/span&gt;, langSlice)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nSlicing without a start index is similar to using start index 0&amp;#34;&lt;/span&gt;, languages[:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;])
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nSlicing without an end index gets all elements from start_index till end of the array&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;:])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the &lt;code&gt;languages&lt;/code&gt; array has six elements. A slice of these elements &amp;ndash; from index 0 to 2 &amp;ndash; is assigned to the variable &lt;code&gt;langSlice&lt;/code&gt;. This variable is of slice data type. In the variable assignment, you have specified the the slice as start_index:end_index in square brackets. In this specification,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The end_index in excluded. So, when the indexes specified are 0 and 2, the resulting slice will have elements from index 0 and 1 but not 2.&lt;/li&gt;
&lt;li&gt;Both start_index and end_index are optional. So, for example, if you specify [:3], the first three elements from the array. If you specify [4:], elements from index 4 till the end of the array get assigned to the slice. Finally, skipping both &amp;ndash; [:] &amp;ndash; will simply return all elements from the array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You learned in an earlier part of this series that slices are reference types. This means that when you update an element in the slice the element in the underlying array gets updated as well.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; languages = [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Elements in the string array are&amp;#34;&lt;/span&gt;, languages)

	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; langSlice = languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the derived slice are&amp;#34;&lt;/span&gt;, langSlice)

	langSlice[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the updated slice are&amp;#34;&lt;/span&gt;, langSlice)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;\nElements in the underlying array are&amp;#34;&lt;/span&gt;, languages)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this above example, you will see output similar to what is shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;PS C:&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GitHub&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;GetSetGo&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; run .&lt;span style=&#34;color:#f00&#34;&gt;\&lt;/span&gt;slices.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
Elements in the &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt; array are [Go Python Rust Java C&lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; PowerShell]

Elements in the derived slice are [Go Python]

Elements in the updated slice are [Go C++]

Elements in the underlying array are [Go C++ Rust Java C&lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; PowerShell]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, once you update an element in the derived slice, the underlying array also gets updated. This brings us to the discussion around pointers in Go language which is the subject of next part in this series.&lt;/p&gt;
&lt;p&gt;Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Arrays in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-arrays-in-go-language/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-arrays-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the earlier part of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you looked at types in Go language and learned about the basic data types &amp;ndash; int, float, and strings. You also learned about other categories of data types such as aggregate types, reference types, and interface types. In the next subsequent parts, you will dive into each of these different types.&lt;/p&gt;
&lt;h2 id=&#34;aggregate-types&#34;&gt;Aggregate Types&lt;/h2&gt;
&lt;p&gt;Aggregate types in Go language include &lt;a href=&#34;https://golang.org/ref/spec#Array_types&#34;&gt;arrays&lt;/a&gt; and &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34;&gt;structs&lt;/a&gt;. These data types are formed by combining basic data types. Learning structs will require knowledge of a few more things about Go language and Go types. You will learn about that soon. In today&amp;rsquo;s part, you will learn about arrays.&lt;/p&gt;
&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;
&lt;p&gt;An array in Go language is a &lt;strong&gt;fixed-length&lt;/strong&gt; sequence of &lt;strong&gt;homogeneous&lt;/strong&gt; elements in the memory. There is emphasis on two words in the previous sentence &amp;ndash; fixed-length and homogeneous. The length of the array is decided at the time of declaration. You cannot change it runtime and therefore fixed-length. And, an array can only be used store elements of the same data type and that is the homogeneous part in the definition. The number of elements in the array is called the length of the array and it will be an integer that is either zero or more than zero.&lt;/p&gt;
&lt;p&gt;The method to define/declare an array in Go is similar to that of a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt;variable_name&amp;gt; [SIZE] &amp;lt;variable_type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see in the above syntax, size is a part of the array declaration. So, for example, &lt;code&gt;var names [4] string&lt;/code&gt; will declare an array of fixed-length 4 to store values of string data type. The size must be an integer greater than zero. You can access the array elements using the index operator and the index always starts at zero and goes up to index of last element - 1. The built-in &lt;code&gt;len&lt;/code&gt; function can be used to find the length of the array. Therefore, the index of the last element can be derived using &lt;code&gt;len(arrayName) - 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; names [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// elements get initialized to a zero value based on type
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// set a value at an index
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, names[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(names)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of names array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, names[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As shown in the above example, using the index operator gives you the value at that index and you can assign / update a value at a given array index. Using this method of assigning values can be tedious and error-prone if you have a larger array. You can initialize arrays in a way similar to how variables of basic types are initialized during declaration or using shorthand form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; variable_name = [SIZE]&amp;lt;variable_type&amp;gt;{item1, item2, item3, ...itemN}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;var names = [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt; will declare and initialize the names array. The number of values you specify within the curly brackets should be equal to the size of the array specified within square brackets. You can avoid specifying the size of the array too &amp;ndash; &lt;code&gt;var languages = [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt;. The number of values specified in the initialization will be used to set the size of the array.&lt;/p&gt;
&lt;p&gt;And, finally, within a function, you can always use the shorthand declaration. For example, &lt;code&gt;languages := [4]string{&amp;quot;Go&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;PowerShell&amp;quot;, &amp;quot;Rust&amp;quot;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	languages := []&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Rust&amp;#34;&lt;/span&gt;}
    fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;All elements in the array are&amp;#34;&lt;/span&gt;, languages)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(languages)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of languages array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, languages[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whatever you have seen so far are single-dimension arrays. You can create multi-dimension arrays too in Go language. The syntax for that is not too different from what you have already tried. You just have to add multiple size values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; &amp;lt;variable-name&amp;gt; = [SIZE1][SIZE2][SIZEn]&amp;lt;variable-&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt;&amp;gt;{{values1},{values2},{valuesn}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for example, &lt;code&gt;var languages = [2][2]string{{&amp;quot;Go&amp;quot;,&amp;quot;PowerShell&amp;quot;},{&amp;quot;English&amp;quot;, &amp;quot;Spanish&amp;quot;}}&lt;/code&gt; will declare a two-dimensional array. Notice the curly brackets around the value specification in the array declaration. You can access the array elements in a multi-dimensional array by specifying multiple indices. For example, &lt;code&gt;languages[0][0]&lt;/code&gt; will result in the value Go retrieved from the array. If you specify only one index, Go will present the entire set of elements at the dimension that matches the index.&lt;/p&gt;
&lt;p&gt;Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	languages := [&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;{{&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;}, {&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;PowerShell&amp;#34;&lt;/span&gt;}}
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at index 0 is&amp;#34;&lt;/span&gt;, languages[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;])

	&lt;span style=&#34;color:#007f7f&#34;&gt;// get length of the array
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; l = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(languages)

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Length of languages array is&amp;#34;&lt;/span&gt;, l)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;value at last index is&amp;#34;&lt;/span&gt;, languages[l-&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the length of the languages array is 2. It is the number of dimensions and not the total number of elements.&lt;/p&gt;
&lt;p&gt;So far, you have learned about arrays in Go language. To summarize,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrays in Go are fixed-length and can contain elements of the same data type&lt;/li&gt;
&lt;li&gt;Arrays in Go can either be single or multi dimensional.&lt;/li&gt;
&lt;li&gt;Arrays in Go can neither be resized nor a sub-array can be retrieved&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point can be addressed using slices in Go language. And, that is the next part of this series.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Types in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-types-in-go-language/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-types-in-go-language/</guid>
      <description>&lt;p&gt;After looking at variables in the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-variables-in-go-language/&#34;&gt;previous part&lt;/a&gt; of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you have a fair understanding of using different types of variable declarations and using the variable values in your program. Each of these variables you created and used have an associated type. The type of a variable dictates what that variable is allowed store. So, what are different data types in Go language? You will learn that today!&lt;/p&gt;
&lt;h2 id=&#34;data-types-in-golang&#34;&gt;Data types in Golang&lt;/h2&gt;
&lt;p&gt;Go language has several built-in data types and these types can be classified into three different categories &amp;ndash; basic data types, aggregate data types, reference types, and interface types.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Included types&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Basic data types&lt;/td&gt;
&lt;td&gt;Numerals, Strings, and Booleans&lt;/td&gt;
&lt;td&gt;Data types that form the basis or included in other data types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aggregate data types&lt;/td&gt;
&lt;td&gt;Arrays and Structs&lt;/td&gt;
&lt;td&gt;Formed by combining the basic and simple data types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reference types&lt;/td&gt;
&lt;td&gt;Slices, Functions, Pointers, and Channels&lt;/td&gt;
&lt;td&gt;Refer indirectly to state or program variables&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interface types&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Abstractions around behavior of other types&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this part, you will learn about basic data types and you will learn about other types as you proceed in this series.&lt;/p&gt;
&lt;h2 id=&#34;basic-data-types&#34;&gt;Basic data types&lt;/h2&gt;
&lt;p&gt;In the last chapter, some of the examples used variables of &lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;boolean&lt;/code&gt; data types. To recap, &lt;code&gt;var &amp;lt;variable-name&amp;gt; &amp;lt;data-type&amp;gt; = &amp;lt;value | expression&amp;gt;&lt;/code&gt; is how you declare variables. You learned that the variable declaration can either use static type declaration or the type can be determined based on the value assigned to the variable. The three types mentioned here fall in the category of basic data types. The following sections dive into each of these basic data types.&lt;/p&gt;
&lt;h3 id=&#34;numerals&#34;&gt;Numerals&lt;/h3&gt;
&lt;p&gt;Go language supports &lt;a href=&#34;https://golang.org/ref/spec#Numeric_types&#34;&gt;different types to represent numbers&lt;/a&gt;. You can at a high-level categorize these into integers, floating point numbers, and complex numbers. Each of these types represent the size of the value that can be stored within a variable of that type. And, these types can be both signed and unsigned.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Possible values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;unsigned  8-bit integers&lt;/td&gt;
&lt;td&gt;0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint16&lt;/td&gt;
&lt;td&gt;unsigned 16-bit integers&lt;/td&gt;
&lt;td&gt;0 to 65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;td&gt;unsigned 32-bit integers&lt;/td&gt;
&lt;td&gt;0 to 4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint64&lt;/td&gt;
&lt;td&gt;unsigned 64-bit integers&lt;/td&gt;
&lt;td&gt;0 to 18446744073709551615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;signed 8-bit integers&lt;/td&gt;
&lt;td&gt;-128 to 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int16&lt;/td&gt;
&lt;td&gt;signed 16-bit integers&lt;/td&gt;
&lt;td&gt;-32768 to 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;td&gt;signed 32-bit integers&lt;/td&gt;
&lt;td&gt;-2147483648 to 2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;signed 64-bit integers&lt;/td&gt;
&lt;td&gt;-9223372036854775808 to 9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float32&lt;/td&gt;
&lt;td&gt;32-bit floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float64&lt;/td&gt;
&lt;td&gt;64-bit floating-point numbers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex64&lt;/td&gt;
&lt;td&gt;complex numbers with float32 real and imaginary parts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex128&lt;/td&gt;
&lt;td&gt;complex numbers with float64 real and imaginary parts&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;alias for uint8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rune&lt;/td&gt;
&lt;td&gt;alias for int32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Well, this is a huge list and what you choose to use in your program really depends on your need. Within integers, unsigned integers (uint) contain only the positive numbers while signed (int) contains both positive and negative numbers. Integers come in different sizes &amp;ndash; 8, 16, 32, and 64 bits. &lt;code&gt;int&lt;/code&gt; is probably the most commonly used numeric type.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;byte&lt;/code&gt; type is same as &lt;code&gt;unit8&lt;/code&gt;. You will see a good number of examples using &lt;code&gt;byte&lt;/code&gt; type in this series of articles. The type &lt;code&gt;rune&lt;/code&gt; is same as &lt;code&gt;int32&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Floating point numbers contain a decimal component. For example 3.14 is a floating point number. Floating point numbers come in 32 and 64 bit sizes. The &lt;code&gt;complex64&lt;/code&gt; and &lt;code&gt;complex128&lt;/code&gt; are essentially floating point types with the imaginary part.&lt;/p&gt;
&lt;p&gt;Like every other programming language, Go too supports a wide array of arithmetic operators to work with different data types. For example, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt;. The first four operators apply to all types if numerals while the last one &amp;ndash; remainder operator (&lt;code&gt;%&lt;/code&gt;) &amp;ndash; applies only to integers.&lt;/p&gt;
&lt;p&gt;Here is an example that sh ows all these numeric data types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; + &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2.0&lt;/span&gt; * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3.3&lt;/span&gt; / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3.1&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; - &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt; % &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using complex numbers in Go language is a bit different from how you initialize and use ints and floats.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// using constructor to create a comples number
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	c1 := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;complex&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// gets real part
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	realPart := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;real&lt;/span&gt;(c1)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// gets imaginary part
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	imgPart := &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;imag&lt;/span&gt;(c1)

	fmt.Println(c1)
	fmt.Println(realPart)
	fmt.Println(imgPart)

	&lt;span style=&#34;color:#007f7f&#34;&gt;// second method to creating complex numbers
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	c2 := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; + &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6i&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;real&lt;/span&gt;(c2))
	fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;imag&lt;/span&gt;(c2))

	&lt;span style=&#34;color:#007f7f&#34;&gt;//complex number arithmetic
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(c1 + c2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the constructor function &lt;code&gt;complex()&lt;/code&gt; creates a complex number. The two arguments to this function are the real and imaginary parts of the number. The &lt;code&gt;real()&lt;/code&gt; function gets the real part of a complex number while the imaginary part can be retrieved using &lt;code&gt;imag()&lt;/code&gt; function. Finally, the last line shows the complex number arithmetic.&lt;/p&gt;
&lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;
&lt;p&gt;Strings are sequences of characters. Each character is represented by a byte value. Go language supports unicode characters as well as a part of the strings. So, one of the examples you saw earlier &amp;ndash; &amp;ldquo;I ❤ Golang!&amp;rdquo; &amp;ndash; is a totally valid string in Golang. String literals should always be enclosed either in double-quotes or back ticks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;I ❤ Golang!&amp;#34;&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`Go language is simple to learn!`&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other languages &amp;ndash; if you are familiar with PowerShell like I do &amp;ndash; you might have used single-quotes as well to represent strings. While single-quotes are not permitted, using back ticks is in a way similar to single-quotes. For example, in Go, the escape sequences such as &lt;code&gt;/n&lt;/code&gt; (newline) and &lt;code&gt;/t&lt;/code&gt; (tab) have no meaning when the string is enclosed in back ticks. Update the example above to add one of these escape sequences and try out the program again.   Do you see something similar where the escape sequence at the end of string enclosed in back ticks does not get replaced to its meaning?&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d4-strings-01.png&#34; width=&#34;500&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As mentioned earlier, strings are sequence of characters and get indexed from 0. So, for example, &lt;code&gt;&amp;quot;Golang&amp;quot;[3]&lt;/code&gt; refers to byte representation of character &amp;ldquo;a&amp;rdquo;. So, if you use &lt;code&gt;fmt.Println(&amp;quot;Golang&amp;quot;[3])&lt;/code&gt;, you will see 97 printed on the console.   So, how can you print the character &amp;ldquo;a&amp;rdquo; instead of its byte representation? For this, you use format verbs. You will learn more about string formatting in a later article but if you are keen on trying this, you can use the following statement to print the character instead of its byte value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%q&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang&amp;#34;&lt;/span&gt;[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that in the above example, &lt;code&gt;Printf&lt;/code&gt; function is used instead of the &lt;code&gt;Println&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The length of a string is equivalent to the number of bytes in the string. You can derive the length of a string in Go using the predeclared function called &lt;code&gt;len&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Println(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, you can concatenate strings using the &lt;code&gt;+&lt;/code&gt; operator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;I &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;❤ &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Golang!&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;booleans&#34;&gt;Booleans&lt;/h3&gt;
&lt;p&gt;Booleans represent a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value. true and false are predeclared constants in Go and represent the boolean truth values. The predeclared boolean type is &lt;code&gt;bool&lt;/code&gt;. Booleans are represented using special one bit integer values. With boolean values, you use logical operators such as &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and), &lt;code&gt;||&lt;/code&gt; (or), and &lt;code&gt;!&lt;/code&gt; (not).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// using constructor to create a comples number
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; isTypeNum &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;
	a := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;

	isTypeNum = (reflect.TypeOf(a).String() == &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Is variable a of type int?:&amp;#34;&lt;/span&gt;, isTypeNum)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The statement &lt;code&gt;var isTypeNum bool&lt;/code&gt; creates a variable named &lt;code&gt;isTypeNum&lt;/code&gt; of type boolean. The expression &lt;code&gt;(reflect.TypeOf(a).String() == &amp;quot;int&amp;quot;)&lt;/code&gt; uses the &lt;code&gt;TypeOf()&lt;/code&gt; function in the &lt;code&gt;reflect&lt;/code&gt; package to retrieve the type of variable a, convert it to string and then compare it to the string &amp;ldquo;int&amp;rdquo; using the &lt;code&gt;==&lt;/code&gt; operator. This comparison (you will learn about comparison operators when looking at control flow statements) results in a boolean value &amp;ndash; true or false and that gets assigned to the variable &lt;code&gt;isTypeNum&lt;/code&gt; as value.&lt;/p&gt;
&lt;p&gt;This is quick overview of basic data types in Go language. It is time to practice what you learned today.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a program that declares two variables &amp;ndash; an integer and a floating pointing type. Perform multiplication of these values and print the result using &lt;code&gt;Println&lt;/code&gt; function. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/687707e99bb63cb59bdc37bf9e8f7b79&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a program that uses shorthand declaration to declare variables of types &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;bool&lt;/code&gt; and assigns the values 10, &amp;lsquo;hello&amp;rsquo;, and true respectively. What happens when you use the statement &lt;code&gt;fmt.Println(i == s)&lt;/code&gt;. Publish your answer &lt;a href=&#34;https://gist.github.com/rchaganti/b15475bb628b88cd3e905564427cf531&#34;&gt;here&lt;/a&gt;. What did you learn from this exercise?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Variables in Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-variables-in-go-language/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-variables-in-go-language/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-first-program/&#34;&gt;last part&lt;/a&gt; of this &lt;a href=&#34;https://ravichaganti.com/series/get-set-go/&#34;&gt;series&lt;/a&gt;, you looked at writing your first program and understood the program structure and understood the keywords such as &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;func&lt;/code&gt;. It was a good start. In this part, you will learn how to declare and use variables in Go programs.&lt;/p&gt;
&lt;h2 id=&#34;naming-convention-in-go&#34;&gt;Naming convention in Go&lt;/h2&gt;
&lt;p&gt;Before you start looking at variables in Golang, you must first understand some rules for naming different program entities &amp;ndash; variables, types, statements, packages, and constants &amp;ndash; in Go.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Names or identifiers for any of these entities must start either with a letter or an underscore. You can use Unicode letters as well.&lt;/li&gt;
&lt;li&gt;These names or identifiers can have any number of additional letters or underscores or digits.&lt;/li&gt;
&lt;li&gt;The case of a name matters in Go language. For example, firstName is different from Firstname or FirstName.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You learned in the last part that &lt;a href=&#34;https://golang.org/ref/spec#Keywords&#34;&gt;Go language has 25 keywords&lt;/a&gt;. These keyword names are reserved and may not be used as names or identifiers for any of the program entities. There are also a &lt;a href=&#34;https://golang.org/ref/spec#Predeclared_identifiers&#34;&gt;few predeclared identifiers&lt;/a&gt; in Go language. You may use the names of predeclared identifiers for your program entities but make sure you do not confuse yourself or create confusion for others reading your code.&lt;/p&gt;
&lt;p&gt;While there is no limit on the number of characters in a name or an identifier, &lt;a href=&#34;https://www.reddit.com/r/golang/comments/3aporh/why_so_many_gophers_use_single_letter_variables/&#34;&gt;Gophers tend to use shorter names&lt;/a&gt; for program entities. It may sound strange for people coming from other programming language background but many Go programmers use single letter names and it is &lt;a href=&#34;http://doc.cat-v.org/bell_labs/pikestyle&#34;&gt;highly recommended&lt;/a&gt;. The recommendation here is to use shorter names or identifiers for local scope and longer names for names or identifiers that have a larger visibility. You will learn more about scopes in a different part of this article.&lt;/p&gt;
&lt;p&gt;Finally, names or identifiers starting with an uppercase letter are used only when you want to make the program entity visible outside the current package. For example, if you revisit the code of your first program, the function that we used to print text on the console was &lt;code&gt;Println&lt;/code&gt; in the &lt;code&gt;fmt&lt;/code&gt; package. Otherwise, the general recommendation is to begin the name or identifier with a lowercase letter or underscore.&lt;/p&gt;
&lt;p&gt;Alright, with this background, you can now get started with variables.&lt;/p&gt;
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;A variable is essentially a storage location in memory to store a specific value of a given type. Variable declaration names the storage location for easier identification. The general syntax for declaring variables in Go language is as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; name_of_variable &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;type&lt;/span&gt; = value_or_expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, &lt;code&gt;var s string&lt;/code&gt; declares an identifier &lt;code&gt;s&lt;/code&gt; to store a value of type string. This declaration also allocates the storage needed for storing the value. Assigning type or assigning a value at the time of variable declaration is optional. In Go language, there is no concept of uninitialized variables. When no value is assigned during declaration, the variable gets initialized to a default or zero value based on the type. For string type, it will be an empty string. The zero value assignment ensures that a variable always hold a valid value of the type specified.&lt;/p&gt;
&lt;p&gt;When you specify the type during declaration, it defines the static type of the variable. If a type name is not specified during the declaration, a dynamic type gets determined based on the value assigned.&lt;/p&gt;
&lt;p&gt;You cannot skip both type and value assignment during variable declaration.&lt;/p&gt;
&lt;p&gt;Let us see this in action.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;// declare a string variable without assigning a value
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; s &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// print variable value
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of variable s is&amp;#34;&lt;/span&gt;, s)

	&lt;span style=&#34;color:#007f7f&#34;&gt;//declare a variable without type
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; fName = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;type of variable fName is&amp;#34;&lt;/span&gt;, reflect.TypeOf(fName))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you run this Go program, you will see the following output.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d3-variable-01.png&#34; width=&#34;300&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As seen in the output, the dynamic type of variable &lt;code&gt;fName&lt;/code&gt; is set to &lt;code&gt;string&lt;/code&gt;. After this, within this program, you cannot assign a value of another type to &lt;code&gt;fName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go language allows you to declare multiple variables at the same time and these variable can be of different types as well. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#007f7f&#34;&gt;// multiple variables initialized to zero values
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; n1, n2, n3, n4 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#007f7f&#34;&gt;// muliple variables with no type declaration but initializer values
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; n, s, f, b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;golang&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;3.14&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above examples, the first one declares multiple integer type variables. In the second declaration, the values get on the right-hand side get assigned to the variables in the order specified. Also, you must match the number of values provided on the right to number of identifiers specified on the left. The variable initializers (on the right) can be literal values like what is specified above or can be expressions as well.&lt;/p&gt;
&lt;p&gt;You can, similar to the import statement, wrap variable declaration in (). For example, the above two declarations can be changed to use the following syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;var&lt;/span&gt; (
		n1, n2, n3, n4 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt;
		n, s, f, b = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;golang&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;3.14&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;
	)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is yet another way and usage depends on the readability requirements and preferences in your code.&lt;/p&gt;
&lt;h3 id=&#34;short-variable-declaration&#34;&gt;Short variable declaration&lt;/h3&gt;
&lt;p&gt;Within Go functions, you can use a short variable declaration and syntax for that is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;variable-name := value-or-expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember that this can be used only within functions as non-declaration statements are not allowed at the package level. Here is a quick example of using short variable declaration method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;func&lt;/span&gt; main() {
	&lt;span style=&#34;color:#007f7f&#34;&gt;//simple short variable declaration
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	s := &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Go Language&amp;#34;&lt;/span&gt;

	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Value of variable S is&amp;#34;&lt;/span&gt;, s)
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Type of variable s is&amp;#34;&lt;/span&gt;, reflect.TypeOf(s))

	&lt;span style=&#34;color:#007f7f&#34;&gt;//short variable declaration for multiple variables
&lt;/span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;	n, b := &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;
	fmt.Println(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Values of n and b are&amp;#34;&lt;/span&gt;, n, b)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike &lt;code&gt;=&lt;/code&gt; (assignment operator), &lt;code&gt;:=&lt;/code&gt; is a declaration. Even in this case too, the initializer can either be a literal value or an expression such as a function call. You will see several examples this method of variable declaration as you go forward in this series.&lt;/p&gt;
&lt;p&gt;Alright, that is a quick overview of declaring and using variables in Go language. It is time to practice what you learned.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In the first exercise, update the hello world program you create in the &lt;a href=&#34;https://ravichaganti.com/blog/get-set-go-first-program/&#34;&gt;last part&lt;/a&gt; to add a variable &lt;code&gt;fName&lt;/code&gt; and initialize it with your name as the value. Finally, print the statement Hello, fName to the screen. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/daa5741378a401935ee08102652ad278&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a program that declares two integer variables i and j and assigns values 10 and 30. Print the values of these variables. Add an expression to swap the values of the variables using assignment operator. Finally, print the values of the variable values after swapping. Post your solution &lt;a href=&#34;https://gist.github.com/rchaganti/33b2cbf4fc121999d38c6ead7911eecd&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - First program</title>
      <link>https://ravichaganti.com/blog/get-set-go-first-program/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-first-program/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With the background provided in the introduction part of this series, you must now be equipped with the necessary tools for the job &amp;ndash; learning Go! So, in this part, you will write your first program in Go language. You will not only learn about the very minimal structure needed for a Go program but you will also learn about organizing your Go programs and why it matters. Get set Go!&lt;/p&gt;
&lt;h2 id=&#34;your-first-program&#34;&gt;Your first program&lt;/h2&gt;
&lt;p&gt;The most popular first program among many programmers or programming languages is the &lt;em&gt;hello world&lt;/em&gt; program. Here is how you can write a hello world program in Go language.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rchaganti/023b2d3ad10b4c53e997d58387d1ee2d.js?file=d2-helloworld.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is it. The above code presents the basic structure of Go programs.&lt;/p&gt;
&lt;p&gt;All Go programs are packages and therefore every Go program starts with a package declaration. A Go package can be equated to a library or a module in other languages such as C or Python. In this example, [line1] the package name is &lt;code&gt;main&lt;/code&gt;. main package in Go is a special package since any Go program execution starts with &lt;code&gt;main&lt;/code&gt; function of the &lt;code&gt;main&lt;/code&gt; package. You will learn more about using and building packages in-depth in a later part of this series.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; keyword follows [line 7] the package declaration. This keyword is used to import other packages to use within the current package. In this example, you are importing the &lt;code&gt;fmt&lt;/code&gt; package. Note that the &lt;code&gt;fmt&lt;/code&gt; string is enclosed within double-quotes and it should be double-quotes only. If you are coming from other programming languages, you may start using single-quotes for representing strings but that is not valid in Go programming. The method of importing packages shown in the example works only for a single package. You can add multiple such import statements one after another or use a better method as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go does not let you import packages that you are not using within the current program. If you add an import statement for a package but do not use it in your code, you will receive an error during compile time that a package has been imported but not used. This is by design.&lt;/p&gt;
&lt;p&gt;Next thing that you see in the example is the &lt;code&gt;func&lt;/code&gt; keyword to declare the &lt;code&gt;main&lt;/code&gt; function. Like many other programming languages, functions in Go are the basic building blocks and the name of the function identifies a sequence of steps that you want to perform. In this example, you just have one step that is to print a message using &lt;code&gt;Println&lt;/code&gt; function within the &lt;code&gt;fmt&lt;/code&gt; package. You access functions from imported packages using the &lt;code&gt;&amp;lt;packageName&amp;gt;.&amp;lt;functionName&amp;gt;&lt;/code&gt; syntax and therefore the example above uses &lt;code&gt;fmt.Println()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go functions, similar to other languages, have input (arguments) and output (return values). However, &lt;code&gt;main&lt;/code&gt; function in Go uses neither &amp;ndash; it neither takes any arguments nor returns any values. The &lt;code&gt;Println&lt;/code&gt; function in the &lt;code&gt;fmt&lt;/code&gt; package takes a string argument and prints the same to the console when executed. You will learn more about the functions in-depth in a later part of this series.&lt;/p&gt;
&lt;p&gt;Also, notice that the opening and closing curly brackets in the function declaration. In Go programs, for any code block, the opening bracket has to be on the same line as the the keyword or code block identifier &amp;ndash; in this case the &lt;code&gt;func&lt;/code&gt; keyword and the name of the function. There is no choice in the function declaration since a new line character is treated as the end of a statement. On a lighter note, this totally eliminates any &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/2715/should-curly-braces-appear-on-their-own-line&#34;&gt;my-bracket-style-is-better-than-yours&lt;/a&gt; kind of discussion.&lt;/p&gt;
&lt;p&gt;Finally, to the other semantics I skipped. The &lt;code&gt;/* */&lt;/code&gt; [line 3-5] and &lt;code&gt;//&lt;/code&gt; [line 9 and end of line 10] indicate comments in Go language. No surprises there. The first method &amp;ndash; &lt;code&gt;/* */&lt;/code&gt; &amp;ndash; is a multi-line or block comment where as the second one using &lt;code&gt;//&lt;/code&gt; is a single line comment. Anything that you enclose within comments will be ignored at compile time.&lt;/p&gt;
&lt;h3 id=&#34;executing-go-programs&#34;&gt;Executing Go programs&lt;/h3&gt;
&lt;p&gt;You can execute your Go programs using the &lt;code&gt;go run&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go run helloworld.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d2-output.png&#34; width=&#34;260&#34; /&gt;
        
        &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;Figure 1 - Command Output&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;p&gt;When working with Go language, &lt;code&gt;go&lt;/code&gt; and it&amp;rsquo;s subcommands is all you need to compile your programs. In the above example, you are using the &lt;code&gt;run&lt;/code&gt; subcommand. When this command is executed, the Go program code gets compiled and translated to machine code which then runs and prints the message that we specified as an argument to the &lt;code&gt;Println&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;What if you want to just build the binary and not run it? You can use the &lt;code&gt;go build&lt;/code&gt; subcommand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; build hellworld.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command generates helloworld.exe in the current working directory. You can now execute the generated binary to see the output from the program.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;go build&lt;/code&gt; subcommand, it is optional to specify the .go filename. If you don&amp;rsquo;t specify a file name, go will try to find the Go source code package with main function and build it.&lt;/p&gt;
&lt;p&gt;If you look at the screen capture (Figure 1 - Command Output) of program output above, the &lt;code&gt;go run&lt;/code&gt; command did not use the full file name &amp;ndash; &lt;code&gt;helloworld.go&lt;/code&gt;. Instead, it was just &lt;code&gt;helloworld&lt;/code&gt;. It still worked! But, how? If you too thought about it, the answer follows. Read on.&lt;/p&gt;
&lt;h2 id=&#34;go-workspaces&#34;&gt;Go workspaces&lt;/h2&gt;
&lt;p&gt;The command shown in the above output worked because the helloworld source code exists in a known Go workspace. In the introduction, you have learned about the &lt;code&gt;go env&lt;/code&gt; command. In the output of this command, you see an environment variable called &lt;code&gt;GOPATH&lt;/code&gt;. This variable represents the path where your Go program source code is. By default, this will be set to &lt;code&gt;%USERPROFILE%\go&lt;/code&gt; on Windows and &lt;code&gt;$HOME/go&lt;/code&gt; on Linux. You can change this path using the &lt;code&gt;go env&lt;/code&gt; subcommand with &lt;code&gt;-w&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;go&lt;/span&gt; env -w GOPATH=C:/GitHub/GetSetGo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go workspace is essentially a location on your disk. The workspace folder should contain a folder named &lt;code&gt;src&lt;/code&gt; for all your Go program source code. The other folder that gets created automatically is the &lt;code&gt;bin&lt;/code&gt; folder for storing all binary files generated using &lt;code&gt;go install&lt;/code&gt; subcommand. Here is how the folder structure looks like on my system.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/d2-gopath.png&#34; width=&#34;260&#34; /&gt;
        
        &lt;figcaption&gt;&lt;small&gt;&lt;i&gt;Figure 2 - Go workspace structure&lt;/i&gt;&lt;/small&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
    
&lt;p&gt;With this folder structure, when you run &lt;code&gt;go build helloworld&lt;/code&gt; or &lt;code&gt;go run helloworld&lt;/code&gt; or &lt;code&gt;go install helloworld&lt;/code&gt; command, go will try to find if there is a match that exists at a path specified by either &lt;code&gt;GOROOT&lt;/code&gt; or &lt;code&gt;GOPATH&lt;/code&gt; environment variables. A typical Go workspace contains many source control repositories &amp;ndash; one for each package you are working on. So, in the example above, you can consider the folder &lt;em&gt;helloworld&lt;/em&gt; under &lt;code&gt;src&lt;/code&gt; to be a source control repository. It is a best practice among Go programmers to use single workspace for all their Go source code.&lt;/p&gt;
&lt;p&gt;The Go workspace is the folder structure that gets used when you use the &lt;code&gt;go get&lt;/code&gt; subcommand to download Go packages. For example, if you are using VS Code with the Go extension to develop your Go programs, you might have seen VS Code prompting you to install necessary Go tools to enable the VS Code editor features such as Intellisense, linting, formatting, and so on. So, if you have used the Go: Install/Update Tools in VS Code, all tools get downloaded to &lt;code&gt;pkg&lt;/code&gt; folder within the Go workspace and then the packages get compiled to binaries which get installed to the &lt;code&gt;bin&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;For now, it is not mandatory (but good) to use a Go workspace to try out the examples in this or the next few upcoming parts. You will revisit this in a later part discussing Go packages. In the next part of this series, you will get introduced to variables and types in Go language.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Now that you have got introduced to basic Go program syntax, write a program that prints &amp;ldquo;I ❤ Golang!&amp;rdquo;. You don&amp;rsquo;t have to use anything more than what you learned today. Post your solution to this @ &lt;a href=&#34;https://gist.github.com/rchaganti/725cc041a30ee90e19d4713a1514b432&#34;&gt;https://gist.github.com/rchaganti/725cc041a30ee90e19d4713a1514b432&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Update the GOPATH environment variable to a different location than the default path and create folder structure similar to what is shown in Figure 2. Try &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, and &lt;code&gt;go install&lt;/code&gt; commands and understand the difference.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get set Go - Introduction to Go language</title>
      <link>https://ravichaganti.com/blog/get-set-go-introduction-to-go-lang/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/get-set-go-introduction-to-go-lang/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/banner.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go programming language&lt;/a&gt; isn&amp;rsquo;t new. It existed for more than 13 years now. The idea of Go language was first conceived in 2007 at Google by Ken Thompson, Robert Griesemer, and Rob Pike. Go was developed in response to some of the challenges the development teams at Google were facing internally. Some of these issues included ridiculously longer build times, baggage that legacy languages imposed on modern infrastructure / systems development, and uncontrolled dependencies among many other pain points. Go was designed to make it easy and efficient to program modern multicore systems, web service backends, and command line tools. The design considerations such as rigorous dependency management and efficiency at scale make Go one of the best modern programming languages.&lt;/p&gt;
&lt;p&gt;Go was publicly announced in 2009. Version 1.0 of Go language was released in &lt;a href=&#34;https://golang.org/doc/go1&#34;&gt;March 2012&lt;/a&gt; and the current version (at this time of writing) is &lt;a href=&#34;https://golang.org/doc/go1.14&#34;&gt;1.14&lt;/a&gt;. Today, Go is a part of many major online services and infrastructure tools that you use every day! Google, of course! &lt;a href=&#34;https://github.com/docker&#34;&gt;Docker&lt;/a&gt; &amp;ndash; the most popular container technology &amp;ndash; is written in Go. The most recent entrant in the CLI game, the &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt;, is written in Go. Every tool that &lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;Hashicorp&lt;/a&gt; developed so far was in Go. Blockchain platform like &lt;a href=&#34;https://ethereum.org/en/&#34;&gt;Ethereum&lt;/a&gt; uses Go. This static page that you are reading right now was generated using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; which is written in Go. I can &lt;em&gt;Go&lt;/em&gt; (pun intended) on with this list and &lt;a href=&#34;https://github.com/golang/go/wiki/GoUsers&#34;&gt;there are many more very well known names&lt;/a&gt; that use Go as their primary language for all their product development. So, what is Go?&lt;/p&gt;
&lt;h2 id=&#34;what-is-go&#34;&gt;What is Go?&lt;/h2&gt;
&lt;p&gt;Go is an &lt;a href=&#34;https://github.com/golang/go&#34;&gt;open source&lt;/a&gt;, general-purpose, and modern programming language with its roots in systems programming. If you are familiar with C programing language, you will find a few similarities between Go and C. Apart from C, Go language design was inspired from Pascal, Smalltalk, Modula, Oberon, and Algol. Go is a modern language and offers features such as garbage collection and better memory management.&lt;/p&gt;
&lt;p&gt;Go is a &lt;strong&gt;compiled&lt;/strong&gt; language. Unlike other compiled languages, Go programs can be compiled directly to machine code and compile very fast. Faster compiler times are a part of Go&amp;rsquo;s design. Go programs can be compiled for cross-platform execution which includes Windows, Linux, OS X, Solaris, Plan9 and many other operating systems. Go programs get compiled to a single executable which eliminates the dependency nightmares from other languages.&lt;/p&gt;
&lt;p&gt;Go is &lt;strong&gt;statically typed strong language&lt;/strong&gt;. Go does not allow type coercion unlike weakly typed languages such as JavaScript. Like other statically typed languages, Go types are checked before run-time. This allows any errors related  to types surface right during compile time itself.&lt;/p&gt;
&lt;p&gt;Go&amp;rsquo;s &lt;strong&gt;package system&lt;/strong&gt; combines the best of libraries, namespaces, and modules. Every Go file is a package. The package system is designed to identify the package import using the package path than the name. There is no need to make package names unique in the Go package system.&lt;/p&gt;
&lt;p&gt;Go has a &lt;strong&gt;simple and clean syntax&lt;/strong&gt;. Go&amp;rsquo;s grammar is modest in size compared to other languages such as C, C++, and Java. There are just 25 keywords in Go.&lt;/p&gt;
&lt;p&gt;Go offers &lt;strong&gt;concurrency&lt;/strong&gt; that is important and well suited for developing modern computing application that run on multicore systems. Go implements a variant of &lt;a href=&#34;https://en.wikipedia.org/wiki/Communicating_sequential_processes&#34;&gt;Communicating Sequential Processes&lt;/a&gt; (CSP) to enable support for concurrency that is simple and robust.&lt;/p&gt;
&lt;p&gt;Overall, Go is powerful, simple to learn and use and that is what makes you productive. Now, you may ask, this is all good but why learn go?&lt;/p&gt;
&lt;h2 id=&#34;why-learn-go&#34;&gt;Why Learn Go?&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/FTl0tl9BGdc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This interview is 8 years old and Go language has progressed quite a bit and that is evident not only from the investments that big companies are making in Go but also from the developer surveys such as the surveys done by &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020&#34;&gt;Stack Overflow&lt;/a&gt; and &lt;a href=&#34;https://research.hackerrank.com/developer-skills/2020&#34;&gt;HackerRank&lt;/a&gt;. In the Stack Overflow survey, Go stood as 5th &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved&#34;&gt;most loved language and 3rd most wanted language&lt;/a&gt; to develop new applications. Go featured as the &lt;a href=&#34;https://insights.stackoverflow.com/survey/2020#technology-what-languages-are-associated-with-the-highest-salaries-worldwide&#34;&gt;3rd most highest paid programming skill&lt;/a&gt;. In the HackerRank survey, Go &amp;ndash; for 3 consecutive years &amp;ndash; was at the top of the list of new languages developers want to learn.&lt;/p&gt;
&lt;p&gt;Apart from all this, Go is fun. I started learning this really as yet another programming language in my skillset but got hooked to this as I progressed in my journey. I started looking at some of the most popular tools implemented in Go and it was amazing to see how clean the code is and how readable it is. When compared to languages like C, C++, and Java, navigating Go code is so simple. The learning curve to get started with Go and do anything productive is very small.&lt;/p&gt;
&lt;p&gt;Go language is the most popular choice for building web services and command line tools. This is where my interest as well and therefore learning Go is really paying off.&lt;/p&gt;
&lt;p&gt;So, what are YOU waiting for? Start here and start today.&lt;/p&gt;
&lt;h2 id=&#34;get-started-with-go&#34;&gt;Get started with Go&lt;/h2&gt;
&lt;p&gt;To get started with Go, you need not install anything on your system. Really. You can just use the &lt;a href=&#34;https://play.golang.org/&#34;&gt;Go Playground&lt;/a&gt; to start with the basics.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goPlayground.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;With Go playground, you can write basic Go programs, execute, and see the output. You can also share the code that you write in the playground by clicking on the share button. This generates a unique link to access and share your code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by example&lt;/a&gt; &amp;ndash; an online Go language tutorial site &amp;ndash; has examples that you can open in Go playground and try out. As you get started, this is certainly one place that you don&amp;rsquo;t want to miss.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goByExample.png&#34; width=&#34;860&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;For those of you who prefer having Go installed locally for all learning, you need to download and install the latest release of Go language from &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt; and follow the &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;install instructions&lt;/a&gt; to prepare the environment for getting started with Go.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I am writing these articles on my Windows 10 system and therefore you will see references to Windows paths and configuration. Otherwise, the content and examples can be used on any supported platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On Windows, you can either get the &lt;a href=&#34;https://golang.org/dl/go1.14.6.windows-amd64.zip&#34;&gt;zip archive&lt;/a&gt; of a Go language release, extract it to location of your choice on the local disk, and set up the required environment variables. At a minimum, you must configure the system PATH variable to include path to the bin folder. In the second but preferred method, you can download the &lt;a href=&#34;https://golang.org/dl/go1.14.6.windows-amd64.msi&#34;&gt;MSI file&lt;/a&gt; which installs, by default, at &lt;em&gt;C:\Go&lt;/em&gt; and configures needed environment variables for you.&lt;/p&gt;
&lt;p&gt;You can verify your Go binary installation and environment variable configuration by executing the &lt;code&gt;go env&lt;/code&gt; or &lt;code&gt;go version&lt;/code&gt; commands. You will have to re-open the command console before running this command.&lt;/p&gt;
&lt;p&gt;You should see output similar to what is shown below.&lt;/p&gt;

    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/getsetgo/goenv.png&#34; width=&#34;460&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;You can install and run multiple versions of Go language binaries side by side. The &lt;code&gt;go get&lt;/code&gt; command, which you learn later in this series, can help get different versions of Go binaries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go get golang.org/dl/go1.15rc1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command downloads unstable (under development) version of Go. Once this is installed, you can use &lt;code&gt;go1.15rc1&lt;/code&gt; instead of &lt;code&gt;go&lt;/code&gt; to explore the new features that are still in development or verify bug fixes.&lt;/p&gt;
&lt;p&gt;For writing Go programs, a simple notepad would be good enough but that won&amp;rsquo;t make you productive. A good Integrated Development Environment (IDE) is needed for developing Go code with ease. There are many editors such as Visual Studio &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Code&lt;/a&gt;, JetBrains &lt;a href=&#34;https://www.jetbrains.com/go/&#34;&gt;GoLand&lt;/a&gt;, Eclipse with &lt;a href=&#34;https://goclipse.github.io/&#34;&gt;GoClipse&lt;/a&gt; plugin, and many others. So far, I have used Visual Studio Code only and therefore it is my only preference. The &lt;a href=&#34;https://code.visualstudio.com/docs/languages/go&#34;&gt;Go language extension&lt;/a&gt; for VS code is a must. With this extension, VS Code gets support for IntelliSense, signature help, formatting, linting, build, and more importantly debugging features. As you proceed in this series, you will see mention different VS Code Go extension features and how those features can make you more productive when writing Go programs.&lt;/p&gt;
&lt;p&gt;Ok. Enough talk. What are some resources that you can use to get started with Go language?&lt;/p&gt;
&lt;h2 id=&#34;learning-resources&#34;&gt;Learning resources&lt;/h2&gt;
&lt;p&gt;There are many existing resources online for learning Go language. The following is a list of resources I used or often refer to. Depending what mode of learning you like, here are my recommendations. The Go language specification is not for an end-to-end reading but acts more like a reference. You will see references to the language specification throughout this series of articles.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Go language documentation&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://golang.org/doc/&#34;&gt;https://golang.org/doc/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go language specification&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;https://golang.org/ref/spec&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go by example&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;https://gobyexample.com/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Online tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exercism&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://exercism.io/tracks/go&#34;&gt;https://exercism.io/tracks/go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Code practice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Go Programming Language&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/Ydfkm9w&#34;&gt;https://cutt.ly/Ydfkm9w&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Introducing Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/VdfkoPp&#34;&gt;https://cutt.ly/VdfkoPp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go In Action&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cutt.ly/Mdfj8Bs&#34;&gt;https://cutt.ly/Mdfj8Bs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Book&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Learn How To Code: Google&amp;rsquo;s Go (golang) Programming Language (Udemy)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.udemy.com/course/learn-how-to-code/&#34;&gt;https://www.udemy.com/course/learn-how-to-code/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Core Language (Pluralsight path)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pluralsight.com/paths/go-core-language&#34;&gt;https://www.pluralsight.com/paths/go-core-language&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Fundamentals (Nigel Poulton)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/go-fundamentals&#34;&gt;https://www.pluralsight.com/courses/go-fundamentals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Video&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go Programming Language (Reddit)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.reddit.com/r/golang/&#34;&gt;https://www.reddit.com/r/golang/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Community Forum / Discussions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are a lot of companies that use Go language and there are quite a few of them in &lt;a href=&#34;https://github.com/trending/go?spoken_language_code=en&#34;&gt;open source&lt;/a&gt;. Looking at the Go code in these open source repositories is another great exercise and gives you insights into how the language is used in the real-world. As a part of this series, you will see references to code from some of these open source projects while explaining a few concepts.&lt;/p&gt;
&lt;p&gt;Finally, I am no expert in Go language and therefore these are the notes from a novice. These notes are how I learned (or still learning) Go language. At this point in time, I don&amp;rsquo;t have a definite number of articles that I want to publish as a part of this series. I will go right from very basics to applied Go language. The applied Go language part of this series will deal with some sample utilities that I developed to strengthen my understanding of Go and walk-through how I went about developing those utilities and what I learned from that exercise. At the end of each part, starting next one, I will post a few exercises that you may want to try out and share your code with the others. Each of these exercises will be available as a &lt;a href=&#34;https://gist.github.com/&#34;&gt;Gist&lt;/a&gt; and you can comment there to share your solution to the exercise with other readers of this series.&lt;/p&gt;
&lt;p&gt;Join me in this journey. Let us learn together. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
