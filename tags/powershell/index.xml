<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/tags/powershell/</link>
    <description>Recent content in PowerShell on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShell commands to generate Git.io shorturls</title>
      <link>https://ravichaganti.com/blog/powershell-commands-to-generate-git-io-shorturls/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-commands-to-generate-git-io-shorturls/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/gitio.png&#34; width=&#34;660&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;&lt;a href=&#34;https://git.io&#34;&gt;Git.io&lt;/a&gt; &amp;ndash; service by GitHub &amp;ndash; can be used generate the short URLs for any GitHub.com based URL. You can navigate to Git.io and paste a GitHub URL into the input box and generate a short URL. Note that this works only with GitHub.com URLs.&lt;/p&gt;
&lt;p&gt;I have been using &lt;a href=&#34;http://gist.github.com/&#34;&gt;gists&lt;/a&gt; a lot lately and the URL to gists is usually very long and includes guids. For these gist URLs, I have been using the git.io service and wrapped that in a quick PowerShell module to help me generate these URLs. Today, I published it on &lt;a href=&#34;https://github.com/rchaganti/psgitio&#34;&gt;GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.powershellgallery.com/packages/psgitio/1.0.0.0&#34;&gt;PowerShell Gallery&lt;/a&gt; for you to use it as well.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;It is straightforward to use this module. There are only two commands.&lt;/p&gt;
&lt;h3 id=&#34;get-gitioshorturl&#34;&gt;Get-GitIoShortUrl&lt;/h3&gt;
&lt;p&gt;This command is used to get the expanded URL from the short URL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Get-GitIoShortUrl -ShortUrl &#39;https://git.io/psdev&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;new-gitioshorturl&#34;&gt;New-GitIoShortUrl&lt;/h3&gt;
&lt;p&gt;This command can create a new short URL for any GitHub URL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;New-GitIoShortUrl -Url &#39;https://github.com/rchaganti/DSCResources&#39; -Code &#39;psdsc&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the above example, &lt;code&gt;-Code&lt;/code&gt; specifies an optional shortcode to be used for create the short URL. So, if the shortcode is not already taken the generated short URL will be &lt;a href=&#34;https://git.io/psdsc&#34;&gt;https://git.io/psdsc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the absence of &lt;code&gt;-Code&lt;/code&gt; parameter, a random shortcode gets generated.&lt;/p&gt;
&lt;p&gt;If you generated a short URL for a given GitHub URL without &lt;code&gt;-Code&lt;/code&gt;, trying this command again with the same URL and with &lt;code&gt;-Code&lt;/code&gt; will not have any impact. Once a short URL gets generated, the git.io service will always return the same short URL.&lt;/p&gt;
&lt;p&gt;BTW, if you are using GistPad VS Code extension, you may want to &lt;a href=&#34;https://github.com/vsls-contrib/gistpad/issues/168&#34;&gt;upvote this feature request&lt;/a&gt; to add an option to copy the GitHub shorturl for the gists.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: BITPro UG Meet - Tests Driven PowerShell Learning using PSKoans</title>
      <link>https://ravichaganti.com/blog/session-slides-tests-driven-powershell-learning-using-pskoans/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/session-slides-tests-driven-powershell-learning-using-pskoans/</guid>
      <description>&lt;p&gt;At today’s Bangalore IT Pro and PowerShell Bangalore User Group (PSBUG) event, I had the opportunity to showcase the &lt;!-- raw HTML omitted --&gt;PSKoans &lt;!-- raw HTML omitted --&gt;module by &lt;!-- raw HTML omitted --&gt;Joel Sallow&lt;!-- raw HTML omitted --&gt;. This module has a set of Pester tests that you have to fix as you proceed in your efforts towards mastering PowerShell.&lt;/p&gt;
&lt;p&gt;I have found this method engaging and decided that I must show this to the community.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/dReJxeJsDhvCRz&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;After this session on PSKoans, I did live coding and streamed it &lt;!-- raw HTML omitted --&gt;live on Twitch&lt;!-- raw HTML omitted --&gt; (and did not realize that it was without audio :((). I fixed a function in my PSWindowsAdminCenter module and added a new function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Experts Live India – PowerShell Data as File System</title>
      <link>https://ravichaganti.com/blog/session-slides-experts-live-india-powershell-data-as-file-system/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/session-slides-experts-live-india-powershell-data-as-file-system/</guid>
      <description>&lt;p&gt;I had the opportunity to speak at the inaugural edition of Experts Live India 2019 over the weekend. It was a great experience. The organizers did a great job even when there were teething facilities issues that plagued the event right from the start.&lt;/p&gt;
&lt;p&gt;I had planned only for one session at the event but as some international speakers could not make it to the event, I was asked to take up one more session and I chose to show the audience SHiPS module. Hierarchical data can be read as a file system in PowerShell using SHiPS open source module. In this session, I walked the audience through what are providers and what is the advantage of implementing PowerShel providers using the SHiPS module.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/LIDAL5Jq1Unbx2&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;Once again, the slides do not contain great deal of information since I wanted to make this more of a demo based session. The demo scripts are available at &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://github.com/rchaganti/Presentations/tree/master/ExpertsLiveIN2019/PSDataAsFileSystem&#34;&gt;https://github.com/rchaganti/Presentations/tree/master/ExpertsLiveIN2019/PSDataAsFileSystem&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: PowerShell Saturday - Windows PowerShell 4.0</title>
      <link>https://ravichaganti.com/blog/powershell-4-0-slides-and-session-recording-from-powershell-saturday-singapore/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-4-0-slides-and-session-recording-from-powershell-saturday-singapore/</guid>
      <description>&lt;p&gt;I just completed my online session on PowerShell 4.0, First Look for the Singapore PowerShell User Group. It went on pretty well. Here are the slides I used for this session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/313hyQgdFB504w&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;And, here is the session recording!&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/MGQk5y4g2QA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Virtual Tech Days - Windows PowerShell 3.0 – A first look</title>
      <link>https://ravichaganti.com/blog/vtd-session-windows-powershell-3-0-a-first-look-session-recording/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/vtd-session-windows-powershell-3-0-a-first-look-session-recording/</guid>
      <description>
    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/y8zcQbeseSuep9&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Monitoring Volume Change Events in PowerShell using WMI</title>
      <link>https://ravichaganti.com/blog/monitoring-volume-change-events-in-powershell-using-wmi/</link>
      <pubDate>Sun, 21 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/monitoring-volume-change-events-in-powershell-using-wmi/</guid>
      <description>&lt;p&gt;While I was preparing a few demo scripts for a Bangalore IT Pro UG meet session, I tumbled upon on WMI event class Win32_VolumeChangeEvent. This one is interesting. It is derived from Win32_DeviceChangeEvent class and gives us the ability to monitor local drive events directly.For example, you can get a notification when a local drive or mount point gets removed or added. The following table shows a list of event types we can monitor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This class may not be there on Windows XP. I have not verified this fact.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Value&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Configuration Changed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Device Arrival&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Device Removal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Docking&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let us see a few examples:&lt;/p&gt;
&lt;h4 id=&#34;adding-a-new-local-drive&#34;&gt;Adding a new local drive&lt;/h4&gt;
&lt;p&gt;We can monitor a local drive addition using the following query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=2&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this, you can monitor removable drives such as external hard drives and flash drives.&lt;/p&gt;
&lt;h4 id=&#34;removal-of-a-local-drive&#34;&gt;Removal of a local drive&lt;/h4&gt;
&lt;p&gt;To monitor the removal of local drive events, we can use the following query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=3&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;registering-for-the-above-events&#34;&gt;Registering for the above events&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for finding all device arrival events
$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=2&amp;#34;            

#Register an event subscription
Register-WmiEvent -Query $query -Action {
    $volumeName = (Get-WMIObject -Class Win32_LogicalDisk -Filter &amp;#34;DeviceID=&amp;#39;$($Event.SourceEventArgs.NewEvent.DriveName)&amp;#39;&amp;#34;).VolumeName
    Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.DriveName) ($($volumeName)) was added&amp;#34;
} | Out-Null            

#Query for finding all device Removal events
$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=3&amp;#34;            

#Register an event subscription
Register-WmiEvent -Query $query -Action {
    Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.DriveName) was removed&amp;#34;
} | Out-Null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have these event registrations done, we can test this by connecting or disconnecting a local drive such as a USB flash drive.&lt;/p&gt;
&lt;p&gt;Now, let us see a “real-world” application of these events and how we can use that to create a simple script to backup some files automatically whenever a USB flash drive gets added. Here is the script to do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Function Backup-ScriptFolder {
    Param ([string]$backupDrive,[string]$scriptFolder)
    $backupFolder = &amp;#34;$($backupDrive)\Backup-$(Get-Date -Format MM-dd-yyyy-hh-mm)&amp;#34;
    try {
        New-Item -type directory -Path $backupFolder -Force
    }
    catch {
        $_
        return
    }
    try {
        copy-item $scriptFolder -destination $backupFolder -recurse -Verbose
    }
    catch {
        $_
    }
}                

#Query for finding all device arrival events
$query = &amp;#34;SELECT * FROM Win32_VolumeChangeEvent WHERE EventType=2&amp;#34;            

#Register an event subscription
Register-WmiEvent -Query $query -Action {
    $volumeName = (Get-WMIObject -Class Win32_LogicalDisk -Filter &amp;#34;DeviceID=&amp;#39;$($Event.SourceEventArgs.NewEvent.DriveName)&amp;#39;&amp;#34;).VolumeName
    #Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.DriveName) ($($volumeName)) was added&amp;#34;
    if ($volumeName -eq &amp;#34;BACKUPDRIVE&amp;#34;) {
        Write-Host &amp;#34;Starting file copy..&amp;#34;
        Backup-ScriptFolder -backupdrive $Event.SourceEventArgs.NewEvent.DriveName -ScriptFolder &amp;#34;C:\Dropbox\Scripts&amp;#34;
    }
} | Out-Null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you see the above code, I have a simple function &lt;em&gt;Backup-ScriptFolder&lt;/em&gt; that is called within the events -Action script block. I am calling this function only when the newly added local drive has the volume name “BACKUPDRIVE”. This is to make sure I don’t make multiple copies of my backup on unnecessary drives.&lt;/p&gt;
&lt;p&gt;Now, when I add a new USB flash drive or any external hard drive with a volume name “BACKUPDRIVE”, all files from the specified folder just get copied to the newly added drive under a new folder. In the &lt;em&gt;Backup-ScriptFolder&lt;/em&gt; function, &lt;em&gt;-BackupDrive&lt;/em&gt; is the newly added drive letter and &lt;em&gt;-ScriptFolder&lt;/em&gt; is the folder you want backup.&lt;/p&gt;
&lt;p&gt;This is a very basic implementation. You can easily extend it by adding a pretty progress bar and other features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Register-WMIEvent creates a temporary event consumer. Hence, the event notifications won’t be available if we close the PowerShell host. If you want to have a permanent event registration,  use &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents &lt;/a&gt;module to make your life easy.&lt;/p&gt;
&lt;p&gt;Here is a video that shows this script in action!

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/X0EO-tFhsWc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: BITPro UG Meet - PowerShell and WMI Eventing</title>
      <link>https://ravichaganti.com/blog/bitpro-ug-meet-powershell-and-wmi-eventing-slides-demo-scripts/</link>
      <pubDate>Sat, 20 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/bitpro-ug-meet-powershell-and-wmi-eventing-slides-demo-scripts/</guid>
      <description>&lt;p&gt;I did a session at @BangaloreITPro this afternoon and the topic was “PowerShell WMI Eventing for IT Pros”. This session’s focus was to give an introduction to WMI events and how to use them in system administration. Here are the slides and demo scripts I used.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/M0T4zDdJrgbj&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Attaching scripts or tasks to Windows event log entries using PowerShell and WMI</title>
      <link>https://ravichaganti.com/blog/attaching-scripts-or-tasks-to-windows-event-log-entries-using-powershell-and-wmi/</link>
      <pubDate>Fri, 24 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/attaching-scripts-or-tasks-to-windows-event-log-entries-using-powershell-and-wmi/</guid>
      <description>&lt;p&gt;During a few load test iterations on a SharePoint farm, I started seeing some SQL exceptions in the application log of SharePoint servers. If you are familiar with SharePoint platform, you may have seen these events such as event ID &lt;a href=&#34;http://technet.microsoft.com/en-us/library/ee513066.aspx&#34;&gt;3355&lt;/a&gt;. This event complains that the SharePoint server cannot connect to SQL server. This need not really mean that the DB server is offline. So, to find out the real reason behind these event logs, I needed to start some trace activities whenever event ID 3355 gets logged.&lt;/p&gt;
&lt;p&gt;Initially, I was looking for &lt;a href=&#34;http://technet.microsoft.com/en-us/library/bb490901.aspx&#34;&gt;eventtriggers.exe&lt;/a&gt; which is meant for attaching a script or task to an event log. However, I could neither find this on Windows Server 2008 R2 nor an external download. So, I wanted to look at other options I had.  I found that there are multiple ways to achieve this.&lt;/p&gt;
&lt;h3 id=&#34;attach-to-script-or-task-to-the-event-in-windows-event-viewer&#34;&gt;Attach to script or task to the event in Windows Event Viewer&lt;/h3&gt;
&lt;p&gt;You can find this option in event viewer. This link is available in the actions pane of event viewer upon selecting an event.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/log1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;However, this method is available only if the event log entry you are interested exists in the log. Which meant that, this wizard cannot be used to specify the event ID I wanted to monitor without actually pre-selecting the event entry. In my case, I cleared the even log after some tests and did not have the entry for ID 3355 in the application log. So, this method was not an option for me to attach a script to this specific event ID. By the way, this method create a scheduled task. This will appear under Event Viewer tasks in Task Scheduler.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; We can use Task Scheduler to create an event trigger. If you go to task scheduler and click on ‘Create Task’, you can select an event as the trigger and specify an event ID there. Take a look at the image below:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/log1-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I did not use this technique. Instead, chose to use PowerShell to do this for me.&lt;/p&gt;
&lt;h3 id=&#34;create-a-wmi-event-subscription-using-register-wmievent-or-management-event-watcher-net-class-in-powershell&#34;&gt;Create a WMI event subscription using Register-WMIEvent or Management Event Watcher .NET class in PowerShell&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.management.managementeventwatcher.aspx&#34;&gt;System.Management.ManagementEventWatcher&lt;/a&gt; .NET class can be used to create an event watcher. This takes a WMI query and starts listening for any specified events. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$watcher = new-object system.management.ManagementEventWatcher
$watcher.query = &amp;#34;Select * From __InstanceCreationEvent Where
                  TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; AND
                  TargetInstance.LogFile=&amp;#39;Application&amp;#39; AND
                  targetInstance.EventCode=3355&amp;#34;
$watcher.WaitForNextEvent()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or, Register-WMIEvent — available in PowerShell v2 — can do the same job.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * From __InstanceCreationEvent Where
          TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; AND
          TargetInstance.LogFile=&amp;#39;Application&amp;#39; AND
          TargetInstance.EventCode=3355&amp;#34;
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Event Arrived or something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The WMI query here simple. We just want to monitor Application log for any event with event code 3355. Both the above methods have a drawback. They are only &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa392396(v=vs.85).aspx#using_temporary_event_consumers&#34;&gt;temporary event consumers&lt;/a&gt;. A temporary event consumer exists only as long as the host is alive. The moment we close the PowerShell host, we lose these event subscriptions. However, I did not know when this even will happen again. So, I need the WMI event subscription to survive system reboots.&lt;/p&gt;
&lt;h3 id=&#34;create-a-permanent-wmi-event-consumer-in-powershell&#34;&gt;Create a permanent WMI event consumer in PowerShell&lt;/h3&gt;
&lt;p&gt;So, the best choice for me here was to create a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa392396(v=vs.85).aspx#using_permanent_event_consumers&#34;&gt;permanent event consumer&lt;/a&gt; that can survive system reboots as well. I can create a WMI permanent consumer of command-line type in PowerShell.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note
You need to have the knowledge of WMI Query language to create WMI event consumers (permanent or temporary) in PowerShell.  If you are new to WMI or WMI query language, refer to my eGuide on ‘&lt;em&gt;&lt;strong&gt;WMI Query Language via PowerShell&lt;/strong&gt;&lt;/em&gt;‘ available at http://139.59.40.198/blog/?page_id=2134&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I explained in the last chapter of my WQL eguide, creating a WMI event consumer in PowerShell requires lot of typing. So, I chose a shortcut and used the &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; module. This module provides an easy way to create WMI event consumers using cmdlets. So, as a solution to my event log monitoring problem, I used the following 4 lines of PowerShell code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-Module PowerEvents            

#Create a WMI Query for the event log entry
$query = &amp;#34;SELECT * FROM __InstanceCreationEvent WHERE
          TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; AND
          TargetInstance.LogFile=&amp;#39;Application&amp;#39; AND
          TargetInstance.EventCode=3355&amp;#34;            

#Create an event filter
$filter = New-WmiEventFilter -Name &amp;#34;Event Filter for Event ID 3355&amp;#34; -Query $query            

#Create an event consumer
$consumer = New-WmiEventConsumer -Verbose -Name &amp;#34;Event Consumer for Event ID 3355&amp;#34; -ConsumerType CommandLine `
            -CommandLineTemplate &amp;#34;cmd.exe /c `&amp;#34;C:\debug\event.cmd`&amp;#34;&amp;#34;            

#Bind the filter and consumer together         
New-WmiFilterToConsumerBinding -Filter $filter -Consumer $consumer -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code is really self-explanatory. Whenever there is an event ID with a code 3355, this permanent WMI event consumer will trigger C:\debug\event.cmd which in turn starts a trace or some kind of logging.&lt;/p&gt;
&lt;p&gt;This is it for today. Hope this is helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Passing variables or arguments to an event action in PowerShell</title>
      <link>https://ravichaganti.com/blog/passing-variables-or-arguments-to-an-event-action-in-powershell/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/passing-variables-or-arguments-to-an-event-action-in-powershell/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Based on feedback from @ShayLevy, we don’t have to send the background job object to Event action as a variable. It is already available as $event.Sender or just $sender. You can see that in the image below. I just picked up a wrong example to explain the -MessageData parameter. Although, the article originally showed a background job as an example, it was just to show how &lt;em&gt;&lt;strong&gt;any&lt;/strong&gt;&lt;/em&gt; object can be passed to event action. For example, if all you want to access is a background job object which you are monitoring using Register-ObjectEvent, you can access the job name using $event.Sender.Name or $sender.Name, job Id using $event.Sender.Id or $sender.Id, and so on.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/sender1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;To avoid any confusion, I removed the initial example of background job and updated it with a more generic example.&lt;/p&gt;
&lt;p&gt;While working with @LaerteSQLDBA on a SQL SMO related script, I was asked a question on how to pass variables or arguments and access them within an event action script block. The solution is simple. We just use the -MessageData parameter of Register-ObjectEvent. So, all event subscriptions get the object and can be accessed using $event.MessageData and this is what &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347672.aspx&#34;&gt;Get-Help for -MessageData property of Register-ObjectEvent&lt;/a&gt; tells us.&lt;/p&gt;
&lt;p&gt;Let us say, You have a an object which you need to access inside an event registration for some special purpose. And, say that the event scope is different from the object scope.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$foo = &amp;#34;Ravi&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, when you need to access this variable $foo in the event action or event script block,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Register-ObjectEvent -InputObject $PSISE.Options -EventName PropertyChanged -MessageData $foo -SourceIdentifier jobEvent -Action {
                    Write-Host &amp;#34;Job Name: $(event.MessageData)&amp;#34;
                } | Out-Null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you observe the event registration, I supplied $foo as an argument to to -MessageData. This makes sure that we have the value of $foo is assigned to $event.MessageData in the event action script block.&lt;/p&gt;
&lt;p&gt;So, after the event is raised, if we look a the $event automatic variable:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/sender1-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;So, $event.MessageData now has the value of $foo. @ShayLevy pointed me to an answer he provided on Technet Forums. Check &lt;a href=&#34;http://social.technet.microsoft.com/Forums/en-US/ITCG/thread/07bbb0e5-0d31-451c-97e8-fad42361389f/#33e5ff21-00e5-46bc-ab5e-21975c2aadad&#34;&gt;this &lt;/a&gt;for an example on how to pass custom objects, etc.&lt;/p&gt;
&lt;p&gt;This is it for today. Hope you found this useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: TechED India - PowerShell in the Enterprise</title>
      <link>https://ravichaganti.com/blog/teched-india-2011-powershell-in-the-enterprise-slides/</link>
      <pubDate>Fri, 25 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/teched-india-2011-powershell-in-the-enterprise-slides/</guid>
      <description>&lt;p&gt;Here are the slides I used for my session “PowerShell in the Enterprise” at TechED India 2011. This was my first ever TechED session and went pretty well. There were 100+ attendees at the session and some good questions too.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/Jk3JoaQUyQDbxu&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Virtual Tech Days - Monitoring &amp; Managing remote Windows 7</title>
      <link>https://ravichaganti.com/blog/microsoft-virtual-tech-days-monitoring-managing-remote-windows-7-desktops-with-powershell-slides-scripts/</link>
      <pubDate>Tue, 22 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/microsoft-virtual-tech-days-monitoring-managing-remote-windows-7-desktops-with-powershell-slides-scripts/</guid>
      <description>&lt;p&gt;Early this month, I did an online webcast session for &lt;!-- raw HTML omitted --&gt;MS Virtual Tech Days&lt;!-- raw HTML omitted --&gt;. This session was around how administrators can manage remote Windows 7 desktops with Windows PowerShell. Here are the slides from that session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/yoEBa4SeuaCVc5&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Monitoring file creation using WMI and PowerEvents module</title>
      <link>https://ravichaganti.com/blog/monitoring-file-creation-using-wmi-and-powerevents-module/</link>
      <pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/monitoring-file-creation-using-wmi-and-powerevents-module/</guid>
      <description>&lt;p&gt;There are several ways we can create a file monitoring script using PowerShell. There is also a cmdlet in PowerShellPack called Start-FileSystemWatcher to monitor file /folder changes. However, none of these methods survive a exit at the console or wherever the script is running. This is because all these methods create a temporary event consumer. As I’d mentioned in an earlier post, &lt;a href=&#34;http://www.twitter.com/pcgeek86&#34;&gt;Trevor’s &lt;/a&gt;&lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; module makes it very easy to create permanent event consumers in PowerShell. In today’s post, we shall look at how we can do that.&lt;/p&gt;
&lt;p&gt;Before we dig into that, let us first see how we can create a file monitoring script using PowerShell. Many people use CIM_DirectoryContainsFile class and create an event listener. This is how we use do that class in PowerShell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;CIM_DirectoryContainsFile&amp;#39; AND TargetInstance.GroupComponent=&amp;#39;Win32_Directory.Name=&amp;#34;&amp;#34;C:\\\\Scripts&amp;#34;&amp;#34;&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action {
        Write-Host &amp;#34;A new file $($event.SourceEventArgs.NewEvent.TargetInstance.PartComponent) got created&amp;#34;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/monitor1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above output, what we get as a part of event data is just that string contained in &lt;strong&gt;$Event.SourceEventArgs.NewEvent.TargetInstance.PartComponent&lt;/strong&gt;. Of course, if you are RegEx lover, you’d just parse that and find the name (extension, etc) of the new file that just got created. However, there is an efficient and easy way to do that. And, that is: monitoring the CIM_DataFile class itself. This is how we do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;CIM_DataFile&amp;#39; AND TargetInstance.Drive=&amp;#39;C:&amp;#39; AND TargetInstance.Path=&amp;#39;\\Scripts\\&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action {
        $event.SourceEventArgs.NewEvent.TargetInstance | Select -Expand FileName, Extension, Name | Out-Host
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And, this is what we see in the output.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/monitor1-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;We selected only a few properties from the available list of properties. But, this should give you an idea why I prefer using CIM_DataFile as compared to CIM_DirectoryContainsFile when monitoring for file creation. Similarly, we can monitor file deletions and modifications by subscribing to &lt;strong&gt;__InstanceDeletionEvent&lt;/strong&gt; and &lt;strong&gt;__InstanceModificationEvent&lt;/strong&gt;. The usage of these two classes is more or less similar. So, I will skip those aspects in this post.&lt;/p&gt;
&lt;p&gt;However, as I mentioned earlier, we are only creating temporary event consumers by using Register-WMIEvent cmdlet. This is not really helpful since we have to keep the console window where we registered the event always open. We can solve this problem by using a permanent WMI event consumer. This is what PowerEvents module does. It helps us create any of the five permanent WMI consumers.&lt;/p&gt;
&lt;p&gt;So, for todays post, we shall look at creating a log file consumer using PowerEvents module.&lt;/p&gt;
&lt;p&gt;First, we need &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;download &lt;/a&gt;and import the module using Import-Module cmdlet. Once this is done, we need to create an event filter for the event we want to subscribe. This is done using &lt;strong&gt;New-WMIEventFilter&lt;/strong&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;CIM_DataFile&amp;#39; AND TargetInstance.Drive=&amp;#39;C:&amp;#39; AND TargetInstance.Path=&amp;#39;\\Scripts\\&amp;#39;&amp;#34;
$eventFilter = New-WmiEventFilter -Name &amp;#34;FileMonitor&amp;#34; -Query $query
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we need to create a event consumer. In this case, a log file consumer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$eventConsumer = New-WmiEventConsumer -ConsumerType LogFile -Name NewFileCreated -FileName C:\Logs\FileMonitor.log `
 -Text &amp;#34;New File has been created: %TargetInstance.Name%&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have both filter and consumer, we can bind them together to create the permanent event consumer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#This is how we create a binding
New-WmiFilterToConsumerBinding -Filter $eventFilter -Consumer $eventConsumer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is it. Now, whenever a file gets created in the C:\Scripts folder, we’ll see a entry in the log file at C:\Logs\FileMonitor.log. It’d look like:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/monitor1-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;These log entries will appear even after a system reboot. This is the benefit of WMI permanent consumers. If you want to learn more about WMI query language syntax used in this post, refer to my &lt;a href=&#34;http://139.59.40.198/blog/?p=1845&#34;&gt;WQL series&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating complex scheduled tasks using WMI Timer events and PowerEvents Module</title>
      <link>https://ravichaganti.com/blog/creating-complex-scheduled-tasks-using-wmi-timer-events-and-powerevents-module/</link>
      <pubDate>Sat, 25 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/creating-complex-scheduled-tasks-using-wmi-timer-events-and-powerevents-module/</guid>
      <description>&lt;p&gt;A few weeks ago, I wrote about &lt;a href=&#34;http://139.59.40.198/blog/?p=1751&#34;&gt;WMI Timer events using Win32_LocalTime&lt;/a&gt; and then mentioned how to &lt;a href=&#34;http://139.59.40.198/blog/?p=1773&#34;&gt;work around the DayOfWeek issue&lt;/a&gt;. In today’s post, I will show you how to use WMI timer events to create complex scheduled tasks.&lt;/p&gt;
&lt;p&gt;As system administrators, you may have to create scheduled jobs for performing various sysadmin tasks. We generally use Task Scheduler for such jobs. However, using the regular OS task scheduler, there is no easy way to create a scheduled task that occurs — for example — &lt;strong&gt;every Thursday of every fourth week of a month in the third quarter of every year.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/powerevents1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As I mentioned in my earlier posts, this is one area where WMI timer events are quite useful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=3) AND
          (TargetInstance.WeekInMonth=4) AND
          (TargetInstance.DayOfWeek=4 OR TargetInstance.DayOfWeek=9) AND
          (TargetInstance.Hour=12) AND
          (TargetInstance.Minute=0) AND
          (TargetInstance.Second=0)&amp;#34;                        

Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Execute your scheduled task here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the major drawback of Register-WMIEvent is that the event registration is alive only until the PowerShell consle window is open. So, for this task to execute, you must have the console window open at all times. This is because Register-WMIEvent creates only a temporary event consumer. &lt;strong&gt;So, how do we create a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390825(v=vs.85).aspx#wmi.gloss_permanent_consumer&#34;&gt;permanent event consumer&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can use &lt;a href=&#34;http://trevorsullivan.net/&#34;&gt;Trevor&lt;/a&gt;‘s (@pcgeek86) &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; PowerShell module.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;what-is-powerevents&#34;&gt;What is PowerEvents?&lt;/h4&gt;
&lt;p&gt;PowerEvents is a Windows PowerShell v2.0 module designed to facilitate the ease of creating, updating, and deleting WMI (&lt;em&gt;Windows Management Instrumentation&lt;/em&gt;) permanent event registrations. PowerEvents makes it easy to create WMI event filters (define the events you want to capture) and event consumers (responders to events), and then bind them together to initiate the flow of events. By leveraging permanent event registrations, you can perform advanced monitoring functions on a workstation or server, that would otherwise require implementation of an enterprise monitoring product. Because WMI is incredibly vast in the information it provides, very detailed monitoring can be performed using almost any of the WMI objects that exist on a computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393649(v=vs.85).aspx&#34;&gt;five types of permanent event consumers&lt;/a&gt; that are possible (out-of-the-box) in WMI and the PowerEvents module provides cmdlets to create these five event consumers. In today’s post, lets look at the command-line event consumer. This is the apt choice for creating scheduled tasks in combination with WMI timer events.&lt;/p&gt;
&lt;p&gt;To be able to receive WMI events at all time, we need to create an event filter, create an event consumer, and then bind them together. This process is explained in detail at &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393014(v=vs.85).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/aa393014%28v=vs.85%29.aspx&lt;/a&gt;. We will see how PowerEvents PowerShell module makes it easy using the new cmdlets.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At the time of writing this post, the publicly available PowerEvents release (0.2 alpha) did not have a functional command-line consumer. To be able to use the command-line consumer as shown in this post, you need to download the &lt;a href=&#34;http://powerevents.codeplex.com/SourceControl/changeset/changes/99440d1d4431&#34;&gt;changeset &lt;/a&gt;listed under source code tab.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;creating-an-event-filter&#34;&gt;Creating an event filter&lt;/h3&gt;
&lt;p&gt;An event filter is an instance of the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394639(v=vs.85).aspx&#34;&gt;&lt;strong&gt;__EventFilter&lt;/strong&gt;&lt;/a&gt; system class that describes an event type and the conditions for delivering a notification. So, in our case it is the same WQL query we used in the example above. PowerEvents module provides a cmdlet to create an event filter — &lt;em&gt;&lt;strong&gt;New-WMIEventFilter&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
              (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
              (TargetInstance.Quarter=3) AND
              (TargetInstance.WeekInMonth=4) AND
              (TargetInstance.DayOfWeek=4 OR TargetInstance.DayOfWeek=9) AND
              (TargetInstance.Hour=12) AND
              (TargetInstance.Minute=0) AND
              (TargetInstance.Second=0)&amp;#34;
$taskFilter = New-WmiEventFilter -Name &amp;#34;WQL for 3rd quarter timer event&amp;#34; -Query $query
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is it. You have the event filter created. Make a note that you need to store the event filter instance in a variable. This is required since the published version of PowerEvents has no cmdlet way to get a list of event filters. Also, see how I’d used TargetInstance.DayOfweek=9. In real world, there is no 9th DayOfWeek. This is just a &lt;a href=&#34;http://139.59.40.198/blog/?p=1773&#34;&gt;work around&lt;/a&gt; we need to put in place to make sure the event gets triggered on the desired day of week — in this case 4 (Thursday). We could use a WMI query to get that list but I will save it for another post.&lt;/p&gt;
&lt;h3 id=&#34;creating-an-event-consumer&#34;&gt;Creating an event consumer&lt;/h3&gt;
&lt;p&gt;An event consumer is a recipient of notifications that report an occurrence of an event. An event consumer is either &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390839(v=vs.85).aspx#wmi.gloss_temporary_consumer&#34;&gt;&lt;em&gt;temporary&lt;/em&gt;&lt;/a&gt; or &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390825(v=vs.85).aspx#wmi.gloss_permanent_consumer&#34;&gt;&lt;em&gt;permanent&lt;/em&gt;&lt;/a&gt;. The cmdlet for creating an event consumer is &lt;em&gt;&lt;strong&gt;New-WMIEventConsumer.&lt;/strong&gt;&lt;/em&gt; In this post, I will show you how to create a command-line consumer. The idea is to invoke a backup script when the event fires. For a list of other consumer types, refer to &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393649(v=VS.85).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/aa393649%28v=VS.85%29.aspx&lt;/a&gt;. Here is how we create a permanent event consumer using PowerEvents module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$cmdConsumer = New-WmiEventConsumer -Verbose -Name &amp;#34;bkConsumer1&amp;#34; -ConsumerType CommandLine -CommandLineTemplate &amp;#34;cmd.exe /c `&amp;#34;C:\Scripts\backup.bat`&amp;#34;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The *&lt;strong&gt;-CommandLineTemplate*&lt;/strong&gt; takes the path to the backup script. Also, note that the &lt;em&gt;&lt;strong&gt;ConsumerType&lt;/strong&gt;&lt;/em&gt; is set to CommandLine in this case. Again, make sure you store the instance of consumer in a variable. We need it later.&lt;/p&gt;
&lt;h3 id=&#34;binding-a-filter-and-consumer-together&#34;&gt;Binding a filter and consumer together&lt;/h3&gt;
&lt;p&gt;Now, as a final step, we need to bind the event filter and the consumer together so that the backup script gets invoked when the timer event gets triggered on the specified date &amp;amp; time. To do this, we will use &lt;em&gt;&lt;strong&gt;New-WMIFilterConsumerBinding&lt;/strong&gt;&lt;/em&gt; cmdlet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;New-WmiFilterToConsumerBinding -Filter $taskFilter -Consumer $cmdConsumer -Verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember why I said that we need to store the instances of filter and consumer? It makes it easy to bind them together.&lt;/p&gt;
&lt;p&gt;This is it. The backup script gets triggered once the timer event gets fired. This is just one example of creating complex scheduling tasks using WMI timer events. And, using PowerEvents makes it easy to create permanent event consumers. Go and explore it yourself.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Extrinsic Events</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-extrinsic-events/</link>
      <pubDate>Fri, 24 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-extrinsic-events/</guid>
      <description>&lt;p&gt;In this part of the WQL series, we shall look at extrinsic events.&lt;/p&gt;
&lt;p&gt;Extrinsic events represent events that do not directly link to standard WMI model. For example, Windows registry defines extrinsic events for all registry change events. For intrinsic events, having a WMI provider isn’t mandatory. This is mostly because they are defined within the standard WMI model and WMI takes care of these if there is no WMI provider for a given resource in the standard WMI model. However, since extrinsic events are outside of the standard WMI model, having a WMI provider is mandatory.&lt;/p&gt;
&lt;p&gt;When creating a WMI query for extrinsic events, we need to use a class derived from __ExtrinsicEvent class. Take a look at this CIM Studio capture.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL9-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see, there is registry provider that provides extrinsic events. So, rest of this post, will use the extrinsic event classes from registry provider to show we can create event notifications for extrinsic events.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: We cannot use __InstanceDeletionEvent, __InstanceCreationEvent, __InstanceModificationevent, or __InstanceOperationEvent for monitoring extrinsic events. This should be obvious from the above screen capture.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;monitoring-registry-value-change-events&#34;&gt;Monitoring registry value change events&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;&lt;strong&gt;RegistryValueChangeEvent&lt;/strong&gt;&lt;/em&gt; to monitor changes to registry values. Here is how we write a WMI query for registry value change events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryValueChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND KeyPath=&amp;#39;Software\\Temp&amp;#39; AND ValueName=&amp;#39;Name&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Value changed&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes, that is it. So, when the monitored value changes, you will see the message “value changed” on the screen. However, there is one drawback here. The event notification only tells you that the value has been modified but it won’t return the new value.! Also, deleting a value is also considered modification and you receive a notification. But, agian, the notification won’t tell you that the value was deleted. See the next screen capture.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL9-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Although I deleted the value, the resulting event notification does not tell us anything about that value deletion. So, in the -Action script block, we will have to verify the presence of registry value we are monitoring and then display the new value. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryValueChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND KeyPath=&amp;#39;Software\\Temp&amp;#39; AND ValueName=&amp;#39;Name&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action {
            if ((Get-item HKLM:\SOFTWARE\Temp).GetValue(&amp;#34;Name&amp;#34;)) {
                write-host (Get-item HKLM:\SOFTWARE\Temp).GetValue(&amp;#34;Name&amp;#34;)
            } else {
                Write-host &amp;#34;The registry value was deleted&amp;#34;
            }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;monitoring-registry-key-change-events&#34;&gt;Monitoring registry key change events&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;RegistryKeyChangeEvent&lt;/strong&gt;&lt;/em&gt; can be used to monitor modifications to a registry subkey. Similar to &lt;em&gt;&lt;strong&gt;RegistryValueChangeEvent&lt;/strong&gt;&lt;/em&gt;, this event notification also won’t give you any information beyond subkey modification. Here is how we use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryKeyChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND KeyPath=&amp;#39;Software\\Temp&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action { Write-host &amp;#34;Something changed&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once again, you need to use some technique similar to whats shown above to retrieve the “real” modification that happened.&lt;/p&gt;
&lt;h3 id=&#34;monitoring-registry-tree-change-events&#34;&gt;Monitoring registry tree change events&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;RegistryTreeChangeEvent&lt;/strong&gt;&lt;/em&gt; can be used to monitor subtree level modifications. Similar to other two event classes in the registry provider, this event class provides a notification that a change occurred but won’t tell you about what had changed. So, we got to use a method of our own to detect what change generated the event notification.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from RegistryTreeChangeEvent WHERE Hive=&amp;#39;HKEY_LOCAL_MACHINE&amp;#39; AND RootPath=&amp;#39;&amp;#39;&amp;#34;
Register-WmiEvent -Query $query -Action { Write-host &amp;#34;Something changed&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many vendor provided extrinsic event classes. For example, take a look at how Intel ME WMI provider uses extrinsic events for firmware state notifications: &lt;a href=&#34;http://software.intel.com/sites/manageability/AMT_Implementation_and_Reference_Guide/default.htm?turl=WordDocuments%2Fwmievents.htm&#34;&gt;http://software.intel.com/sites/manageability/AMT_Implementation_and_Reference_Guide/default.htm?turl=WordDocuments%2Fwmievents.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is it about extrinsic events and WMI event queries. Go and explore these using the examples I’d used through out. We shall look at WMI schema queries in the next part of this series. Stay tuned.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Schema Queries</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-schema-queries/</link>
      <pubDate>Fri, 24 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-schema-queries/</guid>
      <description>&lt;p&gt;In this last and final part of this series, we will look at how to use WQL for querying the WMI schema.&lt;/p&gt;
&lt;p&gt;Schema queries are used to retrieve class definitions (rather than class instances) and schema associations. In simple words, if you need to find out what type of information (this is what schema really means) a specific class holds, you use schema queries.Here is an example of a schema query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM meta_class where __this ISA &amp;#39;Win32_Process&amp;#39;&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And, this is what you would see when you execute this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL10-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In one of the earlier posts, we looked at retrieving class definitions with &lt;a href=&#34;http://139.59.40.198/blog/?p=1580&#34;&gt;ASSOCIATORS OF&lt;/a&gt; and &lt;a href=&#34;http://139.59.40.198/blog/?p=1624&#34;&gt;REFERENCES OF&lt;/a&gt; keywords. So, &lt;strong&gt;how are the schema queries different from the data queries using these two keywords?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, the above keywords return class definitions only when there are instances of those classes present. Using a schema query, we can retrieve the class definitions even when there is no instance present.&lt;/p&gt;
&lt;p&gt;To understand what I just said, take a look at this example that shows how a WMI query was built when using REFERENCES OF.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;REFERENCES OF {Win32_Process=$pid} WHERE ClassDefsOnly&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See the {Win32_Process=$pid} part of the query. We have to specify some identifier so that we can get an instance. In the above example, we used $pid variable. $pid is the process ID of PowerShell host. If we don’t specify a PID or some other identifier to get the instance, we end up with an error while executing the query. Now, go back and take a look at how we the schema query. We did not specify any kind of an identifier or property anywhere and we were still able to get the class definitions. That is the difference.&lt;/p&gt;
&lt;p&gt;Let us dig a bit in to the schema query syntax.&lt;/p&gt;
&lt;p&gt;We are familiar with &lt;em&gt;SELECT&lt;/em&gt; keyword. When building schema queries, only “*” is supported. Unlike other queries, you cannot do some thing like &lt;em&gt;SELECT xyz FROM abc&lt;/em&gt;. It has to be *SELECT ** always. And, the use of &lt;a href=&#34;http://en.wikipedia.org/wiki/Metaclass&#34;&gt;&lt;em&gt;&lt;strong&gt;meta_class&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; specifies that we are building a schema query. The only way to narrow down results when using schema queries is to use WHERE clause. Let us now look at a few ways to narrow the query results.&lt;/p&gt;
&lt;h4 id=&#34;using-__this&#34;&gt;Using __this&lt;/h4&gt;
&lt;p&gt;__this is a special property that identifies the target class for the query and using an ISA operator is must. This requests the definitions for the subclasses of the target class. Here is how you use this method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM meta_class where __this ISA &amp;#39;Win32_LogicalDisk&amp;#39;&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This when executed, returns the class definitions of Win32_LogicalDisk and all its subclasses.&lt;/p&gt;
&lt;h4 id=&#34;using-__class&#34;&gt;Using __Class&lt;/h4&gt;
&lt;p&gt;Using __Class, we can request for the class definitions of a single class and this is how we do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;SELECT * FROM meta_class where __class=&amp;#39;Win32_LogicalDisk&amp;#39;&amp;#34;
Get-WmiObject -Query $query | fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a brief overview of schema queries. We seldom need to use schema queries and IT Pros will probably never have to use this type queries. You can also use *&lt;strong&gt;REFERENCES OF*&lt;/strong&gt; and &lt;em&gt;&lt;strong&gt;ASSOCIATORS OF&lt;/strong&gt;&lt;/em&gt; keywords to get schema associations. You can use the &lt;em&gt;&lt;strong&gt;SchemaOnly&lt;/strong&gt;&lt;/em&gt; qualifier in the WHERE clause to retrieve the schema associations of a class.&lt;/p&gt;
&lt;p&gt;This is it. This ends the series on WMI query language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Intrinsic Events</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-intrinsic-events/</link>
      <pubDate>Wed, 22 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-intrinsic-events/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Intrinsic events&lt;/strong&gt; are used to monitor a resource represented by a class in the CIM repository. In other words, the intrinsic events occur in response to a change in the standard WMI data model. WMI creates intrinsic events for objects stored in the WMI repository. A provider generates intrinsic events for dynamic classes, but WMI can create an instance for a dynamic class if no provider is available. WMI uses polling to detect the changes.&lt;/p&gt;
&lt;p&gt;There are many system classes that WMI uses to report intrinsic events. However, the ones that are most interesting and useful are __InstanceCreationEvent, __InstanceModificationEvent, and __InstanceDeletionEvent. Hence, monitoring resources on a system involves monitoring of these system classes. These classes are derived from the __InstanceOperationEvent class which is derived from the __Event system class under root\Default namespace. The following capture of WMI CIM Studio shows this hierarchy.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL8-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The WQL syntax for WMI intrinsic event queries is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT \* FROM __InstanceXEvent WITHIN PollingInterval WHERE TargetInstance ISA WMIClassName AND TargetInstance.WMIClassPropertyName = Value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is something similar to what we saw in the earlier post about WQL syntax for event queries. The __InstanceXEvent can be any of the system classes such as __InstanceCreationEvent, __InstanceModificationEvent, __InstanceDeletionEvent, and __InstanceOperationEvent. &lt;strong&gt;Now, when do we use each of these event classes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__InstanceCreationEvent&lt;/strong&gt; is used when we want to receive a notification upon creation of an instance. For example, we can use this event class when you want to receive an event notification every time a new process gets created. This can be done by,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for new process events
$query = &amp;#34;Select * from __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA &amp;#39;Win32_Process&amp;#39;&amp;#34;
#Register WMI event
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;New Process Created. Do something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;__InstanceDeletionEvent&lt;/strong&gt; is used when we want to receive a notification upon deletion of an instance. For example, we can use this class when we want to receive an event notification every time a process is terminated. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for new process events
$query = &amp;#34;Select * from __InstanceDeletionEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;Win32_Process&amp;#39;&amp;#34;
#Register WMI event
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;A Process terminated. Do something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;__InstanceModificationEvent&lt;/strong&gt; is used when we want to monitor changes to an existing instance or a resource. For example, we can use this class when we want to receive an event notification when a the processor utilization on a system goes beyond a specified usage threshold. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Query for new process events
$query = &amp;#34;Select * from __InstanceModificationEvent WITHIN 5 WHERE TargetInstance ISA &amp;#39;Win32_Processor&amp;#39; AND TargetInstance.LoadPercentage &amp;gt; 80&amp;#34;
#Register WMI event
Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Processor utilization is more than 80%. Do something useful here&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of the examples above just displayed a message when the event notification was received. Instead, we can do something useful within the script block. For example, in the __InstanceCreationEvent example, we are just displaying that a new process was created but not the process name that just got created. &lt;strong&gt;So, how do we access that information in the script block and tell a user the name of the process that was created?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Simple, PowerShell creates an automatic variable called $event and stores the last event received in that variable. And, this automatic variable can be accessed in the -Action scriptblock you specify during a WMI event registration. Let us see an example.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL8-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you see in the above example, I made an event registration for process creation events and in the -Action script block, assigned the $event variable to a variable in the global scope ($myEvent). This is essential because we cannot access the $event variable outside the -Action script block. Once the registration was done, I opened a notepad. This will fire the __InstanceCreationEvent and $myEvent should have the details around the event. So, I tried looking at all the members of this event. After exploring that a bit, I figured out that $myEvent.SourceEventArgs.NewEvent.TargetInstance.Name has the name of the new process which is notepad.exe. This is precisely what you see in the last line there.&lt;/p&gt;
&lt;p&gt;$Event.SourceEventArgs.NewEvent.TargetInstance will have the instance of the newly created process. I will leave it to you to explore more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Syntax</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-syntax/</link>
      <pubDate>Wed, 22 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-syntax/</guid>
      <description>&lt;p&gt;The WMI query syntax for event queries is a bit different and deserves a discussion. So, before we delve in to the types of event queries, let us first look at the syntax for WQL event queries. As we discussed &lt;a href=&#34;http://139.59.40.198/blog/?p=1508&#34;&gt;earlier&lt;/a&gt;, we use SELECT statement for event queries too. We can combine this with other keywords such as WITHIN, HAVING, and GROUP to change how we receive these WMI events.&lt;/p&gt;
&lt;p&gt;Here is how a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/cc250721(v=PROT.10).aspx&#34;&gt;MSDN article&lt;/a&gt; shows the syntax for WMI event queries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EVENT-WQL = “SELECT” &lt;!-- raw HTML omitted --&gt; “FROM” /
&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;OPTIONAL-WITHIN = [“WITHIN” &lt;!-- raw HTML omitted --&gt;]
INTERVAL = 1*DIGIT
EVENT-WHERE = [“WHERE” &lt;!-- raw HTML omitted --&gt;]&lt;/p&gt;
&lt;p&gt;EVENT-EXPR = ( (&lt;!-- raw HTML omitted --&gt; “ISA” &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;) /
&lt;!-- raw HTML omitted --&gt; )
[“GROUP WITHIN” &lt;!-- raw HTML omitted --&gt;
( [“BY” [&lt;!-- raw HTML omitted --&gt; DOT] &lt;!-- raw HTML omitted --&gt;]
[“HAVING” &lt;!-- raw HTML omitted --&gt;]] )
INSTANCE-STATE = “TARGETINSTANCE” / “PREVIOUSINSTANCE”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above syntax specification, we know the SELECT, FROM, and WHERE keywords. There are also other keywords such as WITHIN, GROUP, BY, and HAVING. Let us look at each one of these keywords now.&lt;/p&gt;
&lt;h4 id=&#34;within&#34;&gt;WITHIN&lt;/h4&gt;
&lt;p&gt;WITHIN keyword is used to specify the polling interval or grouping interval (used with GROUP clause) for the events. A polling interval is the interval that WMI uses as the maximum amount of time that can pass before notification of an event must be delivered. The general syntax to specify the polling interval,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT * FROM eventclass WITHIN interval WHERE property = value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The polling interval value is specified as number of seconds and is a floating point number. So, we can specify values smaller than one second. However, specifying a polling interval smaller than one second (for example, 0.1) may cause system slow down due to the resource intensive nature of event queries. The recommended values for the polling interval really depend on the event calss. Do not use a small value here unless you really need the event notification be delivered immediately.&lt;/p&gt;
&lt;h4 id=&#34;group&#34;&gt;GROUP&lt;/h4&gt;
&lt;p&gt;Using GROUP clause causes WMI to generate a single notification to represent a group of events. When used in a WMI event query, this returns an instance of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394623(v=VS.85).aspx&#34;&gt;__AggregateEvent&lt;/a&gt; that contains an embedded object of one of the instances received during the grouping interval and number of such events received. These two are represented by &lt;strong&gt;representative&lt;/strong&gt; &amp;amp; &lt;strong&gt;NumberOfEvents&lt;/strong&gt; properties respectively. The grouping interval specifies the time period, after receiving an initial event, during which WMI should collect similar events. The GROUP clause must contain a WITHIN clause to specify the grouping interval and can contain the BY or HAVING keyword, or both. And, the GROUP clause is placed after the WHERE clause if the query contains a WHERE clause. Here is the syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT * FROM EventClass [WHERE property = value] GROUP WITHIN interval
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The WHERE, BY, and HAVING clauses are optional.&lt;/p&gt;
&lt;p&gt;This is especially useful when we don’t want to receive an event notification every time the event fires. For example, when monitoring a system, we may not want to receive a notification every time an specific event log gets generated. Instead, we can use GROUP clause to specify a grouping interval and receive only one notification for all the desired event logs generated within the grouping interval. Something similar to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Build a WMI query for receiving an event
$query = &amp;#34;Select * from __instanceCreationEvent WHERE TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; ANDTargetInstance.EventCode=1980 GROUP WITHIN 300&amp;#34;
#Register the event
Register-WmiEvent -Query $query -Action {Write-Host &amp;#34;Eventlog Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;having&#34;&gt;HAVING&lt;/h4&gt;
&lt;p&gt;In the above imaginary example, we will receive an event notification for all the events received within the grouping interval. But, what if we want to receive the event notification only when ten such event logs are generated within the grouping interval? This is where HAVING plays an important role. Let us look at how we can modify the above sample code to use HAVING keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Build a WMI query for receiving an event
$query = &amp;#34;Select * from __instanceCreationEvent WHERE TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; ANDTargetInstance.EventCode=1980 GROUP WITHIN 300 HAVING NumberOfEvents &amp;gt; 10&amp;#34;
#Register the event
Register-WmiEvent -Query $query -Action {Write-Host &amp;#34;Eventlog Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I mentioned earlier that by using GROUP returns a property called &lt;strong&gt;NumberOfEvents&lt;/strong&gt; that contains the number of events received during the grouping interval. Now, we use that property along with HAVING keyword to filter event notifications. Here is the syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT \* FROM EventClass [WHERE property = value]
GROUP WITHIN interval HAVING NumberOfEvents operator constant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, using the HAVING query as shown above, an event notification is delivered only when WMI receives more than 10 events in the grouping interval.&lt;/p&gt;
&lt;h4 id=&#34;by&#34;&gt;BY&lt;/h4&gt;
&lt;p&gt;You can use BY keyword along with GROUP clause to group events by one or more properties of the event class. The general syntax for using BY is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;SELECT \* FROM EventClass [WHERE property = value]
GROUP WITHIN interval [BY property_list]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, The following example groups all events received in 300 seconds by the TargetInstance.SourceName property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Build a WMI query for receiving an event
$query = &amp;#34;Select * from __instanceCreationEvent WHERE TargetInstance ISA &amp;#39;Win32_NTLogEvent&amp;#39; `
                                                GROUP WITHIN 300 BY TargetInstance.SourceName `
                                                HAVING NumberOfEvents &amp;gt; 10&amp;#34;
#Register the event
Register-WmiEvent -Query $query -Action {Write-Host &amp;#34;Eventlog Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the events are grouped by the TargetInstance.SourceName property and an event notification is delivered only if the number of events received during the grouping interval exceeds 10.&lt;/p&gt;
&lt;p&gt;So far, we looked at all the important keywords that can be used while building WMI event queries. But, if you have observed, I kept using the words *&lt;strong&gt;eventclass*&lt;/strong&gt; and *&lt;strong&gt;TargetInstance*&lt;/strong&gt;. What are these?&lt;/p&gt;
&lt;h4 id=&#34;event-classes&#34;&gt;Event Classes&lt;/h4&gt;
&lt;p&gt;As discussed earlier, an event class is a WMI class that &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390797(v=VS.85).aspx#wmi.gloss_event_consumer&#34;&gt;&lt;em&gt;event consumers&lt;/em&gt;&lt;/a&gt; can subscribe to by an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390797(v=VS.85).aspx#wmi.gloss_event_query&#34;&gt;&lt;em&gt;event query&lt;/em&gt;&lt;/a&gt;. The class reports a specific type of occurrence. For example, the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394376(v=VS.85).aspx&#34;&gt;&lt;strong&gt;Win32_ProcessStopTrace&lt;/strong&gt;&lt;/a&gt; class reports that a specific process has stopped. In the upcoming parts of this series, we will look at several examples of event classes when we discuss intrinsic and extrinsic events. In fact, __InstanceCreationEvent we used in all the above examples is a part of event classes that are used for intrinsic event queries. More on this later.&lt;/p&gt;
&lt;h4 id=&#34;targetinstance&#34;&gt;TargetInstance&lt;/h4&gt;
&lt;p&gt;TargetInstance references to the instance of the event class. This is precisely the reason why we could use TargetInstance.SourceName or TargetInstance.EventCode in the examples above. Also, take a look at the query again. To refer to an event class instance, we specified TargetInstance ISA ‘Win32_NTLogEvent’. Make a note that we did not use “=” operator or “IS” operator. The only valid comparison operator when referecing TargetInstance is “ISA”.&lt;/p&gt;
&lt;p&gt;This concludes today’s post on WQL syntax for event queries. We shall look at intrinsic and extrinsic events in the upcoming parts. Stay tuned.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workarounds for DayOfWeek Timer events when using Win32_LocalTime</title>
      <link>https://ravichaganti.com/blog/workarounds-for-dayofweek-timer-events-when-using-win32_localtime/</link>
      <pubDate>Fri, 03 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/workarounds-for-dayofweek-timer-events-when-using-win32_localtime/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;http://139.59.40.198/blog/?p=1751&#34;&gt;earlier post&lt;/a&gt;, I showed how Win32_LocalTime WMI class can be used to capture timer events. As mentioned there, WMI events can be quite helpful in creating complex scheduling tasks. For example, you can specify to run a script every Thursday of every fourth week of a month in the third quarter of every year. However, there is a bug in Win32_LocalTime that currently blocks this.&lt;/p&gt;
&lt;p&gt;I created a support incident with MS and reported this bug to them. I got a response that this indeed is a bug and they provided a workaround to solve this temporarily.&lt;/p&gt;
&lt;p&gt;Let us see this with an example. I will use the same scenario I mentioned earlier: &lt;strong&gt;every Thursday of every fourth week of a month in the third quarter of every year&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=3) AND
          (TargetInstance.WeekInMonth=4) AND
          (TargetInstance.DayOfWeek=4 OR TargetInstance.DayOfWeek=5) AND
          (TargetInstance.Hour=12) AND
          (TargetInstance.Minute=0) AND
          (TargetInstance.Second=0)&amp;#34;            

Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Event Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Observe how I used DayOfWeek property twice in the query. This is the workaround. This event fires only when DayOfWeek is used this way. However, the side effect of this is: the event fires on both Thursday (4) and Friday (5). We can workaround this in a couple of ways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. You can check for DayOfWeek in the -Action script block as shown here.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=4) AND
          (TargetInstance.WeekInMonth=1) AND
          (TargetInstance.Hour=19) AND
          (TargetInstance.Minute=41) AND
          (TargetInstance.Second=0)&amp;#34;            

Register-WmiEvent -Query $query -Action { if ($MyEvent.SourceEventArgs.NewEvent.TargetInstance.DayOfWeek -eq 5) { write-Host &amp;#34;Event Arrived&amp;#34; } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. You can provide some dummy DayOfWeek value, anything outside 0-6&lt;/strong&gt;. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$query = &amp;#34;Select * from __InstanceModificationEvent WHERE
          (TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;) AND
          (TargetInstance.Quarter=4) AND
          (TargetInstance.WeekInMonth=1) AND
          (TargetInstance.DayOfWeek=5 OR TargetInstance.DayOfWeek=9) AND
          (TargetInstance.Hour=19) AND
          (TargetInstance.Minute=41) AND
          (TargetInstance.Second=0)&amp;#34;            

Register-WmiEvent -Query $query -Action { Write-Host &amp;#34;Event Arrived&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way event fires on Thursday as desired and the second check for DayOfWeek=9 will never fire. This is it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Timer Events in PowerShell using Win32_LocalTime</title>
      <link>https://ravichaganti.com/blog/wmi-timer-events-in-powershell-using-win32_localtime/</link>
      <pubDate>Wed, 24 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-timer-events-in-powershell-using-win32_localtime/</guid>
      <description>&lt;p&gt;This is not a part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=261&#34;&gt;WQL series&lt;/a&gt; I am doing. I happend to take a look at the WMI timer events while providing feedback to an upcoming (cool) &lt;a href=&#34;http://powerevents.codeplex.com/&#34;&gt;PowerEvents&lt;/a&gt; module by &lt;a href=&#34;http://trevorsullivan.net/&#34;&gt;Trevor&lt;/a&gt; (@pcgeek86). BTW, this module will be released on November 30th. So, watch out for the annoncement.&lt;/p&gt;
&lt;p&gt;Coming to the subject of this post, in WMI, there are 3 types of events possible. They are Timer events, Intrinsic events, and extrinsic events. My WQL series will soon cover intrinsic and extrensic events. Very few people have written about WMI timer events in the past but &lt;a href=&#34;http://theadminblog.blogspot.com/2009_02_01_archive.html&#34;&gt;this &lt;/a&gt;particular post on &lt;a href=&#34;http://theadminblog.blogspot.com/&#34;&gt;The SysAdmins blog &lt;/a&gt;discusses good amount of details.&lt;/p&gt;
&lt;p&gt;In today’s post, I am going to write about WMI timer events in PowerShell and how to use Register-WMIEvent cmdlet to create a temporary consumer to consume these events. In general, WMI timer events are generated by WMI infrastructure at a point in time. In the good old days of Windows 2000, we had to capture these by creating an instance of classes derived from the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394685(v=VS.85).aspx&#34;&gt;__TimerInstruction&lt;/a&gt; class. Also, there are two types of timer events.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Absolute Timer Events&lt;/strong&gt; occur on a specific day at a specific time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interval Timer Events&lt;/strong&gt; are events that occur periodically at specified intervals. For example, every 30 minutes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prior to Windows 2003, we have had to use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394620(v=VS.85).aspx&#34;&gt;__AbsoluteTimerInstruction&lt;/a&gt; class and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394654(v=VS.85).aspx&#34;&gt;__IntervalTimerInstruction&lt;/a&gt; class to define these events. However, that isn’t necessary anymore with the introduction of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394171(v=VS.85).aspx&#34;&gt;Win32_LocalTime&lt;/a&gt; or &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394510(v=VS.85).aspx&#34;&gt;Win32_UTCTime&lt;/a&gt; WMI classes. With these two classes, we can use the standard WMI eventing model to consume timer events.&lt;/p&gt;
&lt;p&gt;Let us take a look at Win32_LocalTime. This class represents an instance of Win32_CurrentTime.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/localtime1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above screenshot, an instance of this class represents the current date and time. There are a few special properties that tell you which quarter of the year, week in the current month, and etc. Do refer to the MSDN link for this class and read about the properties. Especially, the DayOfWeek property. It always indicates Sunday as zero irrespective of the system culture and langauge settings.&lt;/p&gt;
&lt;p&gt;Since, these this class supports standard WMI eventing model, we can use an intrinsic event query to consume these events. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Setup WQL query
$query = &amp;#34;SELECT * FROM __InstanceModificationEvent WHERE TargetInstance ISA &amp;#39;Win32_LocalTime&amp;#39;&amp;#34;
#Register WMI Event
Register-WmiEvent -Query $Query -SourceIdentifier &amp;#34;Event-Every-Second&amp;#34; -Action { Write-Host &amp;#34;Event Received&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will result in displaying “Event Received” message at the console every one second. This is because the event fires every one second and that is the smallest time segment supported. Now, this won’t be very useful unless you want to flood your consumer with a bunch of useless messages every one second. Let us look at another example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Setup WQL query
$query = &amp;#34;SELECT * FROM __InstanceModificationEvent WHERE TargetInstance ISA
            &amp;#39;Win32_LocalTime&amp;#39; AND TargetInstance.Hour=14
                              AND TargetInstance.Minute=30
                              AND TargetInstance.Second=0&amp;#34;
#Register WMI Event
Register-WmiEvent -Query $Query -SourceIdentifier &amp;#34;Event-Every-Day-14.30PM&amp;#34; -Action { Write-Host &amp;#34;Event Received&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, we use WQL query to register for a WMI event that fires every day at 14.30 hours. Note that the hours value is in 24 hour format. Now, this is useful. I can use the -Action script block to do something better like running a backup script when this event fires. Similarly, you can also create event registrations for events occurring on specific day of every quarter (Quarter) or specific week (WeekInMonth) of every month.&lt;/p&gt;
&lt;p&gt;WMI Timer events can be used to create some very advanced scheduling jobs. Register-WMIEvent creates a temporary consumer but just imagine being able to create a permanent consumer and use that for scheduling several administrative tasks. I will update this post once Trevor (@pcgeek86) releases his PowerEvents module and show you some cool tricks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However, here is the catch:&lt;/strong&gt; There is a bug that causes DayOfWeek to stop triggering any timer events.
&lt;strong&gt;Update:&lt;/strong&gt; I posted this question on DayOfWeek at &lt;a href=&#34;http://social.msdn.microsoft.com/Forums/en-US/etw/thread/06b7ae7f-737e-47f2-9ae2-a5b8d4c125a9&#34;&gt;http://social.msdn.microsoft.com/Forums/en-US/etw/thread/06b7ae7f-737e-47f2-9ae2-a5b8d4c125a9&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Setup WQL query for DayOfWeek
$query = &amp;#34;SELECT * FROM __InstanceModificationEvent WHERE TargetInstance ISA
            &amp;#39;Win32_LocalTime&amp;#39; AND TargetInstance.=3
                              AND TargetInstance.Hour=12
                              AND TargetInstance.Minute=16
                              AND TargetInstance.Second=0&amp;#34;
#Register WMI Event
Register-WmiEvent -Query $Query -SourceIdentifier &amp;#34;Event-Every-Tuesday-12-16PM&amp;#34; -Action { Write-Host &amp;#34;Start backup&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a dissappointing bug and I am going to check if MS has any answer. Their documentation for Win32_LocalTime uses a WQL query that has DayOfWeek property. I’d experimented with the same query in PowerShell, VBScript &amp;amp; C#. It worked no where. So, timer events are quite useful in creating advanced scheduling jobs but the current bug is keeping it away from “real” world use.&lt;/p&gt;
&lt;p&gt;I will update this post with the details I find out or get from Microsoft. Keep watching this space.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Event Queries: Introduction</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-introduction/</link>
      <pubDate>Mon, 15 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-event-queries-introduction/</guid>
      <description>&lt;p&gt;In this post, I will write a bit about basics of WMI events and how Register-WMIEvent cmdlet can be used. To start with, here is an excerpt from &lt;a href=&#34;http://technet.microsoft.com/en-us/library/ee156572.aspx&#34;&gt;Microsoft Scripting guide&lt;/a&gt; that introduces WMI events:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just as there is a WMI class that represents each type of system resource that can be managed using WMI, there is a WMI class that represents each type of WMI event. When an event that can be monitored by WMI occurs, an instance of the corresponding WMI event class is created. A &lt;em&gt;WMI event&lt;/em&gt; occurs when that instance is created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Windows PowerShell v2 provides a cmdlet — Register-WMIEvent — to consume WMI events. There are a couple of different ways we can use this cmdlet. You can either use -Class or -Query parameters to create a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393013(VS.85).aspx#event_consumers&#34;&gt;temporary &lt;/a&gt;event consumer. When using -Class parameter, we need to specify a WMI &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa390797(v=VS.85).aspx#wmi.gloss_event_class&#34;&gt;event class&lt;/a&gt;. So, what happens if the value provided to the -Class parameter isn’t a WMI event class? Yes, PowerShell complains about it :).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL6-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;So, PowerShell says that Win32_Process isn’t an event class. Now, how do we know what are the WMI event classes? Simple, we can use a WMI query to find out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Get all classes that are WMI event classes
#filter class names for Win32 classes
Get-WMIObject -Query &amp;#34;Select * from meta_class Where (__This ISA &amp;#39;__Event&amp;#39;) AND (__Class like &amp;#39;win32%&amp;#39;)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will list all WMI event classes that start with Win32 prefix. You will see many more if you remove the second condition in the WHERE clause but for starters, this is good enough. If you execute the above PowerShell command, you will see a WMI class named &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394374(VS.85).aspx&#34;&gt;Win32_ProcessStartTrace&lt;/a&gt;. This class indicates the new process started event. We can use this WMI class to subscribe to all process start events. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Register-WmiEvent -Class Win32_ProcessStartTrace -SourceIdentifier &amp;#34;Process Started&amp;#34; `
                  -Action { Write-Host &amp;#34;$($Event.SourceEventArgs.NewEvent.ProcessName) just started&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You have to open the PowerShell console in elevated mode. Else, you will see an access denied message everytime you try using Register-WMIEvent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This command will register an event consumer and display a message with the newly created process name. However, this will result in receiving the messages at the console everytime any process starts and not just the one you are interested in.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL6-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;So, what if you are interested only in one specific process? We could have easily filtered out the unnecessary processes before displaying the process name at the conole. But, why even receive the event when we don’t need it? This is where -Query parameter comes handy. Look at this example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Register-WMIEvent using -Query
Register-WmiEvent -Query &amp;#34;Select * from Win32_ProcessStartTrace WHERE ProcessName=&amp;#39;notepad.exe&amp;#39;&amp;#34; `
                  -Action {Write-Host &amp;#34;New notepad process created&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The WQL statement we used should be familiar to you by now. There are many other ways to monitor process creation using WMI events and WQL. What I showed above is just one way of doing it. We shall see the other methods soon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WMI Event Types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two types of WMI events one should understand: Intrinsic Events and Extrinsic Events. It is important to understand what are the two types of events before we dig in to WQL for WMI events. There are also timer events but these type of events are rarely used in any system administration type of scripting. So, let us keep it aside for now and visit it towards the end of this series.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intrinsic Events&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intrinsic events are used to monitor a resource represented by a class in the CIM repository. In other words, the intrinsic events occur in response to a change in the standard WMI data model. WMI creates intrinsic events for objects stored in the WMI repository. A provider generates intrinsic events for dynamic classes, but WMI can create an instance for a dynamic class if no provider is available. WMI uses polling to detect the changes. There are many system classes that WMI uses to report intrinsic events. However, the ones that are most interesting and useful are __InstanceCreationEvent, __InstanceModificationEvent, and __InstanceDeletionEvent. Hence, monitoring resources on a system involves monitoring of these system classes. We shall see some examples when we start discussing intrinsic events in the next post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extrinsic Events&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Extrinsic events represent events that do not directly link to standard WMI model. For example, Windows registry defines extrinsic events for all registry change events. For intrinsic events, having a WMI provider isn’t mandatory. This is mostly because they are defined within the standard WMI model and WMI takes care of these if there is no WMI provider for a given resource in the standard WMI model. However, since extrinsic events are outside of the standard WMI model, having a WMI provider is mandatory. We shall see more examples of this in the later posts.&lt;/p&gt;
&lt;p&gt;This concludes today’s post. I just introduced you to WMI events, showed some basic examples of using Register-WMIEvent cmdlet, and provided an introduction to different event types. In the next post, I shall talk about WQL syntax for writing event queries and then move on to showing some examples for intrinsic WMI events. Stay tuned.!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Data Queries: References Of</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-references-of/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-references-of/</guid>
      <description>&lt;p&gt;Per MSDN documentation, the REFERENCES OF statement&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retrieves all association instances that refer to a particular source instance. The REFERENCES OF statement is similar to the ASSOCIATORS OF statement in its syntax. However, rather than retrieving endpoint instances, it retrieves the intervening association instances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is very cryptic for beginners like you and me. So, let us look at an example to understand this.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL5-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you look at the above diagram (captured from the associations tab of Win32_Process in CIM Studio) and as I showed you in my &lt;a href=&#34;http://139.59.40.198/blog/?p=1580&#34;&gt;earlier post&lt;/a&gt;, Win32_SessionProcess, in32_NamedJobObjectProcesses, Win32_SystemProcesses are the associator or association classes. Whereas, Win32_Process, Win32_LogonSession, Win32_NamedObject, and Win32_ComputerSystem are the associated classes.&lt;/p&gt;
&lt;p&gt;Now, let us go back to the definition. The REFERENCES OF statement retrieves all association instances that refer to a particular source instance. However, it retrieves only the intervening association instances. Again, I will show you an example to explain this.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL5-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the above screen capture, you can see the syntax for using REFERENCES OF is exactly same as that of ASSOCIATORS Of. If you closely observe the output, it is more or less same as the associator classes listed in the CIM Studio output. If you look at the properties of each WMI class listed there, you will find “Antecedent”, “Dependent”, “GroupComponent”, and “PartComponent”. These are called &lt;strong&gt;references&lt;/strong&gt;. They can be identified by type &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393024(v=VS.85).aspx&#34;&gt;ref&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is no Win32_NamedJobObjectProcesses in the output here and there is an additional CIM_ProcessExecutable. There is a missing link I am trying to find. I will update this soon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we had used “Associators of” instead of “References Of”, we would have seen the endpoint class definitions which are Win32_LogonSession, Win32_ComputerSystem, and Win32_NamedJobObject. You can see that in the output here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL5-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Similar to Associators Of keyword, you can use the WHERE clause with “References Of” keyword also. There are predefined keywords that you can use with WHERE clause. They are:&lt;/p&gt;
&lt;p&gt;REFERENCES OF {ObjectPath} WHERE
ClassDefsOnly
RequiredQualifier = QualifierName
ResultClass = ClassName
Role = PropertyName&lt;/p&gt;
&lt;p&gt;We have already seen an example of using ClassDefsOnly. Also, usage of these keywords is similar to what I mentioned an &lt;a href=&#34;http://139.59.40.198/blog/?p=1580&#34;&gt;earlier post&lt;/a&gt;. This concludes the WQL “Data or Object” queries part of this series. In the next part, we shall look at how to perform event queries and then proceed on to schema queries to end this series. I will also try to put together some “real” world examples for “Associators Of” and “References Of” keywords. Whatever we discussed around these two keywords has been really generic examples and may not have provided lot of insight in to where exactly you can use these.&lt;/p&gt;
&lt;p&gt;I hope you find this useful and I am looking for your feedback on how to improve. Thanks again for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Data Queries: Associators Of</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-associators-of/</link>
      <pubDate>Mon, 13 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-associators-of/</guid>
      <description>&lt;p&gt;As we saw in the previous post, Select queries can be used to retrieve instances of WMI class. But select queries are not the only way to query for instances. We can also use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa384793(v=VS.85).aspx&#34;&gt;Associators Of&lt;/a&gt; keyword to the same. However, there is a difference. Select queries always return a collection of instances of a WMI class where as “Associators Of” returns a collection of WMI objects that belong to different WMI classes or associated WMI classes. Before we dig too much in to this, let us first understand what are associated WMI classes.&lt;/p&gt;
&lt;p&gt;Take an example of a network adapter.WMI has several classes that represent network adapter information. Let us look at Win32_NetworkAdapter. This WMI class is associated with Win32_NetworkAdapterConfiguration, Win32_NetworkProtocol, and Win32_SystemDriver.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL4-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you look at the above output (from CIM Studio’s association tab for a selected class), you will see that Win32_NetworkAdapterconfiguration is associated to Win32_NetworkAdapter through an association class named Win32_NetworkAdapterSetting. And, the other two classes — Win32_NetworkProtocol &amp;amp; Win32_SystemDriver — are associated through an association class named Win32_ProtocolBinding. Make a note of the terminology I used here: associated Class &amp;amp; association class. We will re-visit this later in this post.&lt;/p&gt;
&lt;p&gt;So, the basic syntax of this “Associators Of” keyword is:&lt;/p&gt;
&lt;p&gt;ASSOCIATORS OF {ObjectPath}&lt;/p&gt;
&lt;p&gt;Note that the braces are part of the syntax. Any valid object path can be used for ObjectPath. Let us look at an example to understand this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above snippet shows the basic usage of Associators Of. Make a note of the syntax inside curly braces. This query — when executed — gets all the instances of all associated classes (see above screenshot). So, this can take a while and the output can be overwhelming. Remember, this query without DeviceID=12 will not return anything. We have to specify a qualifier to get the associated instances. This qualifier can be any property from the source WMI class.&lt;/p&gt;
&lt;p&gt;The output of above query can be overwhelming as the number of associated classes is very large and each associated class may have more than one instance. You can use WHERE clause to filter this out. However, the usage of WHERE clause is a bit different from how you do that with SELECT queries. There are predefined keywords that you can use with WHERE clause. They are:&lt;/p&gt;
&lt;p&gt;ASSOCIATORS OF {ObjectPath} WHERE
AssocClass = AssocClassName
ClassDefsOnly
RequiredAssocQualifier = QualifierName
RequiredQualifier = QualifierName
ResultClass = ClassName
ResultRole = PropertyName
Role = PropertyName&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You cannot use logical operators such as AND, OR, and NOT within the WHERE clause while using Associators Of keyword. You can use more than one subclause by just separating them by a space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us see the examples for some of these now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ClassDefsOnly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let us first see a way to list only the associated class names as shown in the screenshot above. You can use the subclause ClassDefsOnly for this purpose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE ClassDefsOnly&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will list all the associated class names and methods &amp;amp; properties associated with each of those classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AssocClass&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to retrieve the instance of associated class though a single association class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Associators of {Win32_NetworkAdapter.DeviceID=12} WHERE AssocClass=Win32_ProtocolBinding&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will result in the driver &amp;amp; protocol information bound to network adapter with device ID 12.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ResultClass&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This subclause indicates that you want to retrieve the end points associated only with the specified ResultClass. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE ResultClass=Win32_NetworkAdapterConfiguration&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Why the heck do you need associators of?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Technically, you don’t need to use this keyword. You can script or parse away to glory to get the same results as what “Associators Of “keyword can do for you. Take an example of Win32_NetworkAdapter class itself. Win32_NetworkAdapter stores the physical adapter details and Win32_NetworkAdapterConfiguration stores the software (IP) configuration pertaining to each adapter instance. These two classes are associated using the Win32_NetworkAdapterSetting association class. To get the IP configuration information without using “Associators of” keyword is not a straight forward task. In layman terms, this is because there is no common key between WIn32_NetworkAdapter and Win32_NetworkAdapterConfiguration. You may think that you can use Win32_NetworkAdapterSetting class to retrieve the information. However, when you run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Class Win32_NetworkAdapaterSetting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;you will see lot of information related to all network adapters in the system but there is no easy way to filter out that for a specific device. Now, if you use “Associators Of” keyword, you can get the IP information by running&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE ResultClass=Win32_NetworkAdapterConfiguration&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators Of {Win32_NetworkAdapter.DeviceID=12} WHERE AssocClass=Win32_NetworkAdapterSetting&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may now ask me why not just run “gwmi Win32_NetworkAdapaterConfiguration -Filter ‘Index=12′”. Yes, you can. This is probably the simplest way to get IP information without what is shown above. The examples above are intended only to show the usage of “Associators Of” keyword.&lt;/p&gt;
&lt;p&gt;On the same lines, let us look at another example. For a moment think that Get-Service cmdlet never existed. Now, if you want to get the dependent services of any specific service without using “associators Of”, you would do that by parsing Win32_DependentService instances. However, using the keyword discussed today, you can the do same by&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators of {Win32_Service.Name=&amp;#39;Winmgmt&amp;#39;} Where ResultRole=Dependent&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get a list of services that must be started before starting a specific service,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators of {Win32_Service.Name=&amp;#39;Winmgmt&amp;#39;} Where ResultRole=Antecedent&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get a list of both dependent and required services&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Associators of {Win32_Service.Name=&amp;#39;Winmgmt&amp;#39;} Where AssocClass=Win32_DependentService&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I shall conclude today’s post here and discuss “References Of” in the next post. I intentionally left a few Sub clauses for you to figure out yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Data Queries: SELECT, FROM, and WHERE</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-select-from-and-where/</link>
      <pubDate>Tue, 03 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-data-queries-select-from-and-where/</guid>
      <description>&lt;p&gt;In this part of the series on WQL, we will look at what are data queries and how some of the WQL keywords &amp;amp; operators can be used to retrieve information from WMI repository. Also, as mentioned earlier, there are many other tools that consume WQL queries to retrieve information from WMI. However, in this series, I shall use only PowerShell to demonstrate WQL.&lt;/p&gt;
&lt;p&gt;WQL data queries are the most simplest form of querying for WMI data. Data queries are used to retrieve class instances and data associations. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Select * FROM Win32_Process WHERE HandleCount&amp;gt;=5500&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gives us a list of all processes with a handle count above 5500.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
You can use -filter parameter to Get-WMIObject instead of -Query. Whatever you pass as a value to -filter will be used within the WHERE clause of a WQL statement. For example, the above PowerShell example can be re-written as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Class Win32_Process -Filter &amp;#34;HandleCount&amp;gt;=5500&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, here is the difference between using -Query or  -Filter. You can pass any valid WQL statement as a value to -Query parameter. However, whatever value you pass as a value to -filter will always be used within the WHERE clause. So, the value to -filter must be a valid WHERE clause value with proper use of WQL operators. For example, using a PowerShell comparison operator such as -eq is not valid within -Filter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let us use this example and discuss a few keywords.&lt;/p&gt;
&lt;h4 id=&#34;select&#34;&gt;SELECT&lt;/h4&gt;
&lt;p&gt;In the above WQL query,  we used &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa393276(v=VS.85).aspx&#34;&gt;SELECT&lt;/a&gt; statement. This statement returns instances of the specified class and any of its subclasses. As a general practice, many people retrieve WMI data by specifying SELECT * FROM &lt;!-- raw HTML omitted --&gt;. By using *, we retrieve all possible properties of a given WMI class. This type of query can take a while to execute and consume more bandwidth to retrieve the result set. One method to reduce the bandwidth required to retrieve the result set is to replace * with selected set of property names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;SELECT Name FROM Win32_Process WHERE HandleCount&amp;gt;=5500&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -class Win32_Process -Filter &amp;#34;HandleCount&amp;gt;=5500&amp;#34; -Property Name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;from&#34;&gt;FROM&lt;/h4&gt;
&lt;p&gt;FROM statement is used to specify the class from which we need to create the instances. Remember that you can perform data queries only from one class at a time. For example, the following query will produce an invalid query error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;Select * from win32_Service, Win32_Process&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;where&#34;&gt;WHERE&lt;/h4&gt;
&lt;p&gt;As you may be familiar by now, WHERE keyword is used to narrow the scope of retrieved data based on a filter. This keyword can be used in all of the three query types. In general, WHERE clause when used with SELECT statement can take one of the following forms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT * FROM class WHERE property operator constant
SELECT * FROM class WHERE constant operator property&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above two forms, property denotes a valid property of a WMI instance, operator is any valid WQL operator and constant must be of the correct type for the property. We have already seen an example of the first form of using WHERE. Here is an example for the second form. The following query retrieve all services in stopped state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Query &amp;#34;SELECT Name FROM Win32_Service WHERE &amp;#39;Stopped&amp;#39;=State&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Multiple groups of properties, operators, and constants can be combined in a WHERE clause using logical operators such as AND, OR, and NOT. Here are a few examples to demonstrate these.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;Select * from Win32_Service Where State=&amp;#39;Running&amp;#39; AND StartMode=&amp;#39;Manual&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;SELECT * FROM Win32_LogicalDisk WHERE Name = &amp;#39;C:&amp;#39; OR Name = &amp;#39;D:&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;SELECT * FROM win32_Service WHERE NOT (State=&amp;#39;Stopped&amp;#39;)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above three examples show using AND, OR, and NOT logical operators with WHERE clause to perform multiple filters. In the third example, we can replace NOT with other WQL operators. For example, the same query can be performed in the following ways:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -Query &amp;#34;SELECT * FROM win32_Service WHERE State&amp;lt;&amp;gt;&amp;#39;Stopped&amp;#39;&amp;#34;
Get-WMIObject -Query &amp;#34;SELECT * FROM win32_Service WHERE State!=&amp;#39;Stopped&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also use IS, IS NOT operators within WHERE clause. However, the query will be valid only if the constant is NULL. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -query &amp;#34;SELECT * FROM Win32_LogicalDisk WHERE FileSystem IS NULL&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is valid and will return the disk drive information with no file system information. However, the following example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WMIObject -query &amp;#34;SELECT * FROM Win32_LogicalDisk WHERE DriveType IS 5&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will result in an invalid query error.&lt;/p&gt;
&lt;p&gt;There are many other keywords such as REFERENCES OF, ASSOCIATORS OF within the context of data queries. To keep these posts short, I will end today’s post here and discuss a few more keywords in the next post. As usual, please leave your feedback here on what can be improved and what else you want to see.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – Keywords and Operators</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-keywords-and-operators/</link>
      <pubDate>Mon, 02 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-keywords-and-operators/</guid>
      <description>&lt;p&gt;In this post, we will look at the a brief description of WQL keywords and operators and see a classification of the keywords based on where (query types) these keywords can be used.&lt;/p&gt;
&lt;h3 id=&#34;keywords&#34;&gt;Keywords&lt;/h3&gt;
&lt;p&gt;Similar to SQL, WQL queries use keywords to retrieve data from the management objects. WQL has 19 keywords to perform these queries against WMI repositories. In the previous post, we discussed about three types of queries: Data, Event, and Schema. Though there are 19 WQL keywords, only a few of them can be used all 3 possible query types. The following table lists all the WQL keywords and lists the query type in which they can be used.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Keyword&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Query Type&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Data&lt;/td&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;Event&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AND&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Combines two Boolean expressions, and returns TRUE when both expressions are TRUE.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ASSOCIATORS OF&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Retrieves all instances that are associated with a source instance. Use this statement with schema queries and data queries.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__CLASS&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;References the class of the object in a query.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FROM&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Specifies the class that contains the properties listed in a SELECT statement. Windows Management Instrumentation (WMI) supports data queries from only one class at a time.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GROUP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Causes WMI to generate one notification to represent a group of events.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAVING&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Filters the events that are received during the grouping interval that is specified in the WITHIN clause.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IS&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Comparison operator used with NOT and NULL. The syntax for this statement is the following: IS [NOT] NULL (where NOT is optional)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISA&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Operator that applies a query to the subclasses of a specified class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KEYSONLY&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Used in REFERENCES OF and ASSOCIATORS OF queries to ensure that the resulting instances are only populated with the keys of the instances, which reduces the overhead of the call.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LIKE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Operator that determines whether or not a given character string matches a specified pattern.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NOT&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Comparison operator that use in a WQL SELECT query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Indicates an object does not have an explicitly assigned value. NULL is not equivalent to zero (0) or blank.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OR&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Combines two conditions. When more than one logical operator is used in a statement, the OR operators are evaluated after the AND operators.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REFERENCES OF&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Retrieves all association instances that refer to a specific source instance. Use this statement with schema and data queries. The REFERENCES OF statement is similar to the ASSOCIATORS OF statement. However, it does not retrieve endpoint instances; it retrieves the association instances.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Specifies the properties that are used in a query.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Boolean operator that evaluates to -1 (minus one).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WHERE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Narrows the scope of a data, event, or schema query.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WITHIN&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Specifies a polling or grouping interval.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Boolean operator that evaluates to 0 (zero).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;operators&#34;&gt;Operators&lt;/h3&gt;
&lt;p&gt;WMI Query Language also uses operators. The following table lists all the opeartors supported in WQL.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;Equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;Less than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Greater than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;Less than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;Greater than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!= or &amp;lt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Not equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A few WQL keywords such as IS, ISA, NOT, and LIKE can also be considered as operators. In these keywords, IS and IS NOT operators are valid in the WHERE clause only if the constant is NULL. We will see a detailed discussion around these keywords &amp;amp; operators in the upcoming posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WMI Query Language (WQL) – An introduction</title>
      <link>https://ravichaganti.com/blog/wmi-query-language-wql-an-introduction/</link>
      <pubDate>Thu, 22 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/wmi-query-language-wql-an-introduction/</guid>
      <description>&lt;p&gt;I have been using &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394582(v=VS.85).aspx&#34;&gt;WMI &lt;/a&gt;a lot these days and got to play with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa392902(v=VS.85).aspx&#34;&gt;WQL &lt;/a&gt;as well. In this series of posts, I want to write about how &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394606(VS.85).aspx&#34;&gt;WMI Query Language (WQL)&lt;/a&gt; can be used to retrieve management data exposed by WMI. Yes, this has nothing to do with PowerShell but as a PowerShell lover (and a &lt;a href=&#34;https://mvp.support.microsoft.com/profile=0B78975F-D499-467B-A2C0-2182990E8513&#34;&gt;MVP &lt;/a&gt;now), I will use PowerShell for all my examples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394572(v=VS.85).aspx&#34;&gt;Windows Management Instrumentation (WMI)&lt;/a&gt; is the Microsoft implementation of Web-based Enterprise Management (WBEM), which is an industry initiative to develop a standard technology for accessing management information in an enterprise environment. WMI uses the Common Information Model (CIM) industry standard to represent systems, applications, networks, devices, and other managed components. CIM is developed and maintained by the Distributed Management Task Force (&lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkId=67786&#34;&gt;DMTF&lt;/a&gt;). We can write WMI scripts to automate several tasks on local or remote computer(s).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PowerShell has a few cmdlets to retrieve the management data exposed by WMI. You can see these cmdlets by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#Use Get-Command and mention WMI* as the Noun
Get-Command -Noun WMI*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One of the cmdlets to retrieve WMI information is Get-WMIObject. In it’s basic usage, this cmdlet, gets the instance of a specified WMI class. So, for example, if you need to list out all drives of type 4 (network drives) in a system,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-WmiObject -Class Win32_LogicalDisk | Where-Object {
    $_.DriveType -eq 4
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above method, we retrieve all instances of Win32_LogicalDisk and then pass it  to Where-Object to filter out what we need. Depending on how many instances are there, this can take a while. You can use an alternative approach by specifying the -Query parameter instead of -Class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#This example uses -Query parameter and specifies the query using WQL
Get-WmiObject -Query &amp;#34;Select * from Win32_LogicalDisk WHERE DriveType=4&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example uses WMI Query Language to get the same information as the earlier example but a bit more faster. You can, of course, verify that using Measure-Command cmdlet. You can see the clear difference here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/WQL1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The above example is very basic and may not really explain the usefulness of WQL — the speed of execution is just one benefit. When using WQL, there are quite a few advanced querying techniques that can be used to retrieve WMI information in an efficient manner. And, sometimes – such as working with WMI events, WQL becomes a necessity. So, this series of posts will explain each of those scenarios and with some appropriate examples.&lt;/p&gt;
&lt;p&gt;With that background, let us now look at WMI Query Language.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394606(v=VS.85).aspx&#34;&gt;WMI Query Language (WQL)&lt;/a&gt; is a subset of the American National Standards Institute Structured Query Language (ANSI SQL)—with minor semantic changes. Similar to SQL, WQL has a set of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394606(v=VS.85).aspx&#34;&gt;keywords&lt;/a&gt; and &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa394605(v=VS.85).aspx&#34;&gt;operators&lt;/a&gt;. WQL supports three types of queries&lt;/p&gt;
&lt;h4 id=&#34;data-queries&#34;&gt;Data Queries&lt;/h4&gt;
&lt;p&gt;This type is the most simplet form of querying for WMI data. The earlier example, where we queried for all instances of Win32_LogicalDisk where the driveType is 4, is a data query. Data queries are used to retrieve class instances and data associations. The WQL keywords such as SELECT, ASSOCIATORS OF, REFERENCES OF, and ISA are used in data queries.&lt;/p&gt;
&lt;h4 id=&#34;schema-queries&#34;&gt;Schema Queries&lt;/h4&gt;
&lt;p&gt;Schema queries are used to retrieve class definitions (rather than class instances) and schema associations. In layman’s terms, these queries are used to get information about WMI and its structure. Schema queries return a result set of class definition objects rather than actual instances of classes. The WQL keywords such as SELECT, ASSOCIATORS OF, REFERENCES OF, and ISA are used in schema queries and of course, in a slightly different way than how data queries use these keywords.&lt;/p&gt;
&lt;h4 id=&#34;event-queries&#34;&gt;Event Queries&lt;/h4&gt;
&lt;p&gt;The event queries are used to create WMI event subscriptions. For example, using these queries, you can create an event subscription to notify whenever a USB drive gets attached to the system. The WQL keywords such as GROUP, HAVING, and WITHIN are used (and are specific to) when creating event queries. The event queries are critical when you want use PowerShell cmdlets such as Register-WMIEvent, etc.&lt;/p&gt;
&lt;p&gt;And, finally, a couple of items you should know&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WQL does not support cross-namespace queries or associations. You cannot query for all instances of a specified class residing in all of the namespaces on the target computer.&lt;/li&gt;
&lt;li&gt;WQL queries are read-only. There are no keywords such as INSERT or UPDATE. Using WQL, we cannot modify the WMI objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This brings us to the end of this post on WQL introduction. In the subsequent posts, we will look at each of the WQL keywords and each WQL query type. I am also learning as I write this series. So, I welcome your feedback.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Bangalore ITPro - PowerShell for ActiveDirectory Administration</title>
      <link>https://ravichaganti.com/blog/slides-from-bangalore-itpro-barcamp-powershell-for-activedirectory-administration/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-from-bangalore-itpro-barcamp-powershell-for-activedirectory-administration/</guid>
      <description>&lt;p&gt;I was at Bangalore ITPro BarCamp today and did a session on “PowerShell for Active Directory”. Here are the slides from that session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/ETmDJt3jFoSlGQ&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: PSBUG Meet - PowerShell 2.0 remoting</title>
      <link>https://ravichaganti.com/blog/psbug-ug-meet-slides-powershell-2-0-remoting/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/psbug-ug-meet-slides-powershell-2-0-remoting/</guid>
      <description>&lt;p&gt;We had the BITPro / PowerShell Bangalore User Group UG meet today. I presented PowerShell 2.0 remoting. Here are the slides I used at this UG meet.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/wxuMRDES5Q3sCL&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

</description>
    </item>
    
    <item>
      <title>Slides: Getting Started with PowerShell scripting</title>
      <link>https://ravichaganti.com/blog/slides-getting-started-with-powershell-scripting/</link>
      <pubDate>Sat, 13 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/slides-getting-started-with-powershell-scripting/</guid>
      <description>&lt;p&gt;I just came back from the &lt;!-- raw HTML omitted --&gt;PowerShell&lt;!-- raw HTML omitted --&gt; / &lt;!-- raw HTML omitted --&gt;Bangalore ITPro&lt;!-- raw HTML omitted --&gt; UG meet. We had nearly 40 people showing up for this event. I spoke about getting started with PowerShell scripting and &lt;!-- raw HTML omitted --&gt;Ismail&lt;!-- raw HTML omitted --&gt; talked about Exchange 2010 migration. Here are the slides I used for my session.&lt;/p&gt;

    &lt;iframe
        src=&#34;//www.slideshare.net/slideshow/embed_code/key/JDWNWgF5R8BL60&#34;
        title=&#34;SlideShare Presentation&#34;
        height=&#34;400&#34;
        frameborder=&#34;0&#34;
        marginwidth=&#34;0&#34;
        marginheight=&#34;0&#34;
        scrolling=&#34;no&#34;
        style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 20px; width: 100%;&#34;
        allowfullscreen=&#34;true&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;If you were there at the session, please provide your feedback either here or as a tweet to &lt;!-- raw HTML omitted --&gt;@psbug&lt;!-- raw HTML omitted --&gt;. See you at the next meet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 12 – Using CredSSP for multi-hop authentication</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-12-using-credssp-for-multi-hop-authentication/</link>
      <pubDate>Thu, 18 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-12-using-credssp-for-multi-hop-authentication/</guid>
      <description>&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, we look at how &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/cc226764(PROT.10).aspx&#34;&gt;CredSSP &lt;/a&gt;can be used for &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee309365(VS.85).aspx&#34;&gt;multi-hop authentication&lt;/a&gt; in PowerShell remoting. CredSSP and multi-hop support are not features of PowerShell 2.0 or PowerShell remoting, per se. Credential Security Service Provider (CredSSP) is a new security service provider that enables an application to delegate the user’s credentials from the client to the target server. Multi-hop support in Windows Remote Management uses CredSSP for authentication. Since PowerShell 2.0 remoting is built on top of WinRM, we can use CredSSP to perform multi-hop authentication.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, what is multi-hop authentication?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, let us look at an example to understand what is multi-hop authentication. Imagine a group of computers as shown here and you establish a remoting session from computer A (client) to computer B (server) and then from computer B, you try to create a file in a file share on computer C.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting12-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, within the remoting session to computer B, we want to execute a command — as below — to create test.txt on computer C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName Test-PC.SP2010lab.com -credential SP2010LAB\Administrator -ScriptBlock {[System.IO.File]::Create(\\FileServer\Share\Test.txt)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting12-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This command results in an “Access Denied” error as shown above. This command fails since the remote session tries to access the file share using the machine credentilas instead of the credentials used to invoke the remote session. We could have successfully created the text file if there was a way to pass or delegate credentials from the client so that we can authenticate to the file share. This is what is called multi-hop authentication and PowerShell remoting enables this using CredSSP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we delegate credentials?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The cmdlets to create a remoting session — Invoke-Command, Enter-PSSession and New-PSSession — have a parameter to specify the authentication method as CredSSP. However, before we use this parameter, we need to enable credSSP on the computers participating in multi-hop authentication. Also, when enabling CredSSP, we need to specify the role — client or server — of a computer. A client is the computer from which the remoting session is initiated and server is the computer from which the multi-hop authentication is triggered. So, from the above example, we need to enable CredSSP authentication on computer A and computer B.&lt;/p&gt;
&lt;p&gt;PowerShell 2.0 has &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Disable-WSManCredSSP&lt;/a&gt; and &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819468.aspx&#34;&gt;Get-WSMANCredSSP&lt;/a&gt; cmdlets to manage CredSSP authentication&lt;/p&gt;
&lt;p&gt;Let us now look at how we enable WSManCredSSP and specify client / server roles. First, let us enable CredSSP on computer A.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You need to run these cmdlets in an elevated prompt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enable-WSManCredSSP -Role Client -DelegateComputer &amp;#34;*.SP2010lab.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As shown here, you can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt; cmdlet to enable CredSSP authentication and specify the computer role as client. When the computer role is defined as a client, you can also specify the DelegateComputer parameter to specify the server or servers that receive the delegated credentials from the client. The delegateComputer accepts wildcards as shown above. You can also specify “*” to specify all computers in the network.&lt;/p&gt;
&lt;p&gt;When &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt; cmdlet is used to enable CredSSP on the client by specifying client in the role parameter. The cmdlet then performs the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The WS-Management setting &amp;lt;localhost|computername&amp;gt;\Client\Auth\CredSSP is set to true.&lt;/li&gt;
&lt;li&gt;Sets the Windows CredSSP policy AllowFreshCredentials to WSMan/Delegate on the client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, we will enable CredSSP on computer B and deginate that as server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enable-WSManCredSSP -Role Server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above cmdlet enables CredSSP on computer B and sets the WS-Management setting &amp;lt;localhost|computername&amp;gt;\Service\Auth\CredSSP is to true. Now, we can use Invoke-Command to run the script block as shown at the beginning of this post. However, we will specify the authentication method as CredSSP and pass the credentials.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName test-pc.SP2010lab.com -Credential SP2010Lab\Administrator -Authentication CredSSP -ScriptBlock {[System.IO.File]::Create(\\FileServer\Share\Test.txt)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting12-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see here,  we see the output from Create() method which shows the details of the newly created file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; CredSSP authentication delegates the user’s credentials from the local computer to a remote computer. This practice increases the security risk of the remote operation. If the remote computer is compromised, when credentials are passed to it, the credentials can be used to control the network session.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Disable-WSManCredSSP&lt;/a&gt; to disable CredSSP authentication on a client or a server computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Disable-WSManCredSSP -Role Client            
Disable-WSManCredSSP -Role Server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819468.aspx&#34;&gt;Get-WSManCredSSP&lt;/a&gt; cmdlet to verify if a computer has CredSSP enabled and also the role (client/server).&lt;/p&gt;
&lt;p&gt;This is it for now. We will look at few more aspects of PowerShell remoting in the next part of this series. Stay tuned..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 11 – Interpreting, formatting and displaying remote output</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-11-interpreting-formatting-and-displaying-remote-output/</link>
      <pubDate>Mon, 15 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-11-interpreting-formatting-and-displaying-remote-output/</guid>
      <description>&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, we look at remoting output. This includes how the output is transferred from remote computer to local, how it is displayed and how we can format this output based on a need. We already discussed various methods to execute commands (&lt;a href=&#34;http://139.59.40.198/blog/?p=1108&#34;&gt;part4&lt;/a&gt;, &lt;a href=&#34;http://139.59.40.198/blog/?p=1140&#34;&gt;part 5&lt;/a&gt; and &lt;a href=&#34;http://139.59.40.198/blog/?p=1151&#34;&gt;part 6&lt;/a&gt;) on a remote computer. In this post, for the sake of our discussion of remoting output, I will use only Invoke-Command method to execute remote commands. However, I will point out the differences as required.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Most of this does not apply within an interactive remoting session&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The concepts of remoting output are explained in a TechNet article at &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347582.aspx&#34;&gt;http://technet.microsoft.com/en-us/library/dd347582.aspx&lt;/a&gt;. I am going to put some story around this to help you understand the concepts well.&lt;/p&gt;
&lt;p&gt;First, let us start with an obvious difference in the output received from a remote session. If you use Invoke-Command to run Get-PSDrive, you see something like this.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;You can see an additional column in the output that shows the remote computer name with PSComputerName as the column name. This won’t be displayed if you run the same cmdlet on local computer. So, if you don’t want to display this information in the remote output you can use the -HideComputerName parameter.&lt;/p&gt;
&lt;p&gt;It is also possible that some cmdlets may not display PSComputerName property. For example, Get-Date. In such a scenario you can add PSComputerName to the output of Get-Date as shown here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE,SP2010-APP -ScriptBlock {Get-Date} | ft DateTime, PSComputerName -Auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;How remote command output is sent over to local computer?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The objects that Windows PowerShell cmdlets return cannot be transmitted over the network. So, the live objects are “serialized”. In other words, the live objects are converted into XML representations of the object and its properties. Then, the XML-based serialized object is transmitted across the network to the local session where it gets deserialized in to .NET object. This is how an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms973893.aspx&#34;&gt;MSDN &lt;/a&gt;article defines serialization in .NET framework.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why would you want to use serialization? The two most important reasons are to persist the state of an object to a storage medium so an exact copy can be recreated at a later stage, and to send the object by value from one application domain to another. For example, serialization is used to save session state in ASP.NET and to copy objects to the clipboard in Windows Forms. It is &lt;strong&gt;also used by remoting&lt;/strong&gt; to pass objects by value from one application domain to another.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;So, what does this mean to us in PowerShell remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As it is defined above, the live objects are converted in to XML based representation. So, once deserialized in the local session, they don’t expose any methods that actually belong to the object. Let us see an example to understand this. First, let us look at Get-Process output in a local session and see what all methods we see.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Here, you can see a list of methods you can use against a process object. Now, let us take a look at how this looks when we execute the same command in a remote session.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-4.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you observe in the above screenshot, TypeName represents a deserialized object and there are no methods that you can use against a process object. A deserialized object represents a snapshot of get-process at the time of command execution in the remote session. This also means that you can’t execute methods such as Kill() against a deserialized process object. Also, no methods to modify the property set will work in the local session.&lt;/p&gt;
&lt;p&gt;Windows PowerShell blog has a nice post on &lt;a href=&#34;http://blogs.msdn.com/powershell/archive/2010/01/07/how-objects-are-sent-to-and-from-remote-sessions.aspx&#34;&gt;how objects are to and from a remote session&lt;/a&gt;. I recommend that you read this post for more information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What about output formatting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most deserialized objects are automatically formatted for display by entries in the Types.ps1xml or Format.ps1xml files. However, the local computer might not have formatting files for all of the deserialized objects that were generated on a remote computer. When objects are not formatted, all of the properties of each object appear in the console in a streaming list. To get formatting data from another computer, use the Get-FormatData and Export-FormatData cmdlets. Again, let us take an example to understand this.&lt;/p&gt;
&lt;p&gt;Take an example of a SharePoint 2010 farm and you want to access /run SharePoint 2010 cmdlets from a Windows 7 machine using Invoke-Command. First, if we run Get-SPSite on SharePoint 2010 web frontend, you will see&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-5.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, if we try to run the same in a remote session using Invoke-Command, you will see&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-6.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above screenshot, the output from a remote session is quite different from the one you saw in a local session. This is because we don’t have the formatting data available on the Windows 7 computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, how do we get the formatting data to local computer?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can use Get-FormatData, Export-FormatData and Update-FormatData cmdlets to get the formatting data from a remote computer to local session. To do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -session $s -ScriptBlock {Add-PSSnapin Microsoft.SharePoint.PowerShell}
Invoke-Command -Session $s -ScriptBlock {Get-FormatData -TypeName *SharePoint*} | Export-FormatData -Path C:\scripts\SharePoint.Format.ps1xml
Update-FormatData -PrependPath C:\scripts\SharePoint.Format.ps1xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code snippet will let you import the formatting data for all SharePoint cmdlets in to the local session. Now, if we run Get-SPSite in the remote session using Invoke-Command, you will see&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting11-7.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, with the formatting information in the local session, you can see that Get-SPSite output is formatted similar to the one we saw when we ran the cmdlet in a local session. However, make a note that this applies only to the current session. If you close and re-open the PowerShell console, the formatting data will be lost. You can add the Update-FormatData cmdlet to your PowerShell profile to make the format data across all PowerShell sessions.&lt;/p&gt;
&lt;p&gt;This is it. We are just a few more posts away from completing this PowerShell remoting series. Do let me know your feedback and let me know if you want to see something more around remoting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 10 – Restricting available commands using custom session configuration</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-10-restricting-available-commands-using-custom-session-configuration/</link>
      <pubDate>Thu, 11 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-10-restricting-available-commands-using-custom-session-configuration/</guid>
      <description>&lt;p&gt;“With great power comes great responsibility”, said uncle Ben. But some people don’t just understand that. That is when you have to rip-off their powers. Similarly, the default PS Session configuration allows full access to PowerShell language, cmdlets, scripts and everything available to PowerShell. Of course, you need to authenticate as a local administrator or should have execute permission to invoke the session. Running a few cmdlets such as Stop-Service or Restart-Computer can be quite dangerous on a production server. This is where a custom session configuration can help provide role based access to remote host using PowerShell remoting.&lt;/p&gt;
&lt;p&gt;We touched upon creating custom session configuration in &lt;a href=&#34;http://139.59.40.198/blog/?p=1200&#34;&gt;part 9&lt;/a&gt; of this PowerShell &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;. In this part, I will discuss how we can extend the concept of custom session configuration to restrict available commands and PowerShell language in a remote session. I will go striaght in to the startup script used to implement this since we already looked at how to create custom session configuration and assign permissions to a specific user.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$RequiredCommands = @(&amp;#34;Get-Command&amp;#34;,
                             &amp;#34;Get-FormatData&amp;#34;,
                             &amp;#34;Out-Default&amp;#34;,
                             &amp;#34;Select-Object&amp;#34;,
                             &amp;#34;out-file&amp;#34;,
                             &amp;#34;Measure-Object&amp;#34;,
                             &amp;#34;Exit-PSSession&amp;#34;
                             )            

 $ExecutionContext.SessionState.Applications.Clear()
$ExecutionContext.SessionState.Scripts.Clear()            

Get-Command -CommandType Cmdlet, alias, function | ?{$RequiredCommands -notcontains $_.Name} | %{$_.Visibility=&amp;#34;Private&amp;#34;}
$ExecutionContext.SessionState.LanguageMode=&amp;#34;RestrictedLanguage&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you see here, We have only a few required commands. We don’t want the remote user to execute commands other than this set. BTW, this set is the absolute minimum required even to start remoting session. So, consider this as a standard required commands list. Towards the end, we set the language mode to restricted to make sure the remote user cannot execute infinite loops, etc that could potentially bring the system down. This script, when used as the startup script for a session, will result in something as shown here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting10-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see above, get-Command lists only the commands we have in the Required Commands list. However, if you have a large list of required commands, the method you have seen in the above code is not scalable. Instead, you can use a denied list of commands that is relatively small. For example, if you don’t want your users to execute Stop-Process or Restart-Computer, your code will look like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$DeniedCommands = @(&amp;#34;Stop-Process&amp;#34;,
                             &amp;#34;Restart-Computer&amp;#34;
                             )            

$ExecutionContext.SessionState.Applications.Clear()
$ExecutionContext.SessionState.Scripts.Clear()            

Get-Command -CommandType Cmdlet, alias, function | ?{$DeniedCommands -contains $_.Name} | %{$_.Visibility=&amp;#34;Private&amp;#34;}
$ExecutionContext.SessionState.LanguageMode=&amp;#34;RestrictedLanguage&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, if you use this code for your startup script, you will see something like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting10-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I prefer the second method.&lt;/p&gt;
&lt;p&gt;If you need to extend or modify the behavior of commands in a remote session, you need to create command proxies. You can read more about it @ &lt;a href=&#34;http://blogs.msdn.com/powershell/archive/2009/01/04/extending-and-or-modifing-commands-with-proxies.aspx&#34;&gt;http://blogs.msdn.com/powershell/archive/2009/01/04/extending-and-or-modifing-commands-with-proxies.aspx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I have shown here is just one way of achieving control in the remote sessions. However, based on your organization needs there could be a better way of doing this. These methods include user role based restrictions, etc as discussed at a &lt;a href=&#34;http://blogs.msdn.com/powershell/archive/2010/02/08/pdc09-svr12-and-svr13-slides.aspx&#34;&gt;PDC’09 session&lt;/a&gt;. Do refer to that for more information.&lt;/p&gt;
&lt;p&gt;This is it for now. We will look at the remote session configuration options in the next post. Stay tuned..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 9 – Session configurations and creating custom configurations</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-9-session-configurations-and-creating-custom-configurations/</link>
      <pubDate>Tue, 09 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-9-session-configurations-and-creating-custom-configurations/</guid>
      <description>&lt;p&gt;In part2 of this series on &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;PowerShell remoting &lt;/a&gt;we quickly looked at various cmdlets that form part of overall remoting infrastructure. The list there included cmdlets related to PS Session configuration. Now that we have gone through the basics of remoting, it is time for us to dig in to these additional cmdlets and explore what they really do.&lt;/p&gt;
&lt;p&gt;So, in this part, we will look at all the PS session configurtion cmdlets, discuss how to create custom PS Session configurations and the need for it. Let us dive in to this now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is PS session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A session configuration can be used to define who can create a Windows PowerShell sesion on the local computer, what level of access — to cmdlets, scripts and PowerShell language — they have on the local computer, etc. When you enable PowerShell remoting using Enable-PSRemoting, you will see a final step performing Microsoft.PowerShell and Microsoft.PowerShell32 (on x64 systems) session configuration registrations. These default session configurations are used when the remote users connecting to local system do not specify a configuration name. By default, only members of administrators group have access to these two session configurations. Hence, only members of administrators group will be able to create remoting sessions by default.&lt;/p&gt;
&lt;p&gt;Based on the above description, PowerShell session configurations can be used to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customize the remoting experience for users&lt;/li&gt;
&lt;li&gt;delegate administration by creating session configuration with varying levels of access to system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this part, we will look at basics of session configuration and see how we can create custom session configurations. We will discuss delegated administration at depth in a later post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What cmdlets are available to manage session configurations?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following cmdlets are available to manage session configuration.&lt;/p&gt;
&lt;p&gt;Register-PSSessionConfiguration
Unregister-PSSessionConfiguration
Enable-PSSessionConfiguration
Disable-PSSessionConfiguration
Set-PSSessionConfiguration
Get-PSSessionConfiguration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I create a new session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Register-PSSessionConfiguration cmdlet can be used to create a new session configuration. You can use a C# asembly or a PowerShell script as a startup script for this new session configuration. This startup script can be used to customize the remoting experience. For example, create a script the imports Active Directory module using import-module cmdlet as shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-Module ActiveDirectory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save this script as startupscript.ps1 or any name of your choice on the local computer. Now, use the Register-PSSessionConfiguration cmdlet to create a new session configuration. This can be done by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Register-PSSessionConfiguration -Name &amp;#34;ActiveDirectory&amp;#34; -StartupScript C:\scripts\StartupScript.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will be prompted to confirm this action and at the end to restart WinRM service on the local computer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You must enable script execution on the local computer to be able to use the startup script as a part of session configuration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;How do I see available session configurations?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Get-PSSessionConfiguration cmdlet lists all the available session configurations on the local computer.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting9-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see in the above output, Get-PSSessionConfiguration lists all available session configurations on the local computer and who has permission to access the configuration. No permissions have been assigned yet to the new active directory configuration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I give permissions to a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Set-PSSessionConfiguration to allow access to invoke the new session configuration. To do this,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-PSSessionConfiguration -Name ActiveDirectory -ShowSecurityDescriptorUI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This opens up the dialog to add permissions to invoke this session configuration. As you see in the screenshot here, administrators group has no invoke permission on this session configuration.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting9-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Select Allow -&amp;gt; Invoke permission here and click OK. You will be prompted to restart the WinRM service. Now, an administrator or a member of administrators group will be able to use this session configuration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I invoke a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use New-PSSession, Enter-PSSession and Invoke-Command cmdlets to load a session configuration othen than the default configuration. The ConfigurationName parameter can be used to specify the session configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE -ConfigurationName ActiveDirectory      
Enter-PSSession -ComputerName SP2010-WFE -ConfigurationName ActiveDirectory            
Invoke-Command -ComputerName SP2010-WFE -ConfigurationName ActiveDirectory -ScriptBlock {Get-Process}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note: To be able to use the -StartupScript, script execution policy must be set to signed or unrestricted on the local computer where the session configuration is registered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In an earlier post — &lt;a href=&#34;http://139.59.40.198/blog/?p=1151&#34;&gt;part 6: Implict remoting sessions&lt;/a&gt; — we used Invoke-Command to load the active directory module within a persistent sesion and then use that persistent session to import active directory cmdlets in to local session. However, by using a session configuration that import active directory module as a startup script, we will have all the AD cmdlets available as soon as we connect to the remote session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I disable a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Disable-PSSessionConfiguration cmdlet to disable an existing session configuration and prevents users from connecting to the local computer by using this session configuration. You can use -Name parameter to specify what session configuration you want to disable. If you do not specify a configuration name, the default Microsoft.PowerShell session configuration will be disabled.&lt;/p&gt;
&lt;p&gt;The Disable-PSSessionConfiguration cmdlet adds a “deny all” setting to the security descriptor of one or more registered session configurations. As a result, you can unregister, view, and change the configurations, but you cannot use them in a session. Disable-PSRemoting cmdlet will disable all PS Session configurations available on the local computer.&lt;/p&gt;
&lt;p&gt;Enable-PSSessionConfiguration cmdlet can be used to enable a disabled configuration. You can use -Name parameter to specify what session configuration you need to enable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I delete a session configuration?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Unregister-PSSessionConfiguration cmdlet to delete a previously defined session configuration. It is quite possible to delete the default session configuration — Microsoft.PowerShell — using this cmdlet. However, this default session configuration gets re-created when you run Enable-PSRemoting cmdlet.&lt;/p&gt;
&lt;p&gt;This brings us to the end of this part on PS session configurations. In the next part, I will talk about delegated administration using session configurations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 8 – remoting scenarios and troubleshooting</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-8-remoting-scenarios-and-troubleshooting/</link>
      <pubDate>Sun, 07 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-8-remoting-scenarios-and-troubleshooting/</guid>
      <description>&lt;p&gt;If you have been following this remoting series and using PS remoting on a test setup or even production, you must have gone through a few initial hiccups. In fact, there could be many such issues if you are working in a mixed environment where you have a few computers in a domain and a few in workgroup. So, in this part of the remoting series I will discuss some of these issues and workarounds to resolve the same. I discussed enabling remoting on workgroup computers in &lt;a href=&#34;http://139.59.40.198/blog/?p=1060&#34;&gt;part3&lt;/a&gt; – “Enable remoting” of this series. This post is kind of an extension to that.&lt;/p&gt;
&lt;p&gt;A more detailed guide is available at &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347642.aspx&#34;&gt;about_remote_troubleshooting&lt;/a&gt; page on TechNet. I will list only the scenarios I have tested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remoting to a computer in workgroup from a computer in domain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Take an example of two computers, Win7-VM in a domain environment and WinXP-VM in a workgroup. Now, if you want to start a remoting session from Win7-VM using Enter-PSSession using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -ComputerName WinXP-VM -Credential WinXP-VM\Administrator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;you will see an error message similar to the one here&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting8-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;We can workaround this by adding the remote computer to local computer’s trusted hosts list — in this case, on Win7-VM. You can use one of the following methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-Item WSMan:\localhost\Client\TrustedHosts -Value *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;set-item wsman:\localhost\Client\TrustedHosts -value WinXP-VM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: WSMan:\LocalHost\Client will be available only if WinRM service is enabled and running.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first command uses a wildcard to add all computers in the network to the list of trusted hosts and the second command adds only WinXP-VM to that list. You can also supply a comma seperated list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remoting to a computer in domain from a computer in workgroup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using the same example as above — if you want to establish a remoting session from WinXP-VM to Win7-VM, you can change the trusted hosts list on WinXP-VM to add the computers in the domain. Again, it can be done in multiple ways.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-Item WSMan:\localhost\Client\TrustedHosts -Value *            
set-item wsman:\localhost\Client\TrustedHosts -value Win7-VM            
set-item wsman:\localhost\Client\TrustedHosts -value *.remotinglab.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first two commands variations must be familiar by now. The 3rd variation adds all computers in &lt;a href=&#34;http://remotinglab.com/&#34;&gt;remotinglab.com&lt;/a&gt; domain to the trusted hosts on WinXP-VM computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remoting to a domain computer as a non-administrator from another domain computer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To start a remoting a session with a remote computer, the user initiating the remoting session must&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be a member of the administrators group on the remote computer &lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Be able to authenticate to the remote computer as an administrator using the Credential parameter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively — on the remote computer, you can give non-administrator users execute permission to default session configuration. This can be done by running the following command at a elevated PowerShell prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Set-PSSessionConfiguration Microsoft.Powershell -ShowSecurityDescriptorUI            

#In addition to the above, on a x64 computer
Set-PSSessionConfiguration Microsoft.Powershell32 -ShowSecurityDescriptorUI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you use the above cmdlet, you will see a dialog box as shown here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting8-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Here, you need to click add and then select the non-administrator user account. Once added, give the user Execute permission. After you click OK on the main dialog and return to PowerShell, you will be prompted to restart WinRM service. That is it. I recommend this method than the first two. This way a non-administrator user should be able to remote in to a domain computer without providing administrator credentials or adding the user to local administrators group.&lt;/p&gt;
&lt;p&gt;A few things I discussed here today are really meant for an advanced remoting post. However, for the sake of getting started in a mixed environment, I thought this post is must. Feel free to write any questions you may have in an email or tweet to me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 7 – saving remote session to disk</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-7-saving-remote-session-to-disk/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-7-saving-remote-session-to-disk/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://139.59.40.198/blog/?p=1151&#34;&gt;part 6&lt;/a&gt; of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt; we looked at how we can use Import-PSSession cmdlet to execute remote commands as if they were local. This is nice but this will last only while the session ($s in the example) is alive. The moment we kill the session — using Rem0ve-PSSession, remoting session will also get killed. In this part of the series, we will look at how we can save a remoting session to disk so that we don’t even have to explicitly create a session.&lt;/p&gt;
&lt;p&gt;This is achieved using &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347679.aspx&#34;&gt;Export-PSSession&lt;/a&gt; cmdlet. This cmdlet lets us import commands from a remote session and save the same in a PowerShell module on the local disk. This cmdlet can get cmdlets, functions, aliases, and other command types in to a PowerShell module. The following example shows how we can achieve this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {Import-Module ActiveDirectory}
Export-PSSession -Session $s -OutputModule ADRemoteCommands -AllowClobber -Module ActiveDirectory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the first two lines should be quite familiar by now. The third line is where the magic happens. We tell Export-PSSession cmdlet to export all the commands, aliases, functions, etc available in PS Session $s to a module on hard disk and name it ADRemoteCommands.&lt;/p&gt;
&lt;p&gt;If the Export-PSSession is successful, you will see output similar to what is shown here&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting7-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the above output, it is clear that Export-PSSession generates .psm1, .psd1 and format data file for the module automatically. Now, you can load the module at any later point in time to get access to the remote commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we import the saved module?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you observe the output closely, path where the module files are stored is same as $Env:PSModulePath. So, you don’t need to specify the absolute path to the module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-Module ADRemoteCommands
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This imports all remote commands available in the module to local session. Whenever we execute a remote command, implicit remoting kicks in, establishes the remote session, executes the command in remote session and returns the output. All this is done without you really using any remoting related cmdlets. If establishing a remote session requires a password, you will be prompted for one.&lt;/p&gt;
&lt;p&gt;This brings us to the end of Part 7. With this, I covered all the remoting basics and we can now move on to more advanced topics like session options and WSMan configuration required for PS Remoting. Stay tuned for that..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 6 – implicit remoting sessions</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-6-implicit-remoting-sessions/</link>
      <pubDate>Wed, 03 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-6-implicit-remoting-sessions/</guid>
      <description>&lt;p&gt;In an earlier post on interactive remoting sessions, we looked at how we can enter a remote session and then execute commands as if they were local. However, if you’d observed it more closely, we were actually sitting in the remote session than local console. The change in PowerShell prompt indicates this fact clearly.&lt;/p&gt;
&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, we will look at a feature called implicit remoting which makes it possible to run the commands / scripts on the remote computer while in the local session.&lt;/p&gt;
&lt;p&gt;We use interactive remoting to overcome a few disadvantages of using Invoke-Command. This method too has its own drawbacks. Within interactive remoting, you explicitly enter/exit a remote session. This also means that you are connected only to one remote computer and you have access only to the cmdlets or modules available on that remote computer. What if you want to access different cmdlets available on different computers?&lt;/p&gt;
&lt;p&gt;For example, let us say you have two different computers one with Exchange 2010 and other with SharePoint 2010. Now, if you want to access cmdlets available to manage both these technologies from a “single computer” and in the “local session”. Take a note, “single computer” and “local session” is the key to understand the concept of implicit remoting. The important thing to understand is that we need to manage multiple computers / technologies without ever the need to go out of local PowerShell session.&lt;/p&gt;
&lt;p&gt;Using Invoke-Command is certainly not the choice because it involves setting up a session to the remote computer and then sending a script block to execute in that session. This is quite tedious. Although interactive remoting can eliminate the drawbacks of Invoke-Command, it is specific one remote session. So, if you are connected to the Exchange 2010 remote session, your SharePoint 2010 session is not available. This is where implicit remoting becomes important.&lt;/p&gt;
&lt;p&gt;Implicit remoting can be used to bring remote commands to a local session. In implicit remoting, once you import remote commands in to a local session, you don’t have to worry about the PS session details. You can import any number of remote sessions in to the local session making it possible to access cmdlets from different product technologies in the same local session. PowerShell will take care of that for you in the background.&lt;/p&gt;
&lt;p&gt;Now, we can connect do a different remote session and import cmdlets from that session also.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {Add-PSSnapin Microsoft.SharePoint.PowerShell}
Import-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, within the local session, we have access to AD cmdlets from one computer and SharePoint 2010 cmdlets from another machine. This makes it easy to manage both from the same computer and local session without worrying much about creating / destroying sessions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nice. So, how do we use implicit remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, we have to first create a persistent PS session using New-PSSession and then use that to import remote commands in to local session. You can do it as shown here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Import-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, Import-PSSession imports all commands except for commands that have the same names as commands in the current session. To import all the commands, use the AllowClobber parameter.&lt;/p&gt;
&lt;p&gt;If you import a command with the same name as a command in the current session, the imported command hides or replaces the original commands. Essentially, imported commands take precedence over the local commands with same name. Irrespective of whether those commands were loaded after importing a session or before. However, aliases are an exception. Original aliases in the local session take precedence over imported aliases.&lt;/p&gt;
&lt;p&gt;To know more about the command precedence, read&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347579.aspx&#34;&gt; about_Command_Precedence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we differentiate between local &amp;amp; remote commands or avoid name conflicts while importing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Import-PSSession provide -Prefix parameter which adds the specified prefix to the nouns in the names of imported commands. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Import-PSSession -Session $s -Prefix RS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will prefix RS to all the cmdlets imported from a remote computer. So, if Get-Command was imported using this method, the local session will have Get-RSCommand and when you use this cmdlet, PowerShell implicitly runs this command inside the remote session.&lt;/p&gt;
&lt;p&gt;As we discussed earlier in this post, PowerShell manages implicit remoting in the background. So, the behavior of Invoke-Command — creates/destroys a PS session every time we execute a remote command — exists with implicit remoting too. Hence, you will see that executing remote commands over this method a bit slow. To work around this, import-PSSession adds a -asJob parameter to all the commands imported in to the local session.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Import-PSSession -Session $s -Prefix RS            

Get-RSProcess -asJob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will run Get-Process on the remote computer as a background job. The original Get-Process has no -asJob parameter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we import modules or snap-ins in to local session?&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {Import-Module ActiveDirectory}
Import-PSSession -Session $s -Module ActiveDirectory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, we first create a PS session, import active directory module using Invoke-Command and then import the session in to the local session. This makes all the active directory cmdlets available in the local session.&lt;/p&gt;
&lt;p&gt;This is the end of part 6 of the remoting series. In the next post, I will talk about how we can save the imported session to hard disk.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 5 – interactive remoting sessions</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-5-interactive-remoting-sessions/</link>
      <pubDate>Tue, 02 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-5-interactive-remoting-sessions/</guid>
      <description>&lt;p&gt;In this part of the &lt;a href=&#34;http://139.59.40.198/blog/?cat=240&#34;&gt;remoting series&lt;/a&gt;, I will talk about using Enter-PSSession and Exit-PSSession cmdlets to perform interactive remoting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why do you need interactive remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To understand the advantages of interactive remoting in PowerShell 2.0, let us first look at some gotchas with Invoke-Command. Take an example of a remote system where SharePoint 2010 is installed. SharePoint 2010 provides native PowerShell cmdlets and these cmdlets can be accesses only if you load Microsoft.SharePoint.PowerShell PS snap-in. So, to do this using Invoke-Command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE            

#load the PS Snap-in to enable SharePoint PS cmdlets
Invoke-Command -Session $s -ScriptBlock {Add-PSSnapin Microsoft.SharePoint.PowerShell}

#$s has the PowerShell cmdlets now
Invoke-Command -Session $s -ScriptBlock {Get-SPWeb http://sp2010-wfe:999}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look at the above code, we will have to use a persistent session so that we can use SharePoint cmdlets in subsequent Invoke-Command calls.&lt;/p&gt;
&lt;p&gt;Another caveat will be the unavailability of remote computer cmdlets in the local PowerShell session — in this case, the SharePoint 2010 cmdlets. This — essentially – means that we cannot use Get-Help or Get-Command cmdlets against the SharePoint 2010 cmdlets in the local session unless we pass that as a script block to Invoke-Command.&lt;/p&gt;
&lt;p&gt;One more disadvantage of using Invoke-Command is unavailability of command completion. Unless the cmdlet you are using inside the scriptblock is available locally, you cannot use tab completion. This can be a pain for many, including me.&lt;/p&gt;
&lt;p&gt;This where interactive remoting comes in to play.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do you start interactive remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enter-PSSession enables interactive sessions with remote computer. You can use this cmdlet the same way you’d use Invoke-Command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -ComputerName SP2010-WFE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting5-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As shown in the above screenshot, PowerShell prompt changes to reflect that you are in the remote session. Now, taking the above example of SharePoint 2010 cmdlets, you can load the PS Snap-in as if you were loading it locally without using Invoke-Command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Add-PSSnapin Microsoft.SharePoint.PowerShell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the snap-in loaded, you will have access to all the SharePoint 2010 cmdlets as if they are available on the local computer. You can verify that by using Get-Help against one of the SharePoint 2010 cmdlets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-Help Get-SPWeb -Full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enter-PSSession when used with -ComputerName parameter, creates a PSSession in the background and uses that throughout the life of a remote session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I exit a interactive session?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use Exit-PSSession to come out of an interactive PS Session. This will close any temporary session created in the background. So, it means that any variables or data you created during the interactive session won’t be available once you exit the session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How about using persistent sessions in interative remoting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oh yes, that is a great idea. In fact, it will be advantageous to use persistent sessions. By using a persistent session, you can enter and exit the interactive session as many times as you like. All the data and variables you created in the remote session will persist until you remove the session. You can do it the same way you used persistent sessions with Invoke-Command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
Enter-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Can I enter an existing PSSession?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes. You can use Get-PSSession cmdlet to see a list of all available/opened PS Sessions and then use Enter-PSSession as shown above to start interactive remoting. As you see here, I will pipe Get-PSSession output to Format-List cmdlet to get all session details.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting5-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;There are four ways to enter an existing PS Session for interactive remoting. I have highlighted the available options in the above screenshot. You can use which ever way is convenient.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -id 1
Enter-PSSession -InstanceId 55a417ed-f903-4265-a4dc-c892c2500e0d
Enter-PSSession -Name Session1            

$s = Get-PSSession -Id 1
Enter-PSSession -Session $s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of the above options start interactive session using the persistent session “session1”. It is just more than one way to do the same thing.&lt;/p&gt;
&lt;p&gt;Alright. This brings us to the end of this part on Interactive remoting sessions. In this next part, I will talk about something called implicit remoting. Stay tuned..!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 4 – Execute commands or scripts on a remote computer using Invoke-Command</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-4-execute-commands-or-scripts-on-a-remote-computer-using-invoke-command/</link>
      <pubDate>Mon, 01 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-4-execute-commands-or-scripts-on-a-remote-computer-using-invoke-command/</guid>
      <description>&lt;p&gt;In this part of PowerShell &lt;!-- raw HTML omitted --&gt;remoting series&lt;!-- raw HTML omitted --&gt;, I will discuss how to run commands or scripts on remote computer(s). Within remoting, there are couple of ways to run commands or scripts on a remote machine. This includes Invoke-Command cmdlet and interactive remoting sessions. These two methods deserve a separate post for each and hence I will discuss the Invoke-Command method in today&amp;rsquo;s post.&lt;/p&gt;
&lt;p&gt;Once you have &lt;!-- raw HTML omitted --&gt;enabled remoting&lt;!-- raw HTML omitted --&gt; on all your computers, you can use&lt;!-- raw HTML omitted --&gt; Invoke-Command&lt;!-- raw HTML omitted --&gt; cmdlet to run commands and scripts on local computer or on remote computer(s). There are many possible variations of this cmdlet. I will cover most of them here.&lt;/p&gt;
&lt;h4 id=&#34;invoke-command-to-run-commands-on-local-or-remote-computer&#34;&gt;Invoke-Command to run commands on local or remote computer&lt;/h4&gt;
&lt;p&gt;You can invoke a command on local or remote computer(s) using the below method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE -ScriptBlock { Get-Process }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The ScriptBlock parameter can be used to specify a list of commands you want to run on the remote computer.  ComputerName parameter is not required for running commands on the local machine. If you want to run the same command on multiple remote computers, you can supply the computer names as a comma separated list to ComputerName parameter or use a text file as shown in the example here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE,SP2010-DB -ScriptBlock{ Get-Process }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;All command names and variables in the ScriptBlock are evaluated on the remote computer. So, if you do something like -ScriptBlock {Get-Process -Name $procName}, PowerShell expects the remote computer session to have $procName defined. You can however pass variables on the local computer to a remote session when using Invoke-Command. This brings us to the next point in our discussion.&lt;/p&gt;
&lt;h4 id=&#34;passing-local-variables-as-arguments-to-remote-computer&#34;&gt;Passing local variables as arguments to remote computer&lt;/h4&gt;
&lt;p&gt;Taking the above example, we can pass the Name of the process you are looking for as a variable to the script block. ArgumentList parameter helps you achieve this. You can do this as shown here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$procName = &amp;#34;powerShell&amp;#34;
Invoke-Command -ComputerName (get-content c:\scripts\servers.txt) -ScriptBlock {param ($Name) Get-Process -Name $Name} -ArgumentList $procName
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example may be a simple one but it shows how to use -ArgumentList parameter to pass local variables to the remote session.&lt;/p&gt;
&lt;h4 id=&#34;invoke-command-to-execute-scripts-on-remote-computers&#34;&gt;Invoke-Command to execute scripts on remote computer(s)&lt;/h4&gt;
&lt;p&gt;Using ScriptBlock parameter can be quite tedious when you have to execute a bunch of PowerShell commands. This can be confusing when you have loops and conditional statements inside the scriptblock. Invoke-Command provides FilePath parameter to address this. You can use this parameter as shown below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE -FilePath C:\scripts\Test.PS1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make a note that the script you provide as FilePath must exist on the local machine or at a place accessible to the local machine.&lt;/p&gt;
&lt;h4 id=&#34;using--session-parameter-for-better-performance-and-sharing-data-between-commands&#34;&gt;Using -Session parameter for better performance and sharing data between commands&lt;/h4&gt;
&lt;p&gt;Whenever you run Invoke-Command with -ComputerName parameter, a temporary session gets established to execute the remote command. So, establishing a session every time you use this cmdlet can be time consuming. So, to avoid that we can use a persistent connection to the remote computer and that is what -Session uses. You can create a persistent connection to a remote computer by using New-PSSession cmdlet as shown here&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = New-PSSession -ComputerName SP2010-WFE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, $s contains the session details for the persistent connection. We can use $s to invoke a command on the remote computer and the syntax for that will be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Commad -Session $s -ScriptBlock {get-Process}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$s contains all the variables you create / modify when you execute commands on the remote computer. So, subsequent command execution with $s as the session will have access to all of the variables created / updated on the remote computer. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$s = new-pssession -computername SP2010-WFE
Invoke-Command -Session $s -ScriptBlock {$fileCount = (Get-ChildItem C:\ -Recurse).Count}
invoke-command -session $s -scriptblock {$fileCount}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could access $fileCount variable only because we used a persistent session to run the command. This would not have been possible if used -ComputerName to invoke the remote command.&lt;/p&gt;
&lt;h4 id=&#34;running-remote-command-as-a-background-job&#34;&gt;Running remote command as a background job&lt;/h4&gt;
&lt;p&gt;The example shown above — which gets the total file count on C:\ of a remote machine — can be quite time consuming based on how big is C:\ on the remote computer. In such case, you will have to wait for the remote command to complete execution. To avoid this, you can use -AsJob parameter to run the command as a background job on the remote computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Invoke-Command -ComputerName SP2010-WFE -ScriptBlock {(Get-ChildItem C:\ -Recurse).Count} -asJob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you run this, you will see the job details listed as shown here:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting4-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Now, you can use Get-Job and receive job cmdlets to see the output from the background job as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Get-Job -id 1 | Receive-Job
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A complete discussion on Background jobs deserves a series of posts. I will plan to do that next. If you don’t want to wait and learn about it right away, you can read about it @ &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315273.aspx&#34;&gt;http://technet.microsoft.com/en-us/library/dd315273.aspx&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;specifying-credentials-required-for-remoting&#34;&gt;Specifying credentials required for remoting&lt;/h4&gt;
&lt;p&gt;As we have seen the &lt;!-- raw HTML omitted --&gt;enable remoting post&lt;!-- raw HTML omitted --&gt;, you can use PowerShell remoting between computers in a workgroup environment too. All of the examples I showed above assume that you have access to remote computer as an administrator. This method works quite well in a domain environment where the logged on user has administrator credentials to access any computer in the domain. However, this will not work in a workgroup setup. Within a workgroup you need to pass the credentials along with Invoke-Command. To do that,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$cred = Get-Credential
Invoke-Command -ComputerName SP2010-WFE -ScriptBlock { Get-Process} -Credential $cred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, Get-Credential prompts for the credentials to access remote computer and uses the same while calling Invoke-Command cmdlet.&lt;/p&gt;
&lt;p&gt;This is the end of this article on Invoke-Command. Invoke-Command has many other parameters which are not discussed here. They are more advanced and used in specific scenarios. I will discuss those use cases as we proceed further in this series of posts on PowerShell 2.0 remoting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 3 – Enable remoting</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-3-enable-remoting/</link>
      <pubDate>Sun, 31 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-3-enable-remoting/</guid>
      <description>&lt;p&gt;In this part of the &lt;!-- raw HTML omitted --&gt;series of articles&lt;!-- raw HTML omitted --&gt; on PowerShell 2.0 &lt;!-- raw HTML omitted --&gt;remoting&lt;!-- raw HTML omitted --&gt;, we will look at how to enable remoting in different scenarios. This post assumes that you are running a supported operating system and you have installed all necesary &lt;!-- raw HTML omitted --&gt;pre-requisite&lt;!-- raw HTML omitted --&gt; software.&lt;/p&gt;
&lt;p&gt;So, how do you enable remoting?&lt;/p&gt;
&lt;p&gt;Remoting in PowerShell 2.0 can be enabled by just running the following cmdlet&lt;/p&gt;
&lt;h4 id=&#34;enable-psremoting&#34;&gt;Enable-PSRemoting&lt;/h4&gt;
&lt;p&gt;Note: You have to run this at a elevated PowerShell prompt. Also, all your active networks should be set to “Home” or “Work” network location. Setting firewall exceptions for remoting will fail if the network location is set to “Public”.&lt;/p&gt;
&lt;p&gt;Yes. That is it. You will be asked to respond to a couple of questions — based on OS architecture — as you see in the screenshot here.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting3-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As you see above, Enable-PSRemoting internally uses Set-WSManQuickConfig and a few &lt;!-- raw HTML omitted --&gt;other cmdlets&lt;!-- raw HTML omitted --&gt;. The second prompt around Microsoft.PowerShell32 will appear only on x64 OS. However, you should always use the more comprehensive Enable-PSRemoting cmdlet. If you don’t want to see all these prompts and but want to enable remoting in a more slient manner, you can use the -force parameter along with the cmdlet. Other parameters to Enable-PSRemoting cmdlet include -confirm and -whatif. You can run this cmdlet on all machines where you want to be able to receive commands from other machines in the network.&lt;/p&gt;
&lt;p&gt;How can you verify if remoting is enabled or not? You can use the Enter-PSSession cmdlet to test if remoting is enabled on the local machine or not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Enter-PSSession -ComputerName localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If remoting is enabled and functional, you will see the prompt changing to something like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting3-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;h4 id=&#34;powershell-remoting-in-a-workgroup-environment&#34;&gt;PowerShell remoting in a workgroup environment&lt;/h4&gt;
&lt;p&gt;You will not be able to connect to a computer in workgroup just by running Enable-PSRemoting cmdlet. This is essentially because the security levels on a workgroup joined computer are more stringent than on a domain joined computer.&lt;/p&gt;
&lt;p&gt;On Windows XP systems, you need to make sure the local security policy to enable classic mode authentication for network logons. This cabe be done by opening “Local Security Policy” from Control Panel -&amp;gt; Administrative Tools. Over there, navigate to Local Policies -&amp;gt; Security Options and double click on “Network Access: Sharing and Security Model for local accounts” and set it to classic.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting3-3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Once the above change is made, you can enable remoting using Enable-PSremoting and then run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;set-item&lt;/span&gt; wsman&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt;localhost\client\trustedhosts -value *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On Vista and later operating systems in workgroup model, you need to run the above cmdlet only. After these steps are performed, you should be able to send commands to a remote computer in a workgroup enviroment.&lt;/p&gt;
&lt;p&gt;To enable remoting for multiple computers in an enterprise or domain environment, you can use group policy. For more information on this, refer to the “HOW TO ENABLE REMOTING IN AN ENTERPRISE” section at &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347642.aspx&#34;&gt;http://technet.microsoft.com/en-us/library/dd347642.aspx&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;In the next set of posts, we will see how to execute commands on remote machines using various cmdlets available within PowerShell remoting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 2 – Overview of remoting cmdlets</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-2-overview-of-remoting-cmdlets/</link>
      <pubDate>Wed, 27 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-2-overview-of-remoting-cmdlets/</guid>
      <description>&lt;p&gt;In part 1 of this series I gave a quick introduction to PowerShell 2.0 remoting. Before we look at how to enable or configure a computer for remoting, let us take a quick look at PowerShell 2.0 remoting cmdlets. Here is a complete list of cmdlets with a brief overview.&lt;/p&gt;
&lt;p&gt;This list will also include cmdlets that are not directly used within remoting but help configure various aspects of remoting. The knowledge of these cmdlets such as WSMan, etc in this list is not mandatory for basic usage of PowerShell remoting. In this post, I will only discuss what each of these cmdlets are capable of and list any gotchas. A detailed usage of these cmdlets will be discussed later in the series.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable-PSRemoting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819498.aspx&#34;&gt;Enable-PSRemoting&lt;/a&gt; cmdlet configures the computer to receive Windows PowerShell remote commands that are sent by using the WS-Management technology. This cmdlet will be the first one to run if you want to use PowerShell 2.0 remoting features and needs to be run just once. This cmdlet internally calls &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819520.aspx&#34;&gt;Set-WSManQuickConfig&lt;/a&gt; to configure WinRM service, enable firewall exceptions for WS Management and finally enables all registered PowerShell configurations.&lt;/p&gt;
&lt;p&gt;BTW, you need to enable PowerShell remoting only if you want the computer receive commands from a remote machine. To only send commands to a remote machine, you don’t need to enable PowerShell remoting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable-PSRemoting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819522.aspx&#34;&gt;Disable-PSRemoting &lt;/a&gt;cmdlet disables all PowerShell session configurations on the local computer to prevent the computer from receiving any remote commands. You will have to manually stop the WinRM service if you don’t want the service to be running after you disable PowerShell remoting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Invoke-Command&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347578.aspx&#34;&gt;Invoke-Command &lt;/a&gt;cmdlet runs commands on a local or remote computer and returns all output from the commands, including errors. With a single Invoke-Command command, you can run commands on multiple computers. This cmdlet — in it’s default form — opens a session for running a command against a remote computer and closes it once the execution is complete. This method — to some extent — is slow and can be worked around by specifying pre-defined session information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New-PSSession&lt;/strong&gt;
Invoke-Command cmdlet supports specifying an existing session to enhance the speed of overall command execution. By specifying an existing session, we eliminate the need for creating/destroying the sessions on the fly. &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347668.aspx&#34;&gt;New-PSSession&lt;/a&gt; cmdlet can be used to create a persistent connection to a remote computer. By creating a persistent session, we will be able to share data, such as a function or the value of a variable between different commands executing within the PSSession.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter-PSSession&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In part 1, I briefly touched upon interactive remote sessions feature. The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315384.aspx&#34;&gt;Enter-PSSession&lt;/a&gt; cmdlet starts an interactive session with a single remote computer. During the session, the commands that you type run on the remote computer, just as though you were typing directly on the remote computer. You can have only one interactive session at a time. You can specify the PSSession you created using New-PSSession as a parameter to this cmdlet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exit-PSSesstion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315322.aspx&#34;&gt;Exit-PSSession&lt;/a&gt; exits an interactive PS Session created using Enter-PSSession cmdlet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get-PSSession&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347584.aspx&#34;&gt;Get-PSSession&lt;/a&gt; cmdlet gets the Windows PowerShell sessions (PSSessions) that were created in the current session. This cmdlet gets all the PSSessions returns all the PSSessions in to a variable when no parameters are specified. You can then use the session information with other cmdlets such as Invoke-Command, Enter-PSSession, Remove-PSSession, etc&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remove-PSSession&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315404.aspx&#34;&gt;Remove-PSSession &lt;/a&gt;cmdlet closes PS session(s). It stops any commands that are running in the PSSessions, ends the PSSession, and releases the resources that the PSSession was using. If the PSSession is connected to a remote computer, Remove-PSSession also closes the connection between the local and remote computers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Import-PSSession&lt;/strong&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd347575.aspx&#34;&gt;
Import-PSSession&lt;/a&gt; cmdlet uses the implicit remoting feature of PowerShell 2.0. Implicit remoting enables you to import commands from a local/remote computer in to an existing PS session and run those commands as if they were local to the session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Export-PSSession&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd315322.aspx&#34;&gt;Export-PSSession&lt;/a&gt; cmdlet gets cmdlets, functions, aliases, and other command types from another PSSession on a local or remote computer and saves them to local disk as a Windows PowerShell module. We can now use the &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819454.aspx&#34;&gt;Import-Module&lt;/a&gt; cmdlet to add the commands from the saved module to a PS Session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Register-PSSessionConfiguration&lt;/strong&gt;
Any PS session created using Invoke-Command or New-PSSession or any other PowerShell remoting cmdlet for that matter uses the default PS Session configuration as specified in the $PSSessionConfigurationName variable. PS Session configuration determines which commands are available in the session, and it can include settings that protect the computer, such as those that limit the amount of data that the session can receive remotely in a single object or command. So, you can use the &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819496.aspx&#34;&gt;Register-PSSessionConfiguration&lt;/a&gt; cmdlet creates and registers a new session configuration on the local computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unregister-PSSessionConfiguration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819455.aspx&#34;&gt;Unregister-PSSessionConfiguration&lt;/a&gt; cmdlet deletes registered session configurations from the computer. It is possible to delete the default PSSession configurations (Microsoft.PowerShell or Microsoft.PowerShell32) using this cmdlet. In such a case, you can use Enable-PSRemoting cmdlet to re-create and register the default PS Session configurations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable-PSSessionConfiguration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819437.aspx&#34;&gt;Disable-PSSessionConfiguration&lt;/a&gt; disables a registered PS Session configuration. Remember, this only disables the configuration but not un-register or delete the information from local computer. These disabled session configurations cannot be used to establish a remoting session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable-PSSessionConfiguration&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819495.aspx&#34;&gt;Enable-PSSessionConfiguration&lt;/a&gt; cmdlet re-enables registered session configurations that have been disabled by using the &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819437.aspx&#34;&gt;Disable-PSSessionConfiguration&lt;/a&gt; cmdlet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get-PSSessionConfiguration&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819447.aspx&#34;&gt;Get-PSSessionConfiguration&lt;/a&gt; cmdlet gets the session configurations that have been registered on the local computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Set-PSSessionConfiguration&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819440.aspx&#34;&gt;Set-PSSessionConfiguration&lt;/a&gt; cmdlet changes the properties of the registered session configurations on the local computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test-WSMan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PowerShell remoting requires WinRM service to be running on the remote machines. You can use &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819488.aspx&#34;&gt;Test-WSMan&lt;/a&gt; cmdlet to quickly check if you can establish a remoting session with other computers. If WinRM is not enabled on remote machine, you can safely assume that PowerShell remoting is not enabled. However, you can assume that PowerShell remoting is enabled just by verifying that WinRM service is running. Remember, this checks only for WinRM service and remoting requires many other components to function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable-WSManCredSSP&lt;/strong&gt;
PowerShell remoting supports CredSSP authentication and the same can be enabled by using &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819517.aspx&#34;&gt;Enable-WSManCredSSP&lt;/a&gt; cmdlet. The Enable-WSManCredSPP cmdlet enables CredSSP authentication on a client or on a server computer. When CredSSP authentication is used, the user’s credentials are passed to a remote computer to be authenticated. This type of authentication is designed for commands that create a remote session from within another remote session. For example, you use this type of authentication if you want to run a background job on a remote computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable-WSManCredSSP&lt;/strong&gt;
The &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819469.aspx&#34;&gt;Disable-WSManCredSPP&lt;/a&gt; cmdlet disables CredSSP authentication on a client or on a server computer.&lt;/p&gt;
&lt;p&gt;There are other WSMan cmdlets introduced in PowerShell 2.0 such as &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819453.aspx&#34;&gt;Connect-WSMan&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819486.aspx&#34;&gt;Disconnect-WSMan&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819521.aspx&#34;&gt;Get-WSManInstance&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819516.aspx&#34;&gt;New-WSManInstance&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819512.aspx&#34;&gt;New-WSManSessionOption&lt;/a&gt;, &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819463.aspx&#34;&gt;Remove-WSManInstance&lt;/a&gt; and &lt;a href=&#34;http://technet.microsoft.com/en-us/library/dd819503.aspx&#34;&gt;Set-WSManInstance&lt;/a&gt;. These cmdlets are not really meant for PowerShell remoting but we will discuss them as required.&lt;/p&gt;
&lt;p&gt;This brings us to the end of part 2 and in the next set of posts we will look at how to enable/configure computer(s) for remoting and do some cool things. Do leave your feedback on this article. Let me know if I missed something or need to correct something.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell 2.0 remoting guide: Part 1 – The basics</title>
      <link>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-1-the-basics/</link>
      <pubDate>Fri, 22 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/powershell-2-0-remoting-guide-part-1-the-basics/</guid>
      <description>&lt;p&gt;I am starting a series of articles on remoting feature of PowerShell 2.0. This is one of the best features of PowerShell 2.0 and my favorite feature for sure. The number of very cool things one can achieve using this feature is just un-imaginable. I have started digging deep in to this feature as I start writing a network file browser powerpack as a part of hands-on. I hope it is worth sharing what I learn by writing about it here. So, this is the first in that series of posts. In this post, we will look at absolute basics to start using PowerShell remoting.&lt;/p&gt;
&lt;h3 id=&#34;what-is-powershell-remoting&#34;&gt;What is PowerShell remoting?&lt;/h3&gt;
&lt;p&gt;This is a new feature in PowerShell 2.0 that enables remote management of computers from a central location. Remoting uses WS-Management to invoke scripts and cmdlets on remote machine(s). This feature also enables what is known as “&lt;!-- raw HTML omitted --&gt;Universal Code Execution Model&lt;!-- raw HTML omitted --&gt;” in Windows PowerShell v2. UCEM means that whatever runs locally should run anywhere. PowerShell remoting lets you import remote commands in to a local session — a feature known as&lt;!-- raw HTML omitted --&gt; implicit remoting &lt;!-- raw HTML omitted --&gt;and also enables you to save or &lt;!-- raw HTML omitted --&gt;export&lt;!-- raw HTML omitted --&gt; these imported commands to local disk as a module for later use. There are bunch of other features such as&lt;!-- raw HTML omitted --&gt; interactive &lt;!-- raw HTML omitted --&gt;sessions, etc. We will look in to all these features but one thing at a time.&lt;/p&gt;
&lt;p&gt;PowerShell remoting allows for multiple ways of connecting. These ways include interactive (1:1), fan-out (1:many), and fan-in (many:1 by using the IIS hosting model, Ex: &lt;!-- raw HTML omitted --&gt;MobileShell&lt;!-- raw HTML omitted --&gt; ). We will look at each of these methods in this series of articles on remoting.&lt;/p&gt;
&lt;h4 id=&#34;remoting-requirements&#34;&gt;Remoting requirements&lt;/h4&gt;
&lt;p&gt;To enable PowerShell remoting, all computers participating in remote management should have the following software.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;PowerShell 2.0 and WinRM 2.0 are included as a part of &lt;!-- raw HTML omitted --&gt;Windows Management Framework &lt;!-- raw HTML omitted --&gt;download and hence is available for Windows XP, Windows Server 2003, Windows Vista and Windows Server 2008. WinRM 2.0 and PowerShell 2.0 can be installed on the following supported operating systems:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;To be able run scripts and commands on remote computers, the user performing remote script execution must be a member of the administrators group on the remote machine or should be able to provide administrator credentials at the time of remote execution. Also, on client versions of Windows such as Windows Vista and Windows 7, network location must be set either to Home or Work. WS-Management may not function properly if the network location is set to Public.&lt;/p&gt;
&lt;p&gt;Here is the setup I have to experiment with PowerShell remoting. I will use these virtual machines and the Windows Server 2008 R2 OS to write my file browser PowerPack using PowerShell remoting. This will help me get a good coverage of all supported operating system families.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://ravichaganti.com/images/remoting1-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Jonathan Medd&lt;!-- raw HTML omitted --&gt; is currently writing a PowerShell cmdlet series in which he is talking about remoting cmdlets also. What I am going to write here is not a repeat of that. In the &lt;!-- raw HTML omitted --&gt;next pos&lt;!-- raw HTML omitted --&gt;t, we will look &lt;!-- raw HTML omitted --&gt;at how to configure the available systems to enable&lt;!-- raw HTML omitted --&gt; at an overview of PowerShell remoting  cmdlets. I will also talk about various methods to enable PowerShell remoting. So, stay tuned..!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
