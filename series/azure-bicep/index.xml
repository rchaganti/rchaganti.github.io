<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure Bicep on Ravikanth Chaganti</title>
    <link>https://ravichaganti.com/series/azure-bicep/</link>
    <description>Recent content in Azure Bicep on Ravikanth Chaganti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ravichaganti.com/series/azure-bicep/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bicep Language - Beyond Basics - Iterations</title>
      <link>https://ravichaganti.com/blog/bicep-basics-beyond-basics-iterations/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/bicep-basics-beyond-basics-iterations/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;When working ARM templates, you may have come across a situation where you want to provision multiple instances of a resource with similar configuration. For example, multiple storage accounts or virtual machines or multiple data disks attached to a virtual machine. In the JSON template language, the &lt;code&gt;copy&lt;/code&gt; element is used for this purpose. Bicep language has a few different ways you can achieve this at different levels like resources, resource properties, and outputs. Variable iterations &lt;a href=&#34;https://github.com/Azure/bicep/issues/1814&#34;&gt;are not available yet&lt;/a&gt; and mostly coming as a part of &lt;a href=&#34;https://github.com/Azure/bicep/projects/7#card-56641753&#34;&gt;0.4 release&lt;/a&gt; which is due by &lt;a href=&#34;https://github.com/Azure/bicep/milestone/7&#34;&gt;May 25th 2021&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this part of the &lt;a href=&#34;https://ravichaganti.com/series/azure-bicep&#34;&gt;series&lt;/a&gt; of articles on Bicep language, you will learn about using iterations in your Bicep files.&lt;/p&gt;
&lt;p&gt;There are three ways to implement iterations in Bicep.&lt;/p&gt;
&lt;h2 id=&#34;using-a-loop-index&#34;&gt;Using a loop index&lt;/h2&gt;
&lt;p&gt;Using an iteration or loop index is the simplest way to create multiple instances of a resource or iterating resource properties. A loop index syntax in Bicep is similar to what you may have seen in other languages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[for &amp;lt;index&amp;gt; in range(&amp;lt;start&amp;gt;, &amp;lt;stop&amp;gt;): {
  &amp;lt;resource-instance&amp;gt; or &amp;lt;resource-properties&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you will see next, all you need to do is just assign this either to a resource declaration or resource property.&lt;/p&gt;
&lt;h3 id=&#34;resource-iteration&#34;&gt;Resource iteration&lt;/h3&gt;
&lt;p&gt;Here is the general syntax of implementing a index based iteration in Bicep for resources.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;resource &amp;lt;resource-symbolic-name&amp;gt; &amp;#39;&amp;lt;resource-type&amp;gt;@&amp;lt;api-version&amp;gt;&amp;#39; = [for &amp;lt;index&amp;gt; in range(&amp;lt;start&amp;gt;, &amp;lt;stop&amp;gt;): {
  &amp;lt;resource-instance&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should not be difficult to understand since you already know how to declare a resource instance. To add an iteration, all you need to do is add the iterator. In this case a loop index. The &lt;code&gt;range()&lt;/code&gt; function here helps in creating a collection of integers from start integer to stop integer. Stop index is excluded. Here is a simple example around creating multiple storage accounts using loop index.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param saCount int = 2

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-04-01&amp;#39; = [for index in range(0, saCount): {
  name: &amp;#39;${index}stg${uniqueString(resourceGroup().id)}&amp;#39;
  location: resourceGroup().location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
  	accessTier: &amp;#39;Hot&amp;#39;
  }
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the previous article on expressions in Bicep language, you learned how to use interpolation. The same technique can be used here to access the value stored in &lt;code&gt;index&lt;/code&gt; &amp;ndash; &lt;code&gt;${index}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is how the resource declaration gets tranpiled into ARM JSON.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; [
    {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[length(range(0, parameters(&amp;#39;saCount&amp;#39;)))]&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2019-04-01&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[format(&amp;#39;{0}stg{1}&amp;#39;, range(0, parameters(&amp;#39;saCount&amp;#39;))[copyIndex()], uniqueString(resourceGroup().id))]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
      }
    }
  ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resource-property-iteration&#34;&gt;Resource property iteration&lt;/h3&gt;
&lt;p&gt;The general syntax for using loop indexes for resource properties is similar to that of resources.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;property-name&amp;gt;: [for &amp;lt;index&amp;gt; in range(&amp;lt;start&amp;gt;, &amp;lt;stop&amp;gt;): {
  &amp;lt;resource-properties&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a quick example of iterating on resource properties. This example demonstrates creating multiple subnets in a Azure Virtual Network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var numSubnets = 3
var subnetPrefix = [
  &amp;#39;10.10.12.0/24&amp;#39;
  &amp;#39;10.10.13.0/24&amp;#39;
]

resource vnet &amp;#39;Microsoft.Network/virtualNetworks@2018-11-01&amp;#39; = {
  name: &amp;#39;vnet&amp;#39;
  location: resourceGroup().location
  properties: {
    addressSpace: {
      addressPrefixes: [
        &amp;#39;10.10.10.0/16&amp;#39;
      ]
    }
    subnets: [for sIndex in range(0, numSubnets): {
      name: &amp;#39;subnet${sIndex}&amp;#39;
      properties: {
        addressPrefix: subnetPrefix[sIndex]
      }
    }]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The way this example is built is very similar to how you create multiple storage account instances. For the number of subnets, the &lt;code&gt;numSubnets&lt;/code&gt; variable is used and the &lt;code&gt;subnetPrefix&lt;/code&gt; array has the prefixes used for each subnet. Using array indexer, you can retrieve the prefix from the &lt;code&gt;subnetPrefix&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;Those of you with a sharp eye must have noticed that the &lt;code&gt;numSubnets&lt;/code&gt; is set to 3 but there are only two elements in the &lt;code&gt;subnetPrefix&lt;/code&gt; array. For Bicep, this does not matter. You must make sure that these values are consistent.&lt;/p&gt;
&lt;h2 id=&#34;iterating-over-a-collection&#34;&gt;Iterating over a collection&lt;/h2&gt;
&lt;p&gt;The second method of creating resource or resource property iterations is to iterate over a collection. Here is the general syntax for this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[for &amp;lt;item&amp;gt; in &amp;lt;collection&amp;gt;: {
  &amp;lt;resource-instance&amp;gt; or &amp;lt;resource-properties&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once again, this syntax can be used with either resource declaration or resource properties.&lt;/p&gt;
&lt;h3 id=&#34;resource-iteration-1&#34;&gt;Resource Iteration&lt;/h3&gt;
&lt;p&gt;The general syntax for iterating over a collection to create multiple resource instances is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;resource &amp;lt;resource-symbolic-name&amp;gt; &amp;#39;&amp;lt;resource-type&amp;gt;@&amp;lt;api-version&amp;gt;&amp;#39; = [for &amp;lt;item&amp;gt; in &amp;lt;collection&amp;gt;: {
  &amp;lt;resource-instance&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a full example of creating multiple storage accounts using this method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var saNames = [
  &amp;#39;sqllondon&amp;#39;
  &amp;#39;sqlchennai&amp;#39;
  &amp;#39;archiveseattle&amp;#39;
]

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-04-01&amp;#39; = [for sName in saNames: {
  name: concat(sName, uniqueString(resourceGroup().id))
  location: resourceGroup().location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: &amp;#39;Hot&amp;#39;
  }
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the variable &lt;code&gt;saNames&lt;/code&gt; contains a list of storage account names. The iteration in this example loops over the elements in &lt;code&gt;saNames&lt;/code&gt; array and uses these values as a part of the storage account name. Here is how the resource declaration gets compiled into ARM JSON representation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; [
	{
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[length(variables(&amp;#39;saNames&amp;#39;))]&amp;#34;&lt;/span&gt;
         },
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2019-04-01&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[concat(variables(&amp;#39;saNames&amp;#39;)[copyIndex()], uniqueString(resourceGroup().id))]&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
		},
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
		}
	}
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resource-property-iteration-1&#34;&gt;Resource property iteration&lt;/h3&gt;
&lt;p&gt;Here is the general syntax for using collection iteration with resource properties.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;property-name&amp;gt;: [for &amp;lt;item&amp;gt; in &amp;lt;collection&amp;gt;: {
  &amp;lt;resource-properties&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The previous example around the storage account creation can be modified to add iteration for the &lt;code&gt;accessTier&lt;/code&gt; property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var sAccounts = [
  {
    name: &amp;#39;sqllondon&amp;#39;
    accessTier: &amp;#39;Cool&amp;#39;
  }
  {
    name: &amp;#39;sqlchennai&amp;#39;
    accessTier: &amp;#39;Hot&amp;#39;
  }
  {
    name: &amp;#39;archiveseattle&amp;#39;
    accessTier: &amp;#39;Cool&amp;#39;
  }
] 

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-04-01&amp;#39; = [for sAcct in sAccounts: {
  name: concat(sAcct.name, uniqueString(resourceGroup().id))
  location: resourceGroup().location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: sAcct.accessTier
  }
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, the &lt;code&gt;sAccounts&lt;/code&gt; variable is a collection of objects. Each object in this collection has two properties &amp;ndash; &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;accessTier&lt;/code&gt;. We use the same collection for both storage account instance and the &lt;code&gt;accessTier&lt;/code&gt; resource property. Within the iteration, you can access the properties using an accessor. &lt;code&gt;sAcct&lt;/code&gt; represents the item from &lt;code&gt;sAccounts&lt;/code&gt; collection in the current iteration and &lt;code&gt;sAcct.name&lt;/code&gt; and &lt;code&gt;sAcct.accessTier&lt;/code&gt; represent the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;accessTier&lt;/code&gt; values associated with the current item in the collection.&lt;/p&gt;
&lt;h2 id=&#34;iterating-over-elements-in-an-array&#34;&gt;Iterating over elements in an array&lt;/h2&gt;
&lt;p&gt;The final method to use loops in Bicep files is to iterate over elements in an array. In the first method, you looked using the index value from the iteration. In the second method where we used an array of storage account names, we used the element value within each iteration. In this third method, you can access both index and element value. The general syntax for this type of iteration is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[for (&amp;lt;item&amp;gt;, &amp;lt;index&amp;gt;) in &amp;lt;collection&amp;gt;: {
  &amp;lt;resource-instance&amp;gt; or &amp;lt;resource-properties&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resource-iteration-2&#34;&gt;Resource Iteration&lt;/h3&gt;
&lt;p&gt;The syntax for resource iteration using this third method is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;resource &amp;lt;resource-symbolic-name&amp;gt; &amp;#39;&amp;lt;resource-type&amp;gt;@&amp;lt;api-version&amp;gt;&amp;#39; = [for (&amp;lt;item&amp;gt;, &amp;lt;index&amp;gt;) in &amp;lt;collection&amp;gt;: {
  &amp;lt;resource-instance&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this method, you can simplify the above example where you created multiple storage accounts and configured a different access tier for each account.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var sAccounts = [
  {
    name: &amp;#39;sqllondon&amp;#39;
    accessTier: &amp;#39;Cool&amp;#39;
  }
  {
    name: &amp;#39;sqlchennai&amp;#39;
    accessTier: &amp;#39;Hot&amp;#39;
  }
  {
    name: &amp;#39;archiveseattle&amp;#39;
    accessTier: &amp;#39;Cool&amp;#39;
  }
] 

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-04-01&amp;#39; = [for (sItem, sIndex) in sAccounts: {
  name: &amp;#39;stg${sItem.name}${sIndex}&amp;#39;
  location: resourceGroup().location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: sItem.accessTier
  }
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this method of iteration, &lt;code&gt;sItem&lt;/code&gt; represents the element at the current index and &lt;code&gt;sIndex&lt;/code&gt; is the integer representing the current iteration. You can build this and see how it gets transpiled to ARM JSON representation.&lt;/p&gt;
&lt;h3 id=&#34;resource-property-iteration-2&#34;&gt;Resource property Iteration&lt;/h3&gt;
&lt;p&gt;The syntax for resource property iteration in this method is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;property-name&amp;gt;: [for (&amp;lt;item&amp;gt;, &amp;lt;index&amp;gt;) in &amp;lt;collection&amp;gt;: {
  &amp;lt;resource-properties&amp;gt;
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is an example of using this method to create multiple subnets in a Azure virtual network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var subnetPrefix = [
  &amp;#39;10.10.12.0/24&amp;#39;
  &amp;#39;10.10.13.0/24&amp;#39;
]

resource vnet &amp;#39;Microsoft.Network/virtualNetworks@2018-11-01&amp;#39; = {
  name: &amp;#39;vnet&amp;#39;
  location: resourceGroup().location
  properties: {
    addressSpace: {
      addressPrefixes: [
        &amp;#39;10.10.10.0/16&amp;#39;
      ]
    }
    subnets: [for (sItem, sIndex) in subnetPrefix: {
      name: &amp;#39;subnet${sIndex}&amp;#39;
      properties: {
        addressPrefix: sItem
      }
    }]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you choose one of these methods depends on what type of configuration you want to perform. As you start building more complex Bicep files, you will start identifying places to use one of the three methods that you just learned.&lt;/p&gt;
&lt;h2 id=&#34;serial-deployment-of-resources&#34;&gt;Serial deployment of resources&lt;/h2&gt;
&lt;p&gt;By default, creating multiple resource instances happens in parallel. However, you can configure to do this serially as well. This is where you use the the &lt;code&gt;@batchSize&lt;/code&gt; decorator in a resource declaration. This decorator takes an integer as input which represent the number of parallel deployments to perform. Here is a quick example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param saCount int = 20

@batchSize(3)
resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-04-01&amp;#39; = [for index in range(0, saCount): {
  name: &amp;#39;${index}stg${uniqueString(resourceGroup().id)}&amp;#39;
  location: resourceGroup().location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
  	accessTier: &amp;#39;Hot&amp;#39;
  }
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you add a &lt;code&gt;batchSize&lt;/code&gt; decorator, the resulting ARM representation sets the &lt;code&gt;mode&lt;/code&gt; property of the &lt;code&gt;copy&lt;/code&gt; element to serial.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; [
    {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[length(range(0, parameters(&amp;#39;saCount&amp;#39;)))]&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;serial&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;batchSize&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2019-04-01&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[format(&amp;#39;{0}stg{1}&amp;#39;, range(0, parameters(&amp;#39;saCount&amp;#39;))[copyIndex()], uniqueString(resourceGroup().id))]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[resourceGroup().location]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
      }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far you have learned about using iteration for resource creation and resource properties. This is it for today. In the next part of this series, you will learn about outputs in Bicep files and how iterations can be used with outputs. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bicep Language - Beyond Basics - Expressions</title>
      <link>https://ravichaganti.com/blog/bicep-basics-beyond-basics-expressions/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/bicep-basics-beyond-basics-expressions/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;Expressions are a critical part of any programming language. For a Domain-Specific Language (DSL) such as Bicep that transpiles to ARM template JSON, expressions add a great value in reducing the complexity in authoring templates. All built-in functions available within ARM JSON template language are available within Bicep as well. Using these functions and the supported language constructs, you can create some powerful expressions in Bicep that significantly reduces the complexity compared to JSON templates. In this article, you will learn about writing a few different ways of writing expressions.&lt;/p&gt;
&lt;h2 id=&#34;string-interpolation&#34;&gt;String Interpolation&lt;/h2&gt;
&lt;p&gt;If you are familiar with languages like PowerShell or Terraform HashiCorp Configuration Language (HCL), you will know that the string interpolation syntax is used in expanding a value (parameter or variable) and then concatenating it to another string. With the ARM JSON templates, the &lt;code&gt;concat()&lt;/code&gt; or &lt;code&gt;format()&lt;/code&gt; functions are used for this purpose. Bicep simplifies this by using the interpolation syntax.&lt;/p&gt;
&lt;p&gt;Take a look at this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@maxLength(19)
param storageAccountName string = &amp;#39;rchagantistg&amp;#39;

var resourcePrefix = &amp;#39;hrdept&amp;#39;

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-06-01&amp;#39; = {
  name: &amp;#39;${resourcePrefix}${storageAccountName}&amp;#39;
  location: resourceGroup().location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: &amp;#39;Hot&amp;#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; property of the storage account resource is assigned a value using string interpolation. This results in the following ARM JSON template representation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[format(&amp;#39;{0}{1}&amp;#39;, variables(&amp;#39;resourcePrefix&amp;#39;), parameters(&amp;#39;storageAccountName&amp;#39;))]&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, you can combine built-in functions within these expressions. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var storageAccountName = &amp;#39;${resourcePrefix}${uniqueString(resourceGroup().id)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, &lt;code&gt;uniqueString()&lt;/code&gt; and &lt;code&gt;resourceGroup()&lt;/code&gt; are the built-in functions.&lt;/p&gt;
&lt;h2 id=&#34;ternary-operator&#34;&gt;Ternary Operator&lt;/h2&gt;
&lt;p&gt;Bicep language has unary and binary operators as well as a ternary operator. The unary and binary operators are something you must have already used in other languages and not difficult to understand. The ternary operator is something a bit special. Here is the general syntax of using ternary operator in Bicep language.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;condition-to-evaluate&amp;gt; ? &amp;lt;value-if-true&amp;gt; : &amp;lt;value-if-false&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The value from ternary operator evaluation can be assigned to a variable or a resource property directly. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var resourcePrefix = resourceGroup().location == &amp;#39;WestUS&amp;#39; ? &amp;#39;wus&amp;#39; : &amp;#39;us&amp;#39; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will result in the following variable assignment in the ARM JSON template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;variables&amp;#34;: {
    &amp;#34;resourcePrefix&amp;#34;: &amp;#34;[if(equals(resourceGroup().location, &amp;#39;WestUS&amp;#39;), &amp;#39;wus&amp;#39;, &amp;#39;us&amp;#39;)]&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;string-indexers&#34;&gt;String Indexers&lt;/h2&gt;
&lt;p&gt;Bicep supports both string and array indexers. An indexer is simply a way to access an element from a collection of items. As you have learned earlier, Bicep supports variables an parameters of type of object. Object data type is similar to how you represent data in JSON format. For example, say you want to decide the access tier based on the target usage of the storage account. You may represent this as an object in Bicep.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var resourcePrefix = {
  performance : {
    accessTier: &amp;#39;Hot&amp;#39; 
  }
  capacity : {
    accessTier: &amp;#39;Cool&amp;#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To use this, you can add a parameter that collects user input around target usage of the storage account.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param targetUsage string = &amp;#39;capacity&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you can use the value from the parameter as a part of string indexer on the variable &lt;code&gt;resourcePrefix&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;properties: {
  accessTier: resourcePrefix[targetUsage].accessTier
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the complete Bicep file for this string indexer example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param targetUsage string = &amp;#39;capacity&amp;#39;
var resourcePrefix = {
  performance : {
    accessTier: &amp;#39;Hot&amp;#39; 
  }
  capacity : {
    accessTier: &amp;#39;Cool&amp;#39;
  }
}

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-06-01&amp;#39; = {
  name: &amp;#39;${resourcePrefix}${uniqueString(resourceGroup().id)}&amp;#39;
  location: resourceGroup().location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: resourcePrefix[targetUsage].accessTier
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;accessTier&lt;/code&gt; resource property gets compiled to the following representation in ARM JSON template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
	&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;resourcePrefix&amp;#39;)[parameters(&amp;#39;targetUsage&amp;#39;)].accessTier]&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;property-accessors&#34;&gt;Property Accessors&lt;/h2&gt;
&lt;p&gt;The property accessors are another variant of expressions and can be used to reference a specific property within an object in Bicep. For example, if you know the target storage usage without needing that as a parameter input, the above expression can be replaced with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;  properties: {
    accessTier: resourcePrefix.performance.accessTier
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This results in the following within ARM JSON template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:&lt;/span&gt; {
	&lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[variables(&amp;#39;resourcePrefix&amp;#39;).performance.accessTier]&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to property accessors, Bicep also supports resource accessors. For example, the resource instance name in the above example is &lt;code&gt;sa&lt;/code&gt;. So, if you want to access the &lt;code&gt;id&lt;/code&gt; property of the storage account resource, you can use &lt;code&gt;sa.id&lt;/code&gt;. This type expression is useful within the &lt;code&gt;output&lt;/code&gt; element of the Bicep file or within a child resource specification. You will learn more about this later.&lt;/p&gt;
&lt;p&gt;This is it for today. In the next part of this series, you will learn about iterations in Bicep language and how you can use iterations with different elements within Bicep files. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bicep Language - Beyond Basics - Variables</title>
      <link>https://ravichaganti.com/blog/bicep-basics-beyond-basics-variables/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/bicep-basics-beyond-basics-variables/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;This part of the series will take you beyond Bicep language basics by showing you how to add variables to your Bicep files. If you have worked on ARM JSON templates, you know that variables exist there as well. The primary intention of using variables in either ARM JSON templates or Bicep language is to bring in a balance between &lt;a href=&#34;https://ravichaganti.com/blog/azure-resource-manager-in-30-days-using-expressions-and-variables-in-arm-templates/#free-form-vs-known-configuration&#34;&gt;free-form vs fixed configurations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, as you learned in &lt;a href=&#34;https://ravichaganti.com/blog/bicep-basics-beyond-basics-parameters/&#34;&gt;last part of this series&lt;/a&gt;, if you parameterize all resource properties, you will end up with a huge list of input parameters that need to be provided while compiling the Bicep file to ARM JSON template. While this provides flexibility, it may not always have desired outcome. If you want to enforce some standard resource property values across deployments, you must either hard-code those values or constrain what values can be specified if you are collecting the value from a parameter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Azure Policy can help with some of what I just described and is a different discussion altogether.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having too many parameters is not desired and hard-coding values in a template makes it difficult to maintain especially when the same value is used for multiple resource instances in a template.&lt;/p&gt;
&lt;p&gt;This is where variables are used. The basic syntax for declaring variables in Bicep is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var &amp;lt;variable-name&amp;gt; = &amp;lt;variable-value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword is used to declare a variable. &lt;em&gt;Variables in Bicep should be assigned at the time of declaration and cannot be reassigned.&lt;/em&gt; The name of the variable cannot be same as that of a &lt;code&gt;param&lt;/code&gt;, &lt;code&gt;resource&lt;/code&gt;, or &lt;code&gt;output&lt;/code&gt; identifiers. Variable declaration in Bicep does not need type specification like parameters. The data type of a variable gets inferred from the value that you assign.&lt;/p&gt;
&lt;p&gt;Here is an example that uses a variable in Bicep.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@description(&amp;#39;Specifies the name of the storage account. Length must be between 3 and 24 characters and all characters in lower-case.&amp;#39;)
@metadata({
  addedOn: &amp;#39;2021-04-11&amp;#39;
})
@minLength(3)
@maxLength(24)
param storageAccountName string

@description(&amp;#39;Specifies the storage account tier. Default value is Hot.&amp;#39;)
@allowed([
	&amp;#39;Hot&amp;#39;
	&amp;#39;Cool&amp;#39;
])
param accessTier string = &amp;#39;Hot&amp;#39;

var location = resourceGroup().location

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-06-01&amp;#39; = {
  name: storageAccountName
  location: location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: accessTier
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, you will see that the location is now a variable and not collected as input from parameters. The value of the location variable is assigned by evaluating the expression &lt;code&gt;resourceGroup().location&lt;/code&gt;. Now, imagine if you have multiple resources that you want to deploy as a part of the template. Instead of specifying the hard-coded location resource property value multiple times, you can simply refer to the variable that you defined.&lt;/p&gt;
&lt;p&gt;This is a quick one today but as you learn more beyond the basics in a later part of this &lt;a href=&#34;https://ravichaganti.com/series/azure-bicep&#34;&gt;series&lt;/a&gt;, you will see how  variables can be assigned values from expressions in Bicep language and how that is a powerful way to reduce the complexity of template authoring in Bicep language. Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bicep Language - Beyond Basics - Parameters</title>
      <link>https://ravichaganti.com/blog/bicep-basics-beyond-basics-parameters/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/bicep-basics-beyond-basics-parameters/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the previous part, you learned how you can get started with Bicep language to write your first Bicep file. As you learned, &lt;code&gt;resource&lt;/code&gt; keyword along with resource declaration and resource properties are the minimum required in a Bicep file. In today&amp;rsquo;s article, you will see what is beyond those basics.&lt;/p&gt;
&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;
&lt;p&gt;One of the goals of Infrastructure as Code (IaC) practice is to create reusable and repeatable automation for deploying your infrastructure. To make this happen, you need to parameterize your infrastructure configuration definitions. In this case, your Bicep files.&lt;/p&gt;
&lt;p&gt;Bicep language &lt;a href=&#34;https://github.com/Azure/bicep/blob/main/docs/spec/parameters.md&#34;&gt;supports parameter declarations&lt;/a&gt; that get compiled into ARM template parameters.&lt;/p&gt;
&lt;p&gt;At a minimum, this is how you specify a parameter declaration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param &amp;lt;parameter-identifier&amp;gt; &amp;lt;parameter-type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;param&lt;/code&gt; keyword is what gets used to declare parameters in Bicep. The &lt;code&gt;parameter-identifier&lt;/code&gt; is what gets referenced when we need the value assigned to the parameter within any resource properties. The &lt;code&gt;parameter-type&lt;/code&gt; can be any of the supported data types in Bicep. Bicep has support for several data types like every other programming language. This includes simple types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;any&lt;/code&gt; and complex types such as arrays and objects. You will learn about some of these types are you build more complex Bicep programs.&lt;/p&gt;
&lt;p&gt;So, in its simplest form, parameter specification in a Bicep file will look like the below example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param myFirstParameter string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can assign default values to parameters. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param myFirstParameter string = &amp;#39;Azure Bicep&amp;#39;
param isPrivate bool = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also assign value from an expression as a default value as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param myFirstParameter string = resourceGroup().location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Bicep, you can add parameter metadata and constraints using decorators. The general syntax for using decorated parameter declaration is as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@expression
param &amp;lt;parameter-identifier&amp;gt; &amp;lt;parameter-type&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;description-decorator&#34;&gt;Description Decorator&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;@description&lt;/code&gt; decorator is used to specify parameter description.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@description(&amp;#39;This parameter is used to specify the location of the resource. Default value is WestUS&amp;#39;)
param location string = &amp;#39;WestUS&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;value-decorator&#34;&gt;Value Decorator&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;@minValue&lt;/code&gt; and &lt;code&gt;@maxValue&lt;/code&gt; decorators are used to define the lower and upper bound values for an integer parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@minValue(1)
@maxValue(10)
param numVMs int = 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;allowed-values-decorator&#34;&gt;Allowed Values Decorator&lt;/h3&gt;
&lt;p&gt;Similar to JSON ARM templates, Bicep language too supports constraining parameter values to a known set. This is done using &lt;code&gt;@allowed&lt;/code&gt; parameter decorator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@allowed([
	&amp;#39;WestUS&amp;#39;
	&amp;#39;WestUS2&amp;#39;
	&amp;#39;EastUS&amp;#39;
])
param location string = &amp;#39;WestUS&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;@allowed&lt;/code&gt; decorator expects an array of values. This validation is case-sensitive. So, if you specify WestUs2 instead of WestUS2, &lt;code&gt;Bicep build&lt;/code&gt; will fail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;PS C:\sandbox&amp;gt; bicep build .\main.bicep
C:\sandbox\main.bicep(20,25) : Error BCP027: The parameter expects a default value of type &amp;#34;&amp;#39;EastUS&amp;#39; | &amp;#39;WestUS&amp;#39; | &amp;#39;WestUS2&amp;#39;&amp;#34; but provided value is of type &amp;#34;&amp;#39;WestUs2&amp;#39;&amp;#34;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;length-decorator&#34;&gt;Length Decorator&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;@minLength&lt;/code&gt; and &lt;code&gt;@maxLength&lt;/code&gt; decorator, you can constrain the length of string and array data type parameter values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@minLength(3)
@maxLength(24)
param storageAccountName string

@minLength(4)
@maxLength(6)
param vmNames string[]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;secure-decorator&#34;&gt;Secure Decorator&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;@secure&lt;/code&gt; decorator specifies that the parameter is a secure string or secure object. When a parameter is marked as secure, its value does not get stored in the deployment history.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@secure()
param administratorPasswrod string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;metadata-decorator&#34;&gt;Metadata Decorator&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;@metadata&lt;/code&gt; decorator can be used to specify any other custom properties that describe the parameter or its significance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@metadata({
	addedOn: &amp;#39;2021-04-11&amp;#39;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can combine multiple decorators for any given parameter in the Bicep file. Here is an example with declaration with parameter decorators.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@description(&amp;#39;Specifies the name of the storage account. Length must be between 3 and 24 characters and all characters in lower-case.&amp;#39;)
@metadata({

})
@minLength(3)
@maxLength(24)
param storageAccountName string

@description(&amp;#39;Specifies the storage account tier. Default value is Hot.&amp;#39;)
@allowed([
	&amp;#39;Hot&amp;#39;
	&amp;#39;Cool&amp;#39;
])
param accessTier string = &amp;#39;Hot&amp;#39;

@description(&amp;#39;Specifies the location of the new storage account. Default location is WestUS2.&amp;#39;)
@allowed([
	&amp;#39;WestUS&amp;#39;
	&amp;#39;WestUS2&amp;#39;
	&amp;#39;EastUS&amp;#39;
])
param location string = &amp;#39;WestUS2&amp;#39;

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-06-01&amp;#39; = {
  name: storageAccountName
  location: location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: accessTier
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is how the generated template looks once you compile this using &lt;code&gt;bicep build&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;maxLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;24&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;minLength&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;addedOn&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2021-04-11&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Specifies the name of the storage account. Length must be between 3 and 24 characters and all characters in lower-case.&amp;#34;&lt;/span&gt;
      }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Cold&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Archive&amp;#34;&lt;/span&gt;
      ],
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Specifies the storage account tier. Default value is Hot.&amp;#34;&lt;/span&gt;
      }
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WestUS2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;allowedValues&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WestUS&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WestUS2&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;EastUS&amp;#34;&lt;/span&gt;
      ],
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Specifies the location of the new storage account. Default location is WestUS2.&amp;#34;&lt;/span&gt;
      }
    }
  },
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;: [],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2019-06-01&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;location&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
      }
    }
  ],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;_generator&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;bicep&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;0.3.126.58533&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;templateHash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;10010485068534492010&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice in the &lt;code&gt;storageAccountName&lt;/code&gt; parameter definition how the contents of metadata decorator get rolled into parameter&amp;rsquo;s metadata attribute in the JSON template.&lt;/p&gt;
&lt;p&gt;Alright. This is all about using parameters in Bicep. You will gain some more knowledge beyond basics in the next post. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Azure Bicep</title>
      <link>https://ravichaganti.com/blog/getting-started-with-azure-bicep/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/getting-started-with-azure-bicep/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;In the first part of this &lt;a href=&#34;https://ravichaganti.com/series/azure-bicep&#34;&gt;new series of articles on Azure Bicep&lt;/a&gt;, you learnt about what is Azure Bicep and why it is needed. In this part, you will learn about how to get started with Azure Bicep.&lt;/p&gt;
&lt;h2 id=&#34;installing-bicep&#34;&gt;Installing Bicep&lt;/h2&gt;
&lt;p&gt;To start working with Bicep you will need, at a minimum, the Bicep CLI. There are &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/bicep-install?tabs=azure-powershell#install-bicep-cli&#34;&gt;multiple ways to get Bicep CLI&lt;/a&gt; on to your system. On Windows systems, you can use any of the following methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowerShell&lt;/li&gt;
&lt;li&gt;Azure CLI (2.20.0 or above)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Azure/bicep/releases/latest/download/bicep-setup-win-x64.exe&#34;&gt;Windows installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Choco package manager - &lt;code&gt;choco install bicep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Winget package manager - &lt;code&gt;winget install -e --id Microsoft.Bicep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;powershell&#34;&gt;PowerShell&lt;/h3&gt;
&lt;p&gt;Here is a PowerShell script that I use to install Bicep on my development system. This is a modified version of what is available in &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/bicep-install?tabs=azure-powershell#manual-with-powershell&#34;&gt;Bicep documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;CmdletBinding&lt;/span&gt;()]
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;param&lt;/span&gt; ()

&lt;span style=&#34;color:#007f7f&#34;&gt;# Variables&lt;/span&gt;
$bicepFolder = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;$env:USERPROFILE\.bicep&amp;#34;&lt;/span&gt;
$bicepShell = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;%USERPROFILE%\.bicep&amp;#34;&lt;/span&gt;
$bicepExe = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;$bicepFolder\bicep.exe&amp;#34;&lt;/span&gt;
$bicepUrl = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;https://github.com/Azure/bicep/releases/latest/download/bicep-win-x64.exe&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#007f7f&#34;&gt;# Create the install folder&lt;/span&gt;
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Write-Verbose&lt;/span&gt; -Message &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Creating $bicepFolder&amp;#34;&lt;/span&gt;
$installDir = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;New-Item&lt;/span&gt; -ItemType Directory -Path $bicepFolder -Force
$installDir.Attributes += &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Hidden&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#007f7f&#34;&gt;# Fetch the latest Bicep CLI binary&lt;/span&gt;
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Write-Verbose&lt;/span&gt; -Message &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Downloading latest Bicep binary&amp;#39;&lt;/span&gt;
(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;New-Object&lt;/span&gt; Net.WebClient).DownloadFile($bicepUrl, $bicepExe)

&lt;span style=&#34;color:#007f7f&#34;&gt;# Add bicep to your PATH&lt;/span&gt;
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Write-Verbose&lt;/span&gt; -Message &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Updating PATH variable&amp;#39;&lt;/span&gt;
$currentPath = (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Get-Item&lt;/span&gt; -path &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;HKCU:\Environment&amp;#34;&lt;/span&gt; ).GetValue(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Path&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;DoNotExpandEnvironmentNames&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (-not $currentPath.Contains($bicepShell)) { setx PATH ($currentPath + &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;;$bicepShell&amp;#34;&lt;/span&gt;) }
&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (-not $env:path.Contains($bicepFolder)) { $env:path += &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;;$bicepFolder&amp;#34;&lt;/span&gt; }

&lt;span style=&#34;color:#007f7f&#34;&gt;# Verify you can now access the &amp;#39;bicep&amp;#39; command.&lt;/span&gt;
bicep --version
&lt;span style=&#34;color:#007f7f&#34;&gt;# Done!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;azure-cli&#34;&gt;Azure CLI&lt;/h3&gt;
&lt;p&gt;Azure CLI, version 2.20.0 and above, has a sub command to work with Bicep. So, any command that reference Bicep will auto-trigger Bicep install if it is not already installed. You can manually install as well using the &lt;code&gt;az bicep install&lt;/code&gt; command.&lt;/p&gt;
&lt;h2 id=&#34;authoring-bicep-files&#34;&gt;Authoring Bicep Files&lt;/h2&gt;
&lt;p&gt;I recommend that you use &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; for authoring Bicep files. The &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-bicep&#34;&gt;Azure Bicep extension&lt;/a&gt; helps in providing auto-completion and linting for the Bicep language. This extension gets activated when you open or save a .bicep file in VS Code and provides snippets that will get you started. Since Bicep language uses the resource API specification, the Bicep language service behind VS Code will be capable of providing context-aware auto completion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ravichaganti.com/images/bicepvscode.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the resource type is specified, using the Bicep language services, you will get tips around other missing mandatory properties.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ravichaganti.com/images/bicepvscode2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;With this context-aware completion, not just the resource property names but also the possible property values are shown as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ravichaganti.com/images/bicepvscode3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Overall, if you are using Bicep for generating ARM templates, this VS Code extension is must.&lt;/p&gt;
&lt;h3 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h3&gt;
&lt;p&gt;Before you get started with authoring ARM templates as Bicep files, you need to first understand the basic structure of program in Bicep.&lt;/p&gt;
&lt;p&gt;Start with the minimum required elements in the Bicep file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;resource &amp;lt;resource-symbolic-name&amp;gt; &amp;#39;&amp;lt;resource-type&amp;gt;@&amp;lt;api-version&amp;gt;&amp;#39; = {
  name: &amp;#39;name-of-resource&amp;#39;
  location: &amp;#39;location-of-resource&amp;#39;
  properties: {
     &amp;lt;other-resource-properties&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;resource-keyword&#34;&gt;Resource keyword&lt;/h4&gt;
&lt;p&gt;The resource keyword is what you can define/declare a resource that you want to provision. The resource-symbolic-name is an identifier given to this instance of the resource. You can, in other parts of the Bicep file, refer to the properties of this resource instance using this symbolic name. This is not the name of the resource as it appears in Azure Portal after deployment.&lt;/p&gt;
&lt;p&gt;For each resource instance, you must provide the resource type and API version of the resource type to use. This must be provided in the format &lt;code&gt;&#39;Microsoft.Provider/Type@APIVersion&#39;&lt;/code&gt;. For example, &lt;code&gt;Microsoft.Storage/storageAccounts@2019-06-01&lt;/code&gt; is the valid resource type and version specification for Azure storage account resource.&lt;/p&gt;
&lt;h4 id=&#34;resource-properties&#34;&gt;Resource Properties&lt;/h4&gt;
&lt;p&gt;Within the resource properties, you must specify &lt;code&gt;name&lt;/code&gt; of the resource and &lt;code&gt;location&lt;/code&gt; for resources that require a location. Based on what resource type you intend to provision, there may be other properties that you have to specify. For example, storage account resource type needs &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;sku&lt;/code&gt; properties as well. The &lt;code&gt;properties&lt;/code&gt; object is then used group all other resource specific properties. For example, for an Azure storage account, you may want to specify an &lt;code&gt;accesstier&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With Bicep, these are the minimum required elements in a Bicep file to generate the ARM template. Here is an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-06-01&amp;#39; = {
  name: &amp;#39;rchagantisabicep&amp;#39;
  location: &amp;#39;WestUS&amp;#39;
  kind: &amp;#39;StorageV2&amp;#39;
  sku: {
    name : &amp;#39;Standard_LRS&amp;#39;
  }
  properties: {
    accessTier: &amp;#39;Hot&amp;#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can generate an ARM template by compiling this Bicep file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;bicep build main.bicep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated ARM template will be similar to what is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;: [],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2019-06-01&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;rchagantisabicep&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WestUS&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
      }
    }
  ],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;_generator&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;bicep&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;0.3.126.58533&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;templateHash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;15768260597240828360&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can deploy this using your favorite command &amp;ndash; either Azure CLI or Azure PowerShell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az deployment group create --resource-group bicep --template-file c:&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\\&lt;/span&gt;sandbox&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\\&lt;/span&gt;main.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, when using Azure CLI (2.20.0 or later) , it is not necessary to even compile the Bicep file. Azure CLI will take care of that. So, the following command will have the same effect as the previous one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;az deployment group create --resource-group bicep --template-file c:&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\\&lt;/span&gt;sandbox&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;\\&lt;/span&gt;main.bicep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alright. This is it for today. Tomorrow, you will learn what is beyond basics!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Azure Bicep</title>
      <link>https://ravichaganti.com/blog/introduction-to-azure-bicep/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ravichaganti.com/blog/introduction-to-azure-bicep/</guid>
      <description>
    &lt;figure &gt;
        
            &lt;img src=&#34;https://ravichaganti.com/images/bicep.png&#34; /&gt;
        
        
    &lt;/figure&gt;
    
&lt;p&gt;As I started preparing slides and demos for &lt;a href=&#34;https://ravichaganti.com/speaking-at-global-azure-bootcamp-india-2021&#34;&gt;my session on Azure Bicep at the Global Azure Bootcamp 2021&lt;/a&gt;, I made a bunch of notes. As a part of this &lt;a href=&#34;https://ravichaganti.com/series/azure-bicep&#34;&gt;new series of articles on Azure Bicep&lt;/a&gt;, I will start sharing those notes here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/azure/bicep&#34;&gt;Azure Bicep&lt;/a&gt; is a new Domain-Specific Language (DSL) for declaratively deploying Azure resources. Bicep is not a general purpose programming language but a transparent abstraction for Azure Resource Manager (ARM) Templates. This ensures that the properties that are valid in ARM templates are valid in Bicep as well. Azure Bicep acts as a transpiler for generating ARM templates from Bicep files. But, what is wrong with ARM templates?&lt;/p&gt;
&lt;h3 id=&#34;why-bicep&#34;&gt;Why Bicep?&lt;/h3&gt;
&lt;p&gt;ARM templates are JSON documents that offer a declarative way of defining your Azure infrastructure and configuration. These templates specify your intent to provision a service without the need to express how that can be done. &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/templates/&#34;&gt;ARM template language&lt;/a&gt; offers built-in functions and other language constructs such as loops and that help you create more dynamic infrastructure definitions. However, the JSON syntax for ARM templates makes these documents quite verbose and restricts the extensibility since you have to play within what is supported within JSON data representation. As the complexity of the infrastructure grows, your ARM template becomes almost unreadable and maintain. You can, of course, decompose the template into multiple linked templates and but linked templates too have their own limitations. You can use linked templates only from a HTTP location or a Azure blob store. There are alternatives to ARM template deployment. Especially, &lt;a href=&#34;https://www.terraform.io/&#34;&gt;HashiCorp Terraform&lt;/a&gt; or &lt;a href=&#34;https://www.pulumi.com/product/#sdk&#34;&gt;Pulumi SDK&lt;/a&gt;. These tools do not use ARM templates but provide alternate ways to define your infrastructure as code.&lt;/p&gt;
&lt;p&gt;Terraform provides a declarative way to define Azure infrastructure using the HashiCorp Configuration Language (HCL). Being a &lt;a href=&#34;https://www.terraform.io/docs/language/index.html&#34;&gt;language on its own&lt;/a&gt;, HCL supports variables, data types, arithmetic and logical operations, functions, and expressions. With the help of HCL, terraform delivers syntax that is concise and simple to write. The only downside of Terraform is the day zero support for new resources and resource providers.&lt;/p&gt;
&lt;p&gt;Pulumi, on the other hand, provides an SDK that you can use in your favorite language and define your infrastructure as imperative scripts or programs. I have not spent much time on Pulumi because of my non-developer background but Pulumi claims that they can provide day zero support for any new resource or resource provider.&lt;/p&gt;
&lt;p&gt;Both Terraform and Pulumi support multiple cloud deployments. These are not tools that are specifically written for Microsoft Azure. Microsoft could have chosen to adapt one of these but they instead chose to write their own language that makes authoring ARM templates easier. This is an important step since there are many customers who have heavily invested in ARM templates. If Microsoft moves away from ARM templates, this section of customers won&amp;rsquo;t be happy. Creating a transpiler that provides simple and concise declarative way of generating ARM templates will help maintain the backward compatibility while ensuring that those who are just starting with Microsoft Azure do not get freaked out looking at ARM templates.&lt;/p&gt;
&lt;p&gt;With Bicep, you don&amp;rsquo;t have to worry about learning ARM template language and author thousands of lines of JSON documents. You simply write a Bicep file that declaratively defines the Azure infrastructure, transpile it into an ARM template, and finally use the methods that are already known to you to provision the generated ARM template. Simple. But, how simple is Bicep language? Let us look at an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;param storageAccountName string
param accessTier string = &amp;#39;Hot&amp;#39;
param location string = &amp;#39;WestUS2&amp;#39;

resource sa &amp;#39;Microsoft.Storage/storageAccounts@2019-06-01&amp;#39; = {
  name: storageAccountName
  location: location
  sku: {
    name: &amp;#39;Standard_LRS&amp;#39;
  }
  kind: &amp;#39;StorageV2&amp;#39;
  properties: {
    accessTier: accessTier
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The 26 lines in the above example is what you need to create a reusable Bicep file that can generate ARM template to provision an Azure storage account. This, when compiled, produces the following ARM template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;contentVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;storageAccountName&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;defaultValue&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WestUS2&amp;#34;&lt;/span&gt;
    }
  },
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;: [],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Microsoft.Storage/storageAccounts&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;2019-06-01&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;storageAccountName&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;[parameters(&amp;#39;location&amp;#39;)]&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Standard_LRS&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;StorageV2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;accessTier&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hot&amp;#34;&lt;/span&gt;
      }
    }
  ],
  &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;_generator&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;bicep&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;0.3.126.58533&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;#34;templateHash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;6796585337478950038&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated template is almost twice the size of the Bicep file. This ARM template can be deployed by supplying the necessary parameter values as another JSON or at the command line when using Azure CLI or Azure PowerShell.&lt;/p&gt;
&lt;p&gt;This is a trivial example but consider the flexibility you will have with a language of its own to generate the ARM templates. You don&amp;rsquo;t have to worry about the JSON syntax gotchas or worry about how you can effectively decompose larger ARM templates into smaller linked templates. Bicep provides not just the constructs of a typical programming language but also a way to compose your Azure infrastructure definitions as smaller reusable modules.&lt;/p&gt;
&lt;p&gt;With Bicep being a transpiler for ARM templates, your existing CI and CD pipelines don&amp;rsquo;t have to change. All you may have to do is add an additional &lt;code&gt;bicep build&lt;/code&gt; step that brings the ARM template into the pipeline.&lt;/p&gt;
&lt;p&gt;Alright. This is a quick overview of what Bicep is and why you may want to look at it. In the next part of this series, you will see how you can get started with Bicep. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
